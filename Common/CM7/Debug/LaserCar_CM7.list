
LaserCar_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012788  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08012a28  08012a28  00013a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f04  08012f04  000141ec  2**0
                  CONTENTS
  4 .ARM          00000008  08012f04  08012f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f0c  08012f0c  000141ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f0c  08012f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f10  08012f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  08012f14  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  240001ec  08013100  000141ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000a6c  08013100  00014a6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000141ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022436  00000000  00000000  0001421a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004044  00000000  00000000  00036650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  0003a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001411  00000000  00000000  0003c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f374  00000000  00000000  0003d489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240b9  00000000  00000000  0007c7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019fa89  00000000  00000000  000a08b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024033f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008384  00000000  00000000  00240384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00248708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012a10 	.word	0x08012a10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	08012a10 	.word	0x08012a10

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba0 <SystemInit+0xfc>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a3c      	ldr	r2, [pc, #240]	@ (8000ba0 <SystemInit+0xfc>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000ab8:	4b39      	ldr	r3, [pc, #228]	@ (8000ba0 <SystemInit+0xfc>)
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	4a38      	ldr	r2, [pc, #224]	@ (8000ba0 <SystemInit+0xfc>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac4:	4b37      	ldr	r3, [pc, #220]	@ (8000ba4 <SystemInit+0x100>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d807      	bhi.n	8000ae0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad0:	4b34      	ldr	r3, [pc, #208]	@ (8000ba4 <SystemInit+0x100>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 030f 	bic.w	r3, r3, #15
 8000ad8:	4a32      	ldr	r2, [pc, #200]	@ (8000ba4 <SystemInit+0x100>)
 8000ada:	f043 0307 	orr.w	r3, r3, #7
 8000ade:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ae0:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <SystemInit+0x104>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a30      	ldr	r2, [pc, #192]	@ (8000ba8 <SystemInit+0x104>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba8 <SystemInit+0x104>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000af2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba8 <SystemInit+0x104>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	492c      	ldr	r1, [pc, #176]	@ (8000ba8 <SystemInit+0x104>)
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <SystemInit+0x108>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000afe:	4b29      	ldr	r3, [pc, #164]	@ (8000ba4 <SystemInit+0x100>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <SystemInit+0x100>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f023 030f 	bic.w	r3, r3, #15
 8000b12:	4a24      	ldr	r2, [pc, #144]	@ (8000ba4 <SystemInit+0x100>)
 8000b14:	f043 0307 	orr.w	r3, r3, #7
 8000b18:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ba8 <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b20:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <SystemInit+0x104>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <SystemInit+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <SystemInit+0x104>)
 8000b2e:	4a20      	ldr	r2, [pc, #128]	@ (8000bb0 <SystemInit+0x10c>)
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <SystemInit+0x104>)
 8000b34:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb4 <SystemInit+0x110>)
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <SystemInit+0x104>)
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <SystemInit+0x114>)
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <SystemInit+0x104>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <SystemInit+0x104>)
 8000b46:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb8 <SystemInit+0x114>)
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <SystemInit+0x104>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <SystemInit+0x104>)
 8000b52:	4a19      	ldr	r2, [pc, #100]	@ (8000bb8 <SystemInit+0x114>)
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <SystemInit+0x104>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <SystemInit+0x104>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <SystemInit+0x104>)
 8000b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <SystemInit+0x104>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <SystemInit+0x118>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	4a12      	ldr	r2, [pc, #72]	@ (8000bbc <SystemInit+0x118>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <SystemInit+0x11c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <SystemInit+0x120>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <SystemInit+0x124>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <SystemInit+0x128>)
 8000b90:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b94:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00
 8000ba4:	52002000 	.word	0x52002000
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bb0:	02020200 	.word	0x02020200
 8000bb4:	01ff0000 	.word	0x01ff0000
 8000bb8:	01010280 	.word	0x01010280
 8000bbc:	580000c0 	.word	0x580000c0
 8000bc0:	5c001000 	.word	0x5c001000
 8000bc4:	ffff0000 	.word	0xffff0000
 8000bc8:	51008108 	.word	0x51008108
 8000bcc:	52004000 	.word	0x52004000

08000bd0 <HAL_GPIO_EXTI_Callback>:
    nrf_rx_flag = 0;
}

// 中断服务函数
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == SPI2_IRQ_Pin) {
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000be0:	d101      	bne.n	8000be6 <HAL_GPIO_EXTI_Callback+0x16>
        NRF24L01_IRQHandler();
 8000be2:	f000 f805 	bl	8000bf0 <NRF24L01_IRQHandler>
    }
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <NRF24L01_IRQHandler>:

//修改中断处理函数
void NRF24L01_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
    uint8_t status = NRF24L01_Read_Reg(STATUS);
 8000bf6:	2007      	movs	r0, #7
 8000bf8:	f000 f876 	bl	8000ce8 <NRF24L01_Read_Reg>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71bb      	strb	r3, [r7, #6]
    uint8_t clear_mask = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	71fb      	strb	r3, [r7, #7]

    // 处理接收中断 (使用 RX_DR 位)
    if (status & (1 << RX_DR)) {  // 使用 RX_DR 宏
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d018      	beq.n	8000c40 <NRF24L01_IRQHandler+0x50>
        NRF24L01_Read_Buf(RD_RX_PLOAD, (uint8_t*)nrf_rx_buffer, RX_PLOAD_WIDTH);
 8000c0e:	2220      	movs	r2, #32
 8000c10:	4914      	ldr	r1, [pc, #80]	@ (8000c64 <NRF24L01_IRQHandler+0x74>)
 8000c12:	2061      	movs	r0, #97	@ 0x61
 8000c14:	f000 f8a2 	bl	8000d5c <NRF24L01_Read_Buf>
        nrf_rx_buffer[RX_PLOAD_WIDTH] = '\0'; // 添加字符串结束符
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <NRF24L01_IRQHandler+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2020 	strb.w	r2, [r3, #32]
        clear_mask |= (1 << RX_DR);  // 使用 RX_DR 宏
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c26:	71fb      	strb	r3, [r7, #7]

        // 处理接收数据
        if (rx_callback) {
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <NRF24L01_IRQHandler+0x78>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d004      	beq.n	8000c3a <NRF24L01_IRQHandler+0x4a>
            rx_callback(nrf_rx_buffer);
 8000c30:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <NRF24L01_IRQHandler+0x78>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	480b      	ldr	r0, [pc, #44]	@ (8000c64 <NRF24L01_IRQHandler+0x74>)
 8000c36:	4798      	blx	r3
 8000c38:	e002      	b.n	8000c40 <NRF24L01_IRQHandler+0x50>
        } else {
            nrf_rx_flag = 1;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <NRF24L01_IRQHandler+0x7c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
        }
    }

    // 清除所有中断标志
    NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS, status | clear_mask);
 8000c40:	79ba      	ldrb	r2, [r7, #6]
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2027      	movs	r0, #39	@ 0x27
 8000c4c:	f000 f810 	bl	8000c70 <NRF24L01_Write_Reg>
    __HAL_GPIO_EXTI_CLEAR_IT(SPI2_IRQ_Pin);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2400020c 	.word	0x2400020c
 8000c68:	2400022c 	.word	0x2400022c
 8000c6c:	24000208 	.word	0x24000208

08000c70 <NRF24L01_Write_Reg>:

//SPI写寄存器
//reg:指定寄存器地址
//value:写入的值
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	4603      	mov	r3, r0
 8000c78:	460a      	mov	r2, r1
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	71bb      	strb	r3, [r7, #6]
    uint8_t status;
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);  //使能SPI传输
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c86:	4814      	ldr	r0, [pc, #80]	@ (8000cd8 <NRF24L01_Write_Reg+0x68>)
 8000c88:	f004 fcac 	bl	80055e4 <HAL_GPIO_WritePin>

     aTxBuffer[0] = reg;//待写入的寄存器地址
 8000c8c:	4a13      	ldr	r2, [pc, #76]	@ (8000cdc <NRF24L01_Write_Reg+0x6c>)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 5000); //发送寄存器地址
 8000c92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <NRF24L01_Write_Reg+0x70>)
 8000c9c:	490f      	ldr	r1, [pc, #60]	@ (8000cdc <NRF24L01_Write_Reg+0x6c>)
 8000c9e:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <NRF24L01_Write_Reg+0x74>)
 8000ca0:	f008 fc12 	bl	80094c8 <HAL_SPI_TransmitReceive>
    status = aRxBuffer[0];
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <NRF24L01_Write_Reg+0x70>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	73fb      	strb	r3, [r7, #15]

    aTxBuffer[0] = value;//待写入值放入数据缓冲区
 8000caa:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <NRF24L01_Write_Reg+0x6c>)
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 5000); //向指定寄存器发送数据
 8000cb0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	4a09      	ldr	r2, [pc, #36]	@ (8000ce0 <NRF24L01_Write_Reg+0x70>)
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <NRF24L01_Write_Reg+0x6c>)
 8000cbc:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <NRF24L01_Write_Reg+0x74>)
 8000cbe:	f008 fc03 	bl	80094c8 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);    //禁止SPI传输
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc8:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <NRF24L01_Write_Reg+0x68>)
 8000cca:	f004 fc8b 	bl	80055e4 <HAL_GPIO_WritePin>
    return(status);      //返回状态值
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	58020400 	.word	0x58020400
 8000cdc:	24000230 	.word	0x24000230
 8000ce0:	24000250 	.word	0x24000250
 8000ce4:	24000478 	.word	0x24000478

08000ce8 <NRF24L01_Read_Reg>:


//读取SPI寄存器值
//reg:要读的寄存器
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
    uint8_t reg_val;
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);  //使能SPI传输
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf8:	4814      	ldr	r0, [pc, #80]	@ (8000d4c <NRF24L01_Read_Reg+0x64>)
 8000cfa:	f004 fc73 	bl	80055e4 <HAL_GPIO_WritePin>

    aTxBuffer[0] = reg;//待读取的寄存器地址
 8000cfe:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <NRF24L01_Read_Reg+0x68>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 5000); //发送寄存器地址
 8000d04:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	4a11      	ldr	r2, [pc, #68]	@ (8000d54 <NRF24L01_Read_Reg+0x6c>)
 8000d0e:	4910      	ldr	r1, [pc, #64]	@ (8000d50 <NRF24L01_Read_Reg+0x68>)
 8000d10:	4811      	ldr	r0, [pc, #68]	@ (8000d58 <NRF24L01_Read_Reg+0x70>)
 8000d12:	f008 fbd9 	bl	80094c8 <HAL_SPI_TransmitReceive>

    aTxBuffer[0] = 0xFF;//主机随机发送数据
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <NRF24L01_Read_Reg+0x68>)
 8000d18:	22ff      	movs	r2, #255	@ 0xff
 8000d1a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 5000); //读取指定寄存器值到缓冲器
 8000d1c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	4a0b      	ldr	r2, [pc, #44]	@ (8000d54 <NRF24L01_Read_Reg+0x6c>)
 8000d26:	490a      	ldr	r1, [pc, #40]	@ (8000d50 <NRF24L01_Read_Reg+0x68>)
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <NRF24L01_Read_Reg+0x70>)
 8000d2a:	f008 fbcd 	bl	80094c8 <HAL_SPI_TransmitReceive>
    reg_val = aRxBuffer[0];//获取寄存器值
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <NRF24L01_Read_Reg+0x6c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);         //禁止SPI传输
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d3a:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <NRF24L01_Read_Reg+0x64>)
 8000d3c:	f004 fc52 	bl	80055e4 <HAL_GPIO_WritePin>
    return(reg_val);           //返回寄存器值
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	58020400 	.word	0x58020400
 8000d50:	24000230 	.word	0x24000230
 8000d54:	24000250 	.word	0x24000250
 8000d58:	24000478 	.word	0x24000478

08000d5c <NRF24L01_Read_Buf>:
//reg:寄存器(位置)
//*pBuf:数据指针
//len:数据长度
//返回值,此次读到的状态寄存器值
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
    uint8_t status,uint8_t_ctr;
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);  //使能SPI传输
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d72:	481c      	ldr	r0, [pc, #112]	@ (8000de4 <NRF24L01_Read_Buf+0x88>)
 8000d74:	f004 fc36 	bl	80055e4 <HAL_GPIO_WritePin>

    aTxBuffer[0] = reg;//寄存器地址放入输出缓冲区
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <NRF24L01_Read_Buf+0x8c>)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 5000); //发送寄存器地址
 8000d7e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	4a19      	ldr	r2, [pc, #100]	@ (8000dec <NRF24L01_Read_Buf+0x90>)
 8000d88:	4917      	ldr	r1, [pc, #92]	@ (8000de8 <NRF24L01_Read_Buf+0x8c>)
 8000d8a:	4819      	ldr	r0, [pc, #100]	@ (8000df0 <NRF24L01_Read_Buf+0x94>)
 8000d8c:	f008 fb9c 	bl	80094c8 <HAL_SPI_TransmitReceive>
    status = aRxBuffer[0];//获取状态值
 8000d90:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <NRF24L01_Read_Buf+0x90>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	73bb      	strb	r3, [r7, #14]

    for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e014      	b.n	8000dc6 <NRF24L01_Read_Buf+0x6a>
      {
          aTxBuffer[0] = 0xFF;//主机随机发送数据
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <NRF24L01_Read_Buf+0x8c>)
 8000d9e:	22ff      	movs	r2, #255	@ 0xff
 8000da0:	701a      	strb	r2, [r3, #0]
          HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 5000); //从指定寄存器逐个读取数据
 8000da2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2301      	movs	r3, #1
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <NRF24L01_Read_Buf+0x90>)
 8000dac:	490e      	ldr	r1, [pc, #56]	@ (8000de8 <NRF24L01_Read_Buf+0x8c>)
 8000dae:	4810      	ldr	r0, [pc, #64]	@ (8000df0 <NRF24L01_Read_Buf+0x94>)
 8000db0:	f008 fb8a 	bl	80094c8 <HAL_SPI_TransmitReceive>
          pBuf[uint8_t_ctr] = aRxBuffer[0];   //将读取的字节放入接收数据缓冲区
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a0c      	ldr	r2, [pc, #48]	@ (8000dec <NRF24L01_Read_Buf+0x90>)
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	701a      	strb	r2, [r3, #0]
    for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d3e6      	bcc.n	8000d9c <NRF24L01_Read_Buf+0x40>
      }

    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);         //禁止SPI传输
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dd4:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <NRF24L01_Read_Buf+0x88>)
 8000dd6:	f004 fc05 	bl	80055e4 <HAL_GPIO_WritePin>
    return status;        //返回状态值
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	58020400 	.word	0x58020400
 8000de8:	24000230 	.word	0x24000230
 8000dec:	24000250 	.word	0x24000250
 8000df0:	24000478 	.word	0x24000478

08000df4 <CCRX_PID_Init>:
CCR_PID_Struct CCRY_PID;


void CCRX_PID_Init(float Kp,float Ki,float Kd,float P,float I, float D, float IThresh, float CurrentError, float LastError, float ErrorThresh, float ErrorInt,
		float Current, float Target,int32_t DeltaCCR, int32_t OutputThreshH,int32_t OutputThreshL,uint32_t Reset)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b093      	sub	sp, #76	@ 0x4c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
 8000dfe:	edc7 0a10 	vstr	s1, [r7, #64]	@ 0x40
 8000e02:	ed87 1a0f 	vstr	s2, [r7, #60]	@ 0x3c
 8000e06:	edc7 1a0e 	vstr	s3, [r7, #56]	@ 0x38
 8000e0a:	ed87 2a0d 	vstr	s4, [r7, #52]	@ 0x34
 8000e0e:	edc7 2a0c 	vstr	s5, [r7, #48]	@ 0x30
 8000e12:	ed87 3a0b 	vstr	s6, [r7, #44]	@ 0x2c
 8000e16:	edc7 3a0a 	vstr	s7, [r7, #40]	@ 0x28
 8000e1a:	ed87 4a09 	vstr	s8, [r7, #36]	@ 0x24
 8000e1e:	edc7 4a08 	vstr	s9, [r7, #32]
 8000e22:	ed87 5a07 	vstr	s10, [r7, #28]
 8000e26:	edc7 5a06 	vstr	s11, [r7, #24]
 8000e2a:	ed87 6a05 	vstr	s12, [r7, #20]
 8000e2e:	6138      	str	r0, [r7, #16]
 8000e30:	60f9      	str	r1, [r7, #12]
 8000e32:	60ba      	str	r2, [r7, #8]
 8000e34:	607b      	str	r3, [r7, #4]
	CCRX_PID.Kp = Kp;               // 比例系数
 8000e36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e3a:	6013      	str	r3, [r2, #0]
	CCRX_PID.Ki = Ki;               // 积分系数
 8000e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e40:	6053      	str	r3, [r2, #4]
	CCRX_PID.Kd = Kd;               // 微分系数
 8000e42:	4a19      	ldr	r2, [pc, #100]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e46:	6093      	str	r3, [r2, #8]
	CCRX_PID.P  = P;                // 比例项
 8000e48:	4a17      	ldr	r2, [pc, #92]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e4c:	60d3      	str	r3, [r2, #12]
	CCRX_PID.I  = I;                // 积分项
 8000e4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e52:	6113      	str	r3, [r2, #16]
	CCRX_PID.D  = D;                // 微分项
 8000e54:	4a14      	ldr	r2, [pc, #80]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e58:	6153      	str	r3, [r2, #20]
	CCRX_PID.IThresh = IThresh;     // 积分限幅
 8000e5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e5e:	6193      	str	r3, [r2, #24]
	CCRX_PID.CurrentError  = CurrentError;           // 当前误差
 8000e60:	4a11      	ldr	r2, [pc, #68]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e64:	61d3      	str	r3, [r2, #28]
	CCRX_PID.LastError   = LastError;           // 上一误差
 8000e66:	4a10      	ldr	r2, [pc, #64]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6a:	6213      	str	r3, [r2, #32]
	CCRX_PID.ErrorThresh = ErrorThresh;  // 抗积分饱和临界误差
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	6253      	str	r3, [r2, #36]	@ 0x24
	CCRX_PID.ErrorInt    = ErrorInt;     // 累计误差
 8000e72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	6293      	str	r3, [r2, #40]	@ 0x28
	CCRX_PID.Current     = Current;      // 当前横/纵坐标
 8000e78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	CCRX_PID.Target      = Target;          // 目标横/纵坐标
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	6313      	str	r3, [r2, #48]	@ 0x30
	CCRX_PID.DeltaCCR    = DeltaCCR;        // pid输出量：电机CCR改变值
 8000e84:	4a08      	ldr	r2, [pc, #32]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	6353      	str	r3, [r2, #52]	@ 0x34
	CCRX_PID.OutputThreshH = OutputThreshH; // pid输出限幅（上界）
 8000e8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6393      	str	r3, [r2, #56]	@ 0x38
	CCRX_PID.OutputThreshL = OutputThreshL; // pid输出限幅（下界）
 8000e90:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	63d3      	str	r3, [r2, #60]	@ 0x3c
	CCRX_PID.Reset         = Reset;        	// 切换目标标志
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <CCRX_PID_Init+0xb4>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e9c:	bf00      	nop
 8000e9e:	374c      	adds	r7, #76	@ 0x4c
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	24000270 	.word	0x24000270

08000eac <CCRY_PID_Init>:

void CCRY_PID_Init(float Kp,float Ki,float Kd,float P,float I, float D, float IThresh, float CurrentError, float LastError, float ErrorThresh, float ErrorInt,
		float Current, float Target,int32_t DeltaCCR, int32_t OutputThreshH,int32_t OutputThreshL,uint32_t Reset)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b093      	sub	sp, #76	@ 0x4c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
 8000eb6:	edc7 0a10 	vstr	s1, [r7, #64]	@ 0x40
 8000eba:	ed87 1a0f 	vstr	s2, [r7, #60]	@ 0x3c
 8000ebe:	edc7 1a0e 	vstr	s3, [r7, #56]	@ 0x38
 8000ec2:	ed87 2a0d 	vstr	s4, [r7, #52]	@ 0x34
 8000ec6:	edc7 2a0c 	vstr	s5, [r7, #48]	@ 0x30
 8000eca:	ed87 3a0b 	vstr	s6, [r7, #44]	@ 0x2c
 8000ece:	edc7 3a0a 	vstr	s7, [r7, #40]	@ 0x28
 8000ed2:	ed87 4a09 	vstr	s8, [r7, #36]	@ 0x24
 8000ed6:	edc7 4a08 	vstr	s9, [r7, #32]
 8000eda:	ed87 5a07 	vstr	s10, [r7, #28]
 8000ede:	edc7 5a06 	vstr	s11, [r7, #24]
 8000ee2:	ed87 6a05 	vstr	s12, [r7, #20]
 8000ee6:	6138      	str	r0, [r7, #16]
 8000ee8:	60f9      	str	r1, [r7, #12]
 8000eea:	60ba      	str	r2, [r7, #8]
 8000eec:	607b      	str	r3, [r7, #4]
	CCRY_PID.Kp = Kp;               // 比例系数
 8000eee:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ef2:	6013      	str	r3, [r2, #0]
	CCRY_PID.Ki = Ki;               // 积分系数
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ef8:	6053      	str	r3, [r2, #4]
	CCRY_PID.Kd = Kd;               // 微分系数
 8000efa:	4a19      	ldr	r2, [pc, #100]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000efe:	6093      	str	r3, [r2, #8]
	CCRY_PID.P  = P;                // 比例项
 8000f00:	4a17      	ldr	r2, [pc, #92]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f04:	60d3      	str	r3, [r2, #12]
	CCRY_PID.I  = I;                // 积分项
 8000f06:	4a16      	ldr	r2, [pc, #88]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0a:	6113      	str	r3, [r2, #16]
	CCRY_PID.D  = D;                // 微分项
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f10:	6153      	str	r3, [r2, #20]
	CCRY_PID.IThresh = IThresh;     // 积分限幅
 8000f12:	4a13      	ldr	r2, [pc, #76]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f16:	6193      	str	r3, [r2, #24]
	CCRY_PID.CurrentError  = CurrentError;      // 当前误差
 8000f18:	4a11      	ldr	r2, [pc, #68]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1c:	61d3      	str	r3, [r2, #28]
	CCRY_PID.LastError   = LastError;           // 上一误差
 8000f1e:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	6213      	str	r3, [r2, #32]
	CCRY_PID.ErrorThresh = ErrorThresh;  // 抗积分饱和临界误差
 8000f24:	4a0e      	ldr	r2, [pc, #56]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	6253      	str	r3, [r2, #36]	@ 0x24
	CCRY_PID.ErrorInt    = ErrorInt;     // 累计误差
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	6293      	str	r3, [r2, #40]	@ 0x28
	CCRY_PID.Current     = Current;      // 当前横/纵坐标
 8000f30:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	62d3      	str	r3, [r2, #44]	@ 0x2c
	CCRY_PID.Target      = Target;          // 目标横/纵坐标
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	6313      	str	r3, [r2, #48]	@ 0x30
	CCRY_PID.DeltaCCR    = DeltaCCR;        // pid输出量：电机CCR改变值
 8000f3c:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6353      	str	r3, [r2, #52]	@ 0x34
	CCRY_PID.OutputThreshH = OutputThreshH; // pid输出限幅（上界）
 8000f42:	4a07      	ldr	r2, [pc, #28]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6393      	str	r3, [r2, #56]	@ 0x38
	CCRY_PID.OutputThreshL = OutputThreshL; // pid输出限幅（下界）
 8000f48:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	CCRY_PID.Reset         = Reset;        	// 切换目标标志
 8000f4e:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <CCRY_PID_Init+0xb4>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f54:	bf00      	nop
 8000f56:	374c      	adds	r7, #76	@ 0x4c
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	240002b4 	.word	0x240002b4

08000f64 <CCRX_PID_Update>:

//全量式pid ,更新pid输出
void CCRX_PID_Update(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	if (CCRX_PID.Reset)
 8000f68:	4b53      	ldr	r3, [pc, #332]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <CCRX_PID_Update+0x1a>
	{
		CCRX_PID.LastError = CCRX_PID.CurrentError;
 8000f70:	4b51      	ldr	r3, [pc, #324]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	4a50      	ldr	r2, [pc, #320]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000f76:	6213      	str	r3, [r2, #32]
		CCRX_PID.Reset = 0;
 8000f78:	4b4f      	ldr	r3, [pc, #316]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	641a      	str	r2, [r3, #64]	@ 0x40
	}
	CCRX_PID.P = CCRX_PID.Kp * CCRX_PID.CurrentError;	// 计算P项
 8000f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000f80:	ed93 7a00 	vldr	s14, [r3]
 8000f84:	4b4c      	ldr	r3, [pc, #304]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000f86:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000f90:	edc3 7a03 	vstr	s15, [r3, #12]
	if (fabs(CCRX_PID.CurrentError) > CCRX_PID.ErrorThresh)	//计算I项
 8000f94:	4b48      	ldr	r3, [pc, #288]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000f96:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f9a:	eeb0 7ae7 	vabs.f32	s14, s15
 8000f9e:	4b46      	ldr	r3, [pc, #280]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fa0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fac:	dd04      	ble.n	8000fb8 <CCRX_PID_Update+0x54>
	{
		CCRX_PID.ErrorInt = 0;
 8000fae:	4b42      	ldr	r3, [pc, #264]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fb6:	e00a      	b.n	8000fce <CCRX_PID_Update+0x6a>
	}
	else
	{
		CCRX_PID.ErrorInt += CCRX_PID.CurrentError;  // 累计误差积分
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fba:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fc0:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fca:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}
	CCRX_PID.I = CCRX_PID.ErrorInt * CCRX_PID.Ki;  // I项=累计误差积分*积分系数
 8000fce:	4b3a      	ldr	r3, [pc, #232]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fd0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000fd4:	4b38      	ldr	r3, [pc, #224]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fde:	4b36      	ldr	r3, [pc, #216]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fe0:	edc3 7a04 	vstr	s15, [r3, #16]
	// 积分限幅
    CCRX_PID.I = (CCRX_PID.I > CCRX_PID.IThresh)? CCRX_PID.IThresh:CCRX_PID.I;
 8000fe4:	4b34      	ldr	r3, [pc, #208]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fe6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fea:	4b33      	ldr	r3, [pc, #204]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000fec:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff8:	dd02      	ble.n	8001000 <CCRX_PID_Update+0x9c>
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	e001      	b.n	8001004 <CCRX_PID_Update+0xa0>
 8001000:	4b2d      	ldr	r3, [pc, #180]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	4a2c      	ldr	r2, [pc, #176]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001006:	6113      	str	r3, [r2, #16]
	CCRX_PID.I = (CCRX_PID.I < -CCRX_PID.IThresh)? -CCRX_PID.IThresh:CCRX_PID.I;
 8001008:	4b2b      	ldr	r3, [pc, #172]	@ (80010b8 <CCRX_PID_Update+0x154>)
 800100a:	ed93 7a04 	vldr	s14, [r3, #16]
 800100e:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001010:	edd3 7a06 	vldr	s15, [r3, #24]
 8001014:	eef1 7a67 	vneg.f32	s15, s15
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d505      	bpl.n	800102e <CCRX_PID_Update+0xca>
 8001022:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001024:	edd3 7a06 	vldr	s15, [r3, #24]
 8001028:	eef1 7a67 	vneg.f32	s15, s15
 800102c:	e002      	b.n	8001034 <CCRX_PID_Update+0xd0>
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001030:	edd3 7a04 	vldr	s15, [r3, #16]
 8001034:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001036:	edc3 7a04 	vstr	s15, [r3, #16]

	CCRX_PID.D = CCRX_PID.Kd * (CCRX_PID.CurrentError - CCRX_PID.LastError);	// 计算D项
 800103a:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <CCRX_PID_Update+0x154>)
 800103c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001042:	edd3 6a07 	vldr	s13, [r3, #28]
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001048:	edd3 7a08 	vldr	s15, [r3, #32]
 800104c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001056:	edc3 7a05 	vstr	s15, [r3, #20]

	CCRX_PID.DeltaCCR = (int32_t)(CCRX_PID.P + CCRX_PID.I + CCRX_PID.D);// PID输出=P项+I项+D项
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <CCRX_PID_Update+0x154>)
 800105c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001062:	edd3 7a04 	vldr	s15, [r3, #16]
 8001066:	ee37 7a27 	vadd.f32	s14, s14, s15
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <CCRX_PID_Update+0x154>)
 800106c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001078:	ee17 2a90 	vmov	r2, s15
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <CCRX_PID_Update+0x154>)
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34
	// 输出限幅
	CCRX_PID.DeltaCCR = (CCRX_PID.DeltaCCR > CCRX_PID.OutputThreshH)? CCRX_PID.OutputThreshH:CCRX_PID.DeltaCCR;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001088:	4293      	cmp	r3, r2
 800108a:	bfa8      	it	ge
 800108c:	4613      	movge	r3, r2
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001090:	6353      	str	r3, [r2, #52]	@ 0x34
	CCRX_PID.DeltaCCR = (CCRX_PID.DeltaCCR < CCRX_PID.OutputThreshL)? CCRX_PID.OutputThreshL:CCRX_PID.DeltaCCR;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <CCRX_PID_Update+0x154>)
 8001098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800109a:	4293      	cmp	r3, r2
 800109c:	bfb8      	it	lt
 800109e:	4613      	movlt	r3, r2
 80010a0:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <CCRX_PID_Update+0x154>)
 80010a2:	6353      	str	r3, [r2, #52]	@ 0x34

	CCRX_PID.LastError = CCRX_PID.CurrentError;// 更新上一次误差
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <CCRX_PID_Update+0x154>)
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	4a03      	ldr	r2, [pc, #12]	@ (80010b8 <CCRX_PID_Update+0x154>)
 80010aa:	6213      	str	r3, [r2, #32]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	24000270 	.word	0x24000270

080010bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	615a      	str	r2, [r3, #20]
 80010de:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e0:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 80010e2:	4a35      	ldr	r2, [pc, #212]	@ (80011b8 <MX_ADC1_Init+0xfc>)
 80010e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80010e6:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 80010e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ee:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 80010f0:	2208      	movs	r2, #8
 80010f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fa:	4b2e      	ldr	r3, [pc, #184]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001100:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 8001102:	2200      	movs	r2, #0
 8001104:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001106:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 8001108:	2201      	movs	r2, #1
 800110a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800110c:	4b29      	ldr	r3, [pc, #164]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 800110e:	2201      	movs	r2, #1
 8001110:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 8001114:	2200      	movs	r2, #0
 8001116:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001118:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001124:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800112a:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 800112c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001130:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 8001134:	2200      	movs	r2, #0
 8001136:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001140:	481c      	ldr	r0, [pc, #112]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 8001142:	f002 f951 	bl	80033e8 <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800114c:	f000 fd10 	bl	8001b70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4816      	ldr	r0, [pc, #88]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 800115c:	f003 f8c8 	bl	80042f0 <HAL_ADCEx_MultiModeConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001166:	f000 fd03 	bl	8001b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_ADC1_Init+0x100>)
 800116c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116e:	2306      	movs	r3, #6
 8001170:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001172:	2302      	movs	r3, #2
 8001174:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001176:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800117a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800117c:	2304      	movs	r3, #4
 800117e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 800118e:	f002 fb97 	bl	80038c0 <HAL_ADC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001198:	f000 fcea 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800119c:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_ADC1_Init+0xf8>)
 800119e:	f002 fac5 	bl	800372c <HAL_ADC_Start>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0xf0>
  {
    /* Start Conversation Error */
    Error_Handler();
 80011a8:	f000 fce2 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	@ 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	240002f8 	.word	0x240002f8
 80011b8:	40022000 	.word	0x40022000
 80011bc:	0c900008 	.word	0x0c900008

080011c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0ba      	sub	sp, #232	@ 0xe8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	22c0      	movs	r2, #192	@ 0xc0
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00d fcf6 	bl	800ebd2 <memset>
  if(adcHandle->Instance==ADC1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001298 <HAL_ADC_MspInit+0xd8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d14f      	bne.n	8001290 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80011fc:	2304      	movs	r3, #4
 80011fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001200:	230a      	movs	r3, #10
 8001202:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 12;
 8001204:	230c      	movs	r3, #12
 8001206:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001208:	2302      	movs	r3, #2
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001210:	23c0      	movs	r3, #192	@ 0xc0
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001214:	2320      	movs	r3, #32
 8001216:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fa7e 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001232:	f000 fc9d 	bl	8001b70 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001236:	4b19      	ldr	r3, [pc, #100]	@ (800129c <HAL_ADC_MspInit+0xdc>)
 8001238:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800123c:	4a17      	ldr	r2, [pc, #92]	@ (800129c <HAL_ADC_MspInit+0xdc>)
 800123e:	f043 0320 	orr.w	r3, r3, #32
 8001242:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <HAL_ADC_MspInit+0xdc>)
 8001248:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <HAL_ADC_MspInit+0xdc>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	4a10      	ldr	r2, [pc, #64]	@ (800129c <HAL_ADC_MspInit+0xdc>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <HAL_ADC_MspInit+0xdc>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001272:	2340      	movs	r3, #64	@ 0x40
 8001274:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001278:	2303      	movs	r3, #3
 800127a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001288:	4619      	mov	r1, r3
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <HAL_ADC_MspInit+0xe0>)
 800128c:	f003 fffa 	bl	8005284 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001290:	bf00      	nop
 8001292:	37e8      	adds	r7, #232	@ 0xe8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40022000 	.word	0x40022000
 800129c:	58024400 	.word	0x58024400
 80012a0:	58020000 	.word	0x58020000

080012a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	@ 0x30
 80012a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ba:	4b68      	ldr	r3, [pc, #416]	@ (800145c <MX_GPIO_Init+0x1b8>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	4a66      	ldr	r2, [pc, #408]	@ (800145c <MX_GPIO_Init+0x1b8>)
 80012c2:	f043 0320 	orr.w	r3, r3, #32
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ca:	4b64      	ldr	r3, [pc, #400]	@ (800145c <MX_GPIO_Init+0x1b8>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d8:	4b60      	ldr	r3, [pc, #384]	@ (800145c <MX_GPIO_Init+0x1b8>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	4a5f      	ldr	r2, [pc, #380]	@ (800145c <MX_GPIO_Init+0x1b8>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e8:	4b5c      	ldr	r3, [pc, #368]	@ (800145c <MX_GPIO_Init+0x1b8>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b59      	ldr	r3, [pc, #356]	@ (800145c <MX_GPIO_Init+0x1b8>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	4a57      	ldr	r2, [pc, #348]	@ (800145c <MX_GPIO_Init+0x1b8>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001306:	4b55      	ldr	r3, [pc, #340]	@ (800145c <MX_GPIO_Init+0x1b8>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001314:	4b51      	ldr	r3, [pc, #324]	@ (800145c <MX_GPIO_Init+0x1b8>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	4a50      	ldr	r2, [pc, #320]	@ (800145c <MX_GPIO_Init+0x1b8>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001324:	4b4d      	ldr	r3, [pc, #308]	@ (800145c <MX_GPIO_Init+0x1b8>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b4a      	ldr	r3, [pc, #296]	@ (800145c <MX_GPIO_Init+0x1b8>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a48      	ldr	r2, [pc, #288]	@ (800145c <MX_GPIO_Init+0x1b8>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b46      	ldr	r3, [pc, #280]	@ (800145c <MX_GPIO_Init+0x1b8>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001350:	4b42      	ldr	r3, [pc, #264]	@ (800145c <MX_GPIO_Init+0x1b8>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4a41      	ldr	r2, [pc, #260]	@ (800145c <MX_GPIO_Init+0x1b8>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <MX_GPIO_Init+0x1b8>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CN_GPIO_Port, SPI2_CN_Pin, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	2140      	movs	r1, #64	@ 0x40
 8001372:	483b      	ldr	r0, [pc, #236]	@ (8001460 <MX_GPIO_Init+0x1bc>)
 8001374:	f004 f936 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CCD_CLK_Pin|CCD_SI_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2128      	movs	r1, #40	@ 0x28
 800137c:	4839      	ldr	r0, [pc, #228]	@ (8001464 <MX_GPIO_Init+0x1c0>)
 800137e:	f004 f931 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	210a      	movs	r1, #10
 8001386:	4838      	ldr	r0, [pc, #224]	@ (8001468 <MX_GPIO_Init+0x1c4>)
 8001388:	f004 f92c 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|SPI2_NSS_Pin, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001392:	4836      	ldr	r0, [pc, #216]	@ (800146c <MX_GPIO_Init+0x1c8>)
 8001394:	f004 f926 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CN_Pin;
 8001398:	2340      	movs	r3, #64	@ 0x40
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a4:	2302      	movs	r3, #2
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CN_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	482c      	ldr	r0, [pc, #176]	@ (8001460 <MX_GPIO_Init+0x1bc>)
 80013b0:	f003 ff68 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_IRQ_Pin;
 80013b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI2_IRQ_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4825      	ldr	r0, [pc, #148]	@ (8001460 <MX_GPIO_Init+0x1bc>)
 80013cc:	f003 ff5a 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CCD_CLK_Pin|CCD_SI_Pin;
 80013d0:	2328      	movs	r3, #40	@ 0x28
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	481f      	ldr	r0, [pc, #124]	@ (8001464 <MX_GPIO_Init+0x1c0>)
 80013e8:	f003 ff4c 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80013ec:	230a      	movs	r3, #10
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4819      	ldr	r0, [pc, #100]	@ (8001468 <MX_GPIO_Init+0x1c4>)
 8001404:	f003 ff3e 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001408:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001416:	2302      	movs	r3, #2
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4812      	ldr	r0, [pc, #72]	@ (800146c <MX_GPIO_Init+0x1c8>)
 8001422:	f003 ff2f 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8001426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001434:	2302      	movs	r3, #2
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	480b      	ldr	r0, [pc, #44]	@ (800146c <MX_GPIO_Init+0x1c8>)
 8001440:	f003 ff20 	bl	8005284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2017      	movs	r0, #23
 800144a:	f003 f90a 	bl	8004662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800144e:	2017      	movs	r0, #23
 8001450:	f003 f921 	bl	8004696 <HAL_NVIC_EnableIRQ>

}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	@ 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58024400 	.word	0x58024400
 8001460:	58021400 	.word	0x58021400
 8001464:	58020800 	.word	0x58020800
 8001468:	58020000 	.word	0x58020000
 800146c:	58020400 	.word	0x58020400

08001470 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    if (huart == &hlpuart1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a2e      	ldr	r2, [pc, #184]	@ (8001534 <HAL_UART_RxCpltCallback+0xc4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d128      	bne.n	80014d2 <HAL_UART_RxCpltCallback+0x62>
    {
        uint8_t receivedChar1 = ByteRcv1;
 8001480:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <HAL_UART_RxCpltCallback+0xc8>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	73fb      	strb	r3, [r7, #15]

        // 检测测消息结束符（换行符）hlpuart1
        if (receivedChar1 == '\n')
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b0a      	cmp	r3, #10
 800148a:	d10c      	bne.n	80014a6 <HAL_UART_RxCpltCallback+0x36>
        {
            Serial_RxBuffer1[RxIndex1] = '\0'; // 添加字符串终止符
 800148c:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <HAL_UART_RxCpltCallback+0xcc>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <HAL_UART_RxCpltCallback+0xd0>)
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]
            RxFlag1 = 1;
 8001498:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <HAL_UART_RxCpltCallback+0xd4>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
            RxIndex1 = 0;
 800149e:	4b27      	ldr	r3, [pc, #156]	@ (800153c <HAL_UART_RxCpltCallback+0xcc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	e010      	b.n	80014c8 <HAL_UART_RxCpltCallback+0x58>
        }
        else
        {
            Serial_RxBuffer1[RxIndex1++] = receivedChar1;
 80014a6:	4b25      	ldr	r3, [pc, #148]	@ (800153c <HAL_UART_RxCpltCallback+0xcc>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	b2d1      	uxtb	r1, r2
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <HAL_UART_RxCpltCallback+0xcc>)
 80014b0:	7011      	strb	r1, [r2, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	4a22      	ldr	r2, [pc, #136]	@ (8001540 <HAL_UART_RxCpltCallback+0xd0>)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	5453      	strb	r3, [r2, r1]
            if (RxIndex1 >= sizeof(Serial_RxBuffer1) - 1)
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <HAL_UART_RxCpltCallback+0xcc>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b7e      	cmp	r3, #126	@ 0x7e
 80014c0:	d902      	bls.n	80014c8 <HAL_UART_RxCpltCallback+0x58>
            {
                RxIndex1 = 0; // 防止缓冲区溢出
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <HAL_UART_RxCpltCallback+0xcc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
            }
        }
        // 重新启用接收中断
        HAL_UART_Receive_IT(&hlpuart1, &ByteRcv1, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	491b      	ldr	r1, [pc, #108]	@ (8001538 <HAL_UART_RxCpltCallback+0xc8>)
 80014cc:	4819      	ldr	r0, [pc, #100]	@ (8001534 <HAL_UART_RxCpltCallback+0xc4>)
 80014ce:	f00a f8a1 	bl	800b614 <HAL_UART_Receive_IT>
    }

    if (huart == &huart2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <HAL_UART_RxCpltCallback+0xd8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d128      	bne.n	800152c <HAL_UART_RxCpltCallback+0xbc>
       {
           uint8_t receivedChar2 = ByteRcv2;
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <HAL_UART_RxCpltCallback+0xdc>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	73bb      	strb	r3, [r7, #14]

           // 检测测消息结束符（换行符）
           if (receivedChar2 == '\n')
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	2b0a      	cmp	r3, #10
 80014e4:	d10c      	bne.n	8001500 <HAL_UART_RxCpltCallback+0x90>
           {
               Serial_RxBuffer2[RxIndex2] = '\0'; // 添加字符串终止符
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <HAL_UART_RxCpltCallback+0xe0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_UART_RxCpltCallback+0xe4>)
 80014ee:	2100      	movs	r1, #0
 80014f0:	5499      	strb	r1, [r3, r2]
               RxFlag2 = 1;
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <HAL_UART_RxCpltCallback+0xe8>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
               RxIndex2 = 0;
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_UART_RxCpltCallback+0xe0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	e010      	b.n	8001522 <HAL_UART_RxCpltCallback+0xb2>
           }
           else
           {
               Serial_RxBuffer2[RxIndex2++] = receivedChar2;
 8001500:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <HAL_UART_RxCpltCallback+0xe0>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	b2d1      	uxtb	r1, r2
 8001508:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <HAL_UART_RxCpltCallback+0xe0>)
 800150a:	7011      	strb	r1, [r2, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <HAL_UART_RxCpltCallback+0xe4>)
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	5453      	strb	r3, [r2, r1]
               if (RxIndex2 >= sizeof(Serial_RxBuffer2) - 1)
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <HAL_UART_RxCpltCallback+0xe0>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b7e      	cmp	r3, #126	@ 0x7e
 800151a:	d902      	bls.n	8001522 <HAL_UART_RxCpltCallback+0xb2>
               {
                   RxIndex2 = 0; // 防止缓冲区溢出
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <HAL_UART_RxCpltCallback+0xe0>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
               }
           }
           // 重新启用接收中断
           HAL_UART_Receive_IT(&huart2, &ByteRcv2, 1);
 8001522:	2201      	movs	r2, #1
 8001524:	4909      	ldr	r1, [pc, #36]	@ (800154c <HAL_UART_RxCpltCallback+0xdc>)
 8001526:	4808      	ldr	r0, [pc, #32]	@ (8001548 <HAL_UART_RxCpltCallback+0xd8>)
 8001528:	f00a f874 	bl	800b614 <HAL_UART_Receive_IT>
			}
			HAL_UART_Receive_IT(&huart4, &ByteRcv2, 1);
		}
*/

}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	240006cc 	.word	0x240006cc
 8001538:	240003e2 	.word	0x240003e2
 800153c:	240003e0 	.word	0x240003e0
 8001540:	24000360 	.word	0x24000360
 8001544:	240003e1 	.word	0x240003e1
 8001548:	24000888 	.word	0x24000888
 800154c:	24000466 	.word	0x24000466
 8001550:	24000464 	.word	0x24000464
 8001554:	240003e4 	.word	0x240003e4
 8001558:	24000465 	.word	0x24000465

0800155c <Angle2CCR>:

uint16_t Angle2CCR(uint16_t MaxAngle,uint16_t Angle)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	80fb      	strh	r3, [r7, #6]
 8001568:	4613      	mov	r3, r2
 800156a:	80bb      	strh	r3, [r7, #4]

   return Angle*1000/MaxAngle+250;
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001572:	fb03 f202 	mul.w	r2, r3, r2
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	fb92 f3f3 	sdiv	r3, r2, r3
 800157c:	b29b      	uxth	r3, r3
 800157e:	33fa      	adds	r3, #250	@ 0xfa
 8001580:	b29b      	uxth	r3, r3
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <ParseAndExecuteCommand>:

/*解析并执行串口命令*/
void ParseAndExecuteCommand(const char* buffer) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af02      	add	r7, sp, #8
 8001596:	6078      	str	r0, [r7, #4]
	if (strncmp(buffer,"detect",6) == 0)
 8001598:	2206      	movs	r2, #6
 800159a:	4916      	ldr	r1, [pc, #88]	@ (80015f4 <ParseAndExecuteCommand+0x64>)
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f00d fb20 	bl	800ebe2 <strncmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d120      	bne.n	80015ea <ParseAndExecuteCommand+0x5a>
	{
		if (sscanf(buffer + 6, " targetX: %f currentX: %f targetY: %f currentY: %f", &targetX,&currentX,&targetY,&currentY) == 4)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	1d98      	adds	r0, r3, #6
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <ParseAndExecuteCommand+0x68>)
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <ParseAndExecuteCommand+0x6c>)
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <ParseAndExecuteCommand+0x70>)
 80015b6:	4a13      	ldr	r2, [pc, #76]	@ (8001604 <ParseAndExecuteCommand+0x74>)
 80015b8:	4913      	ldr	r1, [pc, #76]	@ (8001608 <ParseAndExecuteCommand+0x78>)
 80015ba:	f00d fa99 	bl	800eaf0 <siscanf>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d112      	bne.n	80015ea <ParseAndExecuteCommand+0x5a>
		{
			CCRX_PID.Target = targetX;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <ParseAndExecuteCommand+0x74>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a10      	ldr	r2, [pc, #64]	@ (800160c <ParseAndExecuteCommand+0x7c>)
 80015ca:	6313      	str	r3, [r2, #48]	@ 0x30
			CCRX_PID.Current= currentX;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <ParseAndExecuteCommand+0x70>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0e      	ldr	r2, [pc, #56]	@ (800160c <ParseAndExecuteCommand+0x7c>)
 80015d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
			CCRY_PID.Target = targetY;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <ParseAndExecuteCommand+0x6c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <ParseAndExecuteCommand+0x80>)
 80015da:	6313      	str	r3, [r2, #48]	@ 0x30
			CCRY_PID.Current= currentY;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <ParseAndExecuteCommand+0x68>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <ParseAndExecuteCommand+0x80>)
 80015e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
			PIDflag = 1;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <ParseAndExecuteCommand+0x84>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08012a28 	.word	0x08012a28
 80015f8:	24000474 	.word	0x24000474
 80015fc:	24000470 	.word	0x24000470
 8001600:	2400046c 	.word	0x2400046c
 8001604:	24000468 	.word	0x24000468
 8001608:	08012a30 	.word	0x08012a30
 800160c:	24000270 	.word	0x24000270
 8001610:	240002b4 	.word	0x240002b4
 8001614:	24000467 	.word	0x24000467

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800161e:	f000 fa7b 	bl	8001b18 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001622:	4b31      	ldr	r3, [pc, #196]	@ (80016e8 <main+0xd0>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11b      	bne.n	8001666 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800162e:	f3bf 8f4f 	dsb	sy
}
 8001632:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001634:	f3bf 8f6f 	isb	sy
}
 8001638:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800163a:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <main+0xd0>)
 800163c:	2200      	movs	r2, #0
 800163e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001642:	f3bf 8f4f 	dsb	sy
}
 8001646:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001648:	f3bf 8f6f 	isb	sy
}
 800164c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800164e:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <main+0xd0>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a25      	ldr	r2, [pc, #148]	@ (80016e8 <main+0xd0>)
 8001654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001658:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800165a:	f3bf 8f4f 	dsb	sy
}
 800165e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001660:	f3bf 8f6f 	isb	sy
}
 8001664:	e000      	b.n	8001668 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001666:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <main+0xd0>)
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d13b      	bne.n	80016ec <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001674:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <main+0xd0>)
 8001676:	2200      	movs	r2, #0
 8001678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800167c:	f3bf 8f4f 	dsb	sy
}
 8001680:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <main+0xd0>)
 8001684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001688:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	0b5b      	lsrs	r3, r3, #13
 800168e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001692:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	08db      	lsrs	r3, r3, #3
 8001698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800169c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80016a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016ac:	490e      	ldr	r1, [pc, #56]	@ (80016e8 <main+0xd0>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1e5a      	subs	r2, r3, #1
 80016b8:	60ba      	str	r2, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ef      	bne.n	800169e <main+0x86>
    } while(sets-- != 0U);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1e5a      	subs	r2, r3, #1
 80016c2:	60fa      	str	r2, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e5      	bne.n	8001694 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80016c8:	f3bf 8f4f 	dsb	sy
}
 80016cc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <main+0xd0>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <main+0xd0>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016da:	f3bf 8f4f 	dsb	sy
}
 80016de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016e0:	f3bf 8f6f 	isb	sy
}
 80016e4:	e003      	b.n	80016ee <main+0xd6>
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80016ec:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80016ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016f2:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80016f4:	bf00      	nop
 80016f6:	4baf      	ldr	r3, [pc, #700]	@ (80019b4 <main+0x39c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <main+0xf4>
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	617a      	str	r2, [r7, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	dcf4      	bgt.n	80016f6 <main+0xde>
  if ( timeout < 0 )
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	da01      	bge.n	8001716 <main+0xfe>
  {
  Error_Handler();
 8001712:	f000 fa2d 	bl	8001b70 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001716:	f001 fc07 	bl	8002f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171a:	f000 f981 	bl	8001a20 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800171e:	4ba5      	ldr	r3, [pc, #660]	@ (80019b4 <main+0x39c>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001724:	4aa3      	ldr	r2, [pc, #652]	@ (80019b4 <main+0x39c>)
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800172a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800172e:	4ba1      	ldr	r3, [pc, #644]	@ (80019b4 <main+0x39c>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800173c:	2000      	movs	r0, #0
 800173e:	f003 ff85 	bl	800564c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001742:	2100      	movs	r1, #0
 8001744:	2000      	movs	r0, #0
 8001746:	f003 ff9b 	bl	8005680 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800174a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800174e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001750:	bf00      	nop
 8001752:	4b98      	ldr	r3, [pc, #608]	@ (80019b4 <main+0x39c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d104      	bne.n	8001768 <main+0x150>
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	617a      	str	r2, [r7, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	dcf4      	bgt.n	8001752 <main+0x13a>
if ( timeout < 0 )
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	da01      	bge.n	8001772 <main+0x15a>
{
Error_Handler();
 800176e:	f000 f9ff 	bl	8001b70 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001772:	f7ff fd97 	bl	80012a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001776:	f000 fcdf 	bl	8002138 <MX_TIM2_Init>
  MX_TIM1_Init();
 800177a:	f000 fc29 	bl	8001fd0 <MX_TIM1_Init>
  MX_TIM4_Init();
 800177e:	f000 fdef 	bl	8002360 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001782:	f7ff fc9b 	bl	80010bc <MX_ADC1_Init>
  MX_TIM8_Init();
 8001786:	f000 febf 	bl	8002508 <MX_TIM8_Init>
  MX_TIM5_Init();
 800178a:	f000 fe6b 	bl	8002464 <MX_TIM5_Init>
  MX_LPUART1_UART_Init();
 800178e:	f001 f905 	bl	800299c <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8001792:	f001 f9e7 	bl	8002b64 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001796:	f000 f9f1 	bl	8001b7c <MX_SPI2_Init>
  MX_UART4_Init();
 800179a:	f001 f94b 	bl	8002a34 <MX_UART4_Init>
  MX_UART8_Init();
 800179e:	f001 f995 	bl	8002acc <MX_UART8_Init>
  MX_TIM3_Init();
 80017a2:	f000 fd5b 	bl	800225c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80017a6:	2100      	movs	r1, #0
 80017a8:	4883      	ldr	r0, [pc, #524]	@ (80019b8 <main+0x3a0>)
 80017aa:	f008 fbf1 	bl	8009f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80017ae:	210c      	movs	r1, #12
 80017b0:	4881      	ldr	r0, [pc, #516]	@ (80019b8 <main+0x3a0>)
 80017b2:	f008 fbed 	bl	8009f90 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Angle2CCR(180,startAngleY));
 80017b6:	4b81      	ldr	r3, [pc, #516]	@ (80019bc <main+0x3a4>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	20b4      	movs	r0, #180	@ 0xb4
 80017be:	f7ff fecd 	bl	800155c <Angle2CCR>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b7c      	ldr	r3, [pc, #496]	@ (80019b8 <main+0x3a0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,Angle2CCR(270,startAngleX));
 80017cc:	4b7c      	ldr	r3, [pc, #496]	@ (80019c0 <main+0x3a8>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80017d6:	f7ff fec1 	bl	800155c <Angle2CCR>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <main+0x3a0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	641a      	str	r2, [r3, #64]	@ 0x40
  currentCCRX = Angle2CCR(270,startAngleX);
 80017e4:	4b76      	ldr	r3, [pc, #472]	@ (80019c0 <main+0x3a8>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80017ee:	f7ff feb5 	bl	800155c <Angle2CCR>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	4b73      	ldr	r3, [pc, #460]	@ (80019c4 <main+0x3ac>)
 80017f8:	801a      	strh	r2, [r3, #0]
  currentCCRY = Angle2CCR(180,startAngleY);
 80017fa:	4b70      	ldr	r3, [pc, #448]	@ (80019bc <main+0x3a4>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	20b4      	movs	r0, #180	@ 0xb4
 8001802:	f7ff feab 	bl	800155c <Angle2CCR>
 8001806:	4603      	mov	r3, r0
 8001808:	b21a      	sxth	r2, r3
 800180a:	4b6f      	ldr	r3, [pc, #444]	@ (80019c8 <main+0x3b0>)
 800180c:	801a      	strh	r2, [r3, #0]

  HAL_UART_Receive_IT(&hlpuart1, &ByteRcv1, 1);
 800180e:	2201      	movs	r2, #1
 8001810:	496e      	ldr	r1, [pc, #440]	@ (80019cc <main+0x3b4>)
 8001812:	486f      	ldr	r0, [pc, #444]	@ (80019d0 <main+0x3b8>)
 8001814:	f009 fefe 	bl	800b614 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &ByteRcv2, 1);
 8001818:	2201      	movs	r2, #1
 800181a:	496e      	ldr	r1, [pc, #440]	@ (80019d4 <main+0x3bc>)
 800181c:	486e      	ldr	r0, [pc, #440]	@ (80019d8 <main+0x3c0>)
 800181e:	f009 fef9 	bl	800b614 <HAL_UART_Receive_IT>


  CCRX_PID_Init(0.035,0.0008,0.1,0,0,0,0.2,0,0,15,0,0,0,0,55,-55,0);
 8001822:	2300      	movs	r3, #0
 8001824:	f06f 0236 	mvn.w	r2, #54	@ 0x36
 8001828:	2137      	movs	r1, #55	@ 0x37
 800182a:	2000      	movs	r0, #0
 800182c:	ed9f 6a6b 	vldr	s12, [pc, #428]	@ 80019dc <main+0x3c4>
 8001830:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80019dc <main+0x3c4>
 8001834:	ed9f 5a69 	vldr	s10, [pc, #420]	@ 80019dc <main+0x3c4>
 8001838:	eef2 4a0e 	vmov.f32	s9, #46	@ 0x41700000  15.0
 800183c:	ed9f 4a67 	vldr	s8, [pc, #412]	@ 80019dc <main+0x3c4>
 8001840:	eddf 3a66 	vldr	s7, [pc, #408]	@ 80019dc <main+0x3c4>
 8001844:	ed9f 3a66 	vldr	s6, [pc, #408]	@ 80019e0 <main+0x3c8>
 8001848:	eddf 2a64 	vldr	s5, [pc, #400]	@ 80019dc <main+0x3c4>
 800184c:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 80019dc <main+0x3c4>
 8001850:	eddf 1a62 	vldr	s3, [pc, #392]	@ 80019dc <main+0x3c4>
 8001854:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 80019e4 <main+0x3cc>
 8001858:	eddf 0a63 	vldr	s1, [pc, #396]	@ 80019e8 <main+0x3d0>
 800185c:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 80019ec <main+0x3d4>
 8001860:	f7ff fac8 	bl	8000df4 <CCRX_PID_Init>
  CCRY_PID_Init(0.035,0.0008,0.1,0,0,0,0.2,0,0,15,0,0,0,0,55,-55,0);
 8001864:	2300      	movs	r3, #0
 8001866:	f06f 0236 	mvn.w	r2, #54	@ 0x36
 800186a:	2137      	movs	r1, #55	@ 0x37
 800186c:	2000      	movs	r0, #0
 800186e:	ed9f 6a5b 	vldr	s12, [pc, #364]	@ 80019dc <main+0x3c4>
 8001872:	eddf 5a5a 	vldr	s11, [pc, #360]	@ 80019dc <main+0x3c4>
 8001876:	ed9f 5a59 	vldr	s10, [pc, #356]	@ 80019dc <main+0x3c4>
 800187a:	eef2 4a0e 	vmov.f32	s9, #46	@ 0x41700000  15.0
 800187e:	ed9f 4a57 	vldr	s8, [pc, #348]	@ 80019dc <main+0x3c4>
 8001882:	eddf 3a56 	vldr	s7, [pc, #344]	@ 80019dc <main+0x3c4>
 8001886:	ed9f 3a56 	vldr	s6, [pc, #344]	@ 80019e0 <main+0x3c8>
 800188a:	eddf 2a54 	vldr	s5, [pc, #336]	@ 80019dc <main+0x3c4>
 800188e:	ed9f 2a53 	vldr	s4, [pc, #332]	@ 80019dc <main+0x3c4>
 8001892:	eddf 1a52 	vldr	s3, [pc, #328]	@ 80019dc <main+0x3c4>
 8001896:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 80019e4 <main+0x3cc>
 800189a:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80019e8 <main+0x3d0>
 800189e:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 80019ec <main+0x3d4>
 80018a2:	f7ff fb03 	bl	8000eac <CCRY_PID_Init>
  HAL_UART_Transmit(&huart2,(uint8_t*)"Successfully initialized", 24, HAL_MAX_DELAY);
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	2218      	movs	r2, #24
 80018ac:	4950      	ldr	r1, [pc, #320]	@ (80019f0 <main+0x3d8>)
 80018ae:	484a      	ldr	r0, [pc, #296]	@ (80019d8 <main+0x3c0>)
 80018b0:	f009 fe22 	bl	800b4f8 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (RxFlag1)
 80018b4:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <main+0x3dc>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <main+0x2b0>
	{
		ParseAndExecuteCommand((char*)Serial_RxBuffer1);
 80018bc:	484e      	ldr	r0, [pc, #312]	@ (80019f8 <main+0x3e0>)
 80018be:	f7ff fe67 	bl	8001590 <ParseAndExecuteCommand>
		//HAL_UART_Transmit(&huart1,(uint8_t*)Serial_RxBuffer1, strlen(Serial_RxBuffer1), HAL_MAX_DELAY);
		RxFlag1 = 0; // 处理完成
 80018c2:	4b4c      	ldr	r3, [pc, #304]	@ (80019f4 <main+0x3dc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
	}

	if(RxFlag2)
 80018c8:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <main+0x3e4>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <main+0x2c4>
	{
		//HAL_UART_Transmit(&huart2,(uint8_t*)Serial_RxBuffer2, strlen(Serial_RxBuffer2), HAL_MAX_DELAY);
		ParseAndExecuteCommand((char*)Serial_RxBuffer2);
 80018d0:	484b      	ldr	r0, [pc, #300]	@ (8001a00 <main+0x3e8>)
 80018d2:	f7ff fe5d 	bl	8001590 <ParseAndExecuteCommand>
	    RxFlag2 = 0;
 80018d6:	4b49      	ldr	r3, [pc, #292]	@ (80019fc <main+0x3e4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
	}

	if (PIDflag)
 80018dc:	4b49      	ldr	r3, [pc, #292]	@ (8001a04 <main+0x3ec>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0e7      	beq.n	80018b4 <main+0x29c>
	{
		CCRX_PID_Update();
 80018e4:	f7ff fb3e 	bl	8000f64 <CCRX_PID_Update>
		CCRX_PID_Update();
 80018e8:	f7ff fb3c 	bl	8000f64 <CCRX_PID_Update>
		currentCCRX = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_4);
 80018ec:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <main+0x3a0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	4b33      	ldr	r3, [pc, #204]	@ (80019c4 <main+0x3ac>)
 80018f6:	801a      	strh	r2, [r3, #0]
		currentCCRY = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_1);
 80018f8:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <main+0x3a0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fe:	b21a      	sxth	r2, r3
 8001900:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <main+0x3b0>)
 8001902:	801a      	strh	r2, [r3, #0]
		currentCCRX += CCRX_PID.DeltaCCR;
 8001904:	4b40      	ldr	r3, [pc, #256]	@ (8001a08 <main+0x3f0>)
 8001906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001908:	b29a      	uxth	r2, r3
 800190a:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <main+0x3ac>)
 800190c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	b21a      	sxth	r2, r3
 8001918:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <main+0x3ac>)
 800191a:	801a      	strh	r2, [r3, #0]
		currentCCRY += CCRY_PID.DeltaCCR;
 800191c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a0c <main+0x3f4>)
 800191e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <main+0x3b0>)
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	b29b      	uxth	r3, r3
 800192a:	4413      	add	r3, r2
 800192c:	b29b      	uxth	r3, r3
 800192e:	b21a      	sxth	r2, r3
 8001930:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <main+0x3b0>)
 8001932:	801a      	strh	r2, [r3, #0]
		currentCCRX = (currentCCRX < maxCCRX)? currentCCRX : maxCCRX;
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <main+0x3ac>)
 8001936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193a:	461a      	mov	r2, r3
 800193c:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <main+0x3f8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4293      	cmp	r3, r2
 8001942:	bfa8      	it	ge
 8001944:	4613      	movge	r3, r2
 8001946:	b21a      	sxth	r2, r3
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <main+0x3ac>)
 800194a:	801a      	strh	r2, [r3, #0]
		currentCCRX = (currentCCRX > minCCRX)? currentCCRX : minCCRX;
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <main+0x3ac>)
 800194e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001952:	461a      	mov	r2, r3
 8001954:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <main+0x3fc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4293      	cmp	r3, r2
 800195a:	bfb8      	it	lt
 800195c:	4613      	movlt	r3, r2
 800195e:	b21a      	sxth	r2, r3
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <main+0x3ac>)
 8001962:	801a      	strh	r2, [r3, #0]
		currentCCRY = (currentCCRY < maxCCRY)? currentCCRY : maxCCRY;
 8001964:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <main+0x3b0>)
 8001966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196a:	461a      	mov	r2, r3
 800196c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a18 <main+0x400>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4293      	cmp	r3, r2
 8001972:	bfa8      	it	ge
 8001974:	4613      	movge	r3, r2
 8001976:	b21a      	sxth	r2, r3
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <main+0x3b0>)
 800197a:	801a      	strh	r2, [r3, #0]
		currentCCRY = (currentCCRY > minCCRY)? currentCCRY : minCCRY;
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <main+0x3b0>)
 800197e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001982:	461a      	mov	r2, r3
 8001984:	4b25      	ldr	r3, [pc, #148]	@ (8001a1c <main+0x404>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4293      	cmp	r3, r2
 800198a:	bfb8      	it	lt
 800198c:	4613      	movlt	r3, r2
 800198e:	b21a      	sxth	r2, r3
 8001990:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <main+0x3b0>)
 8001992:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, currentCCRX);
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <main+0x3ac>)
 8001996:	f9b3 2000 	ldrsh.w	r2, [r3]
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <main+0x3a0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, currentCCRY);
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <main+0x3b0>)
 80019a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019a6:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <main+0x3a0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34
		PIDflag = 0;
 80019ac:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <main+0x3ec>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
	if (RxFlag1)
 80019b2:	e77f      	b.n	80018b4 <main+0x29c>
 80019b4:	58024400 	.word	0x58024400
 80019b8:	240005e8 	.word	0x240005e8
 80019bc:	2400000a 	.word	0x2400000a
 80019c0:	24000008 	.word	0x24000008
 80019c4:	2400035c 	.word	0x2400035c
 80019c8:	2400035e 	.word	0x2400035e
 80019cc:	240003e2 	.word	0x240003e2
 80019d0:	240006cc 	.word	0x240006cc
 80019d4:	24000466 	.word	0x24000466
 80019d8:	24000888 	.word	0x24000888
 80019dc:	00000000 	.word	0x00000000
 80019e0:	3e4ccccd 	.word	0x3e4ccccd
 80019e4:	3dcccccd 	.word	0x3dcccccd
 80019e8:	3a51b717 	.word	0x3a51b717
 80019ec:	3d0f5c29 	.word	0x3d0f5c29
 80019f0:	08012a64 	.word	0x08012a64
 80019f4:	240003e1 	.word	0x240003e1
 80019f8:	24000360 	.word	0x24000360
 80019fc:	24000465 	.word	0x24000465
 8001a00:	240003e4 	.word	0x240003e4
 8001a04:	24000467 	.word	0x24000467
 8001a08:	24000270 	.word	0x24000270
 8001a0c:	240002b4 	.word	0x240002b4
 8001a10:	2400000c 	.word	0x2400000c
 8001a14:	24000010 	.word	0x24000010
 8001a18:	24000014 	.word	0x24000014
 8001a1c:	24000018 	.word	0x24000018

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b09c      	sub	sp, #112	@ 0x70
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2a:	224c      	movs	r2, #76	@ 0x4c
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f00d f8cf 	bl	800ebd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2220      	movs	r2, #32
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00d f8c9 	bl	800ebd2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001a40:	2004      	movs	r0, #4
 8001a42:	f003 fe31 	bl	80056a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <SystemClock_Config+0xf0>)
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	4a30      	ldr	r2, [pc, #192]	@ (8001b10 <SystemClock_Config+0xf0>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001a56:	4b2e      	ldr	r3, [pc, #184]	@ (8001b10 <SystemClock_Config+0xf0>)
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	4b2c      	ldr	r3, [pc, #176]	@ (8001b14 <SystemClock_Config+0xf4>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a2b      	ldr	r2, [pc, #172]	@ (8001b14 <SystemClock_Config+0xf4>)
 8001a66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <SystemClock_Config+0xf4>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a78:	bf00      	nop
 8001a7a:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <SystemClock_Config+0xf4>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a86:	d1f8      	bne.n	8001a7a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a90:	2340      	movs	r3, #64	@ 0x40
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a94:	2302      	movs	r3, #2
 8001a96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001aa0:	2309      	movs	r3, #9
 8001aa2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001ab0:	230c      	movs	r3, #12
 8001ab2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8001ab8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fe4a 	bl	800575c <HAL_RCC_OscConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001ace:	f000 f84f 	bl	8001b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad2:	233f      	movs	r3, #63	@ 0x3f
 8001ad4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f004 fa8a 	bl	8006010 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001b02:	f000 f835 	bl	8001b70 <Error_Handler>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3770      	adds	r7, #112	@ 0x70
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	58000400 	.word	0x58000400
 8001b14:	58024800 	.word	0x58024800

08001b18 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b2a:	f002 fdcf 	bl	80046cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b3a:	231f      	movs	r3, #31
 8001b3c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001b3e:	2387      	movs	r3, #135	@ 0x87
 8001b40:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b46:	2300      	movs	r3, #0
 8001b48:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 fded 	bl	800473c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b62:	2004      	movs	r0, #4
 8001b64:	f002 fdca 	bl	80046fc <HAL_MPU_Enable>

}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <Error_Handler+0x8>

08001b7c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001b82:	4a2f      	ldr	r2, [pc, #188]	@ (8001c40 <MX_SPI2_Init+0xc4>)
 8001b84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001b88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001b8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b94:	4b29      	ldr	r3, [pc, #164]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001b96:	2207      	movs	r2, #7
 8001b98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9a:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba0:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ba6:	4b25      	ldr	r3, [pc, #148]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001ba8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bae:	4b23      	ldr	r3, [pc, #140]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bb0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bb4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x107;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bcc:	f240 1207 	movw	r2, #263	@ 0x107
 8001bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bde:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001be0:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c16:	4809      	ldr	r0, [pc, #36]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001c18:	f007 fa84 	bl	8009124 <HAL_SPI_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8001c22:	f7ff ffa5 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE( &hspi2);
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <MX_SPI2_Init+0xc0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	24000478 	.word	0x24000478
 8001c40:	40003800 	.word	0x40003800

08001c44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ba      	sub	sp, #232	@ 0xe8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	22c0      	movs	r2, #192	@ 0xc0
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00c ffb4 	bl	800ebd2 <memset>
  if(spiHandle->Instance==SPI2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <HAL_SPI_MspInit+0xc4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d145      	bne.n	8001d00 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f004 fd4d 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001c94:	f7ff ff6c 	bl	8001b70 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c98:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <HAL_SPI_MspInit+0xc8>)
 8001c9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <HAL_SPI_MspInit+0xc8>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ca8:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_SPI_MspInit+0xc8>)
 8001caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_SPI_MspInit+0xc8>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbc:	4a13      	ldr	r2, [pc, #76]	@ (8001d0c <HAL_SPI_MspInit+0xc8>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_SPI_MspInit+0xc8>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cd4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cee:	2305      	movs	r3, #5
 8001cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <HAL_SPI_MspInit+0xcc>)
 8001cfc:	f003 fac2 	bl	8005284 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d00:	bf00      	nop
 8001d02:	37e8      	adds	r7, #232	@ 0xe8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40003800 	.word	0x40003800
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	58020400 	.word	0x58020400

08001d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_MspInit+0x30>)
 8001d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d20:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_MspInit+0x30>)
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_MspInit+0x30>)
 8001d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	58024400 	.word	0x58024400

08001d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <NMI_Handler+0x4>

08001d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <MemManage_Handler+0x4>

08001d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <BusFault_Handler+0x4>

08001d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <UsageFault_Handler+0x4>

08001d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9e:	f001 f935 	bl	800300c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_IRQ_Pin);
 8001daa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001dae:	f003 fc32 	bl	8005616 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <TIM2_IRQHandler+0x10>)
 8001dbe:	f008 fa9b 	bl	800a2f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	24000550 	.word	0x24000550

08001dcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <TIM3_IRQHandler+0x10>)
 8001dd2:	f008 fa91 	bl	800a2f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2400059c 	.word	0x2400059c

08001de0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <TIM4_IRQHandler+0x10>)
 8001de6:	f008 fa87 	bl	800a2f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	240005e8 	.word	0x240005e8

08001df4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <USART2_IRQHandler+0x10>)
 8001dfa:	f009 fc57 	bl	800b6ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	24000888 	.word	0x24000888

08001e08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <TIM5_IRQHandler+0x10>)
 8001e0e:	f008 fa73 	bl	800a2f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	24000634 	.word	0x24000634

08001e1c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <UART4_IRQHandler+0x10>)
 8001e22:	f009 fc43 	bl	800b6ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	24000760 	.word	0x24000760

08001e30 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <LPUART1_IRQHandler+0x10>)
 8001e36:	f009 fc39 	bl	800b6ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	240006cc 	.word	0x240006cc

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_kill>:

int _kill(int pid, int sig)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e5e:	f00c ff1d 	bl	800ec9c <__errno>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2216      	movs	r2, #22
 8001e66:	601a      	str	r2, [r3, #0]
  return -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_exit>:

void _exit (int status)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe7 	bl	8001e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <_exit+0x12>

08001e8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e00a      	b.n	8001eb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	4601      	mov	r1, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbf0      	blt.n	8001e9c <_read+0x12>
  }

  return len;
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e009      	b.n	8001eea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	60ba      	str	r2, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	dbf1      	blt.n	8001ed6 <_write+0x12>
  }
  return len;
 8001ef2:	687b      	ldr	r3, [r7, #4]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_close>:

int _close(int file)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f24:	605a      	str	r2, [r3, #4]
  return 0;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_isatty>:

int _isatty(int file)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f00c fe82 	bl	800ec9c <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	@ (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	24080000 	.word	0x24080000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	24000500 	.word	0x24000500
 8001fcc:	24000a70 	.word	0x24000a70

08001fd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b09e      	sub	sp, #120	@ 0x78
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fd6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fda:	2224      	movs	r2, #36	@ 0x24
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00c fdf7 	bl	800ebd2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ff0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
 8002000:	615a      	str	r2, [r3, #20]
 8002002:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002004:	463b      	mov	r3, r7
 8002006:	222c      	movs	r2, #44	@ 0x2c
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f00c fde1 	bl	800ebd2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002010:	4b47      	ldr	r3, [pc, #284]	@ (8002130 <MX_TIM1_Init+0x160>)
 8002012:	4a48      	ldr	r2, [pc, #288]	@ (8002134 <MX_TIM1_Init+0x164>)
 8002014:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002016:	4b46      	ldr	r3, [pc, #280]	@ (8002130 <MX_TIM1_Init+0x160>)
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	4b44      	ldr	r3, [pc, #272]	@ (8002130 <MX_TIM1_Init+0x160>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002022:	4b43      	ldr	r3, [pc, #268]	@ (8002130 <MX_TIM1_Init+0x160>)
 8002024:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002028:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b41      	ldr	r3, [pc, #260]	@ (8002130 <MX_TIM1_Init+0x160>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002030:	4b3f      	ldr	r3, [pc, #252]	@ (8002130 <MX_TIM1_Init+0x160>)
 8002032:	2200      	movs	r2, #0
 8002034:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002036:	4b3e      	ldr	r3, [pc, #248]	@ (8002130 <MX_TIM1_Init+0x160>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800203c:	483c      	ldr	r0, [pc, #240]	@ (8002130 <MX_TIM1_Init+0x160>)
 800203e:	f007 ff4f 	bl	8009ee0 <HAL_TIM_PWM_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002048:	f7ff fd92 	bl	8001b70 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800204c:	2303      	movs	r3, #3
 800204e:	657b      	str	r3, [r7, #84]	@ 0x54
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002050:	2300      	movs	r3, #0
 8002052:	65bb      	str	r3, [r7, #88]	@ 0x58
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002054:	2301      	movs	r3, #1
 8002056:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	663b      	str	r3, [r7, #96]	@ 0x60
  sConfig.IC1Filter = 15;
 800205c:	230f      	movs	r3, #15
 800205e:	667b      	str	r3, [r7, #100]	@ 0x64
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002060:	2300      	movs	r3, #0
 8002062:	66bb      	str	r3, [r7, #104]	@ 0x68
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002064:	2301      	movs	r3, #1
 8002066:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002068:	2300      	movs	r3, #0
 800206a:	673b      	str	r3, [r7, #112]	@ 0x70
  sConfig.IC2Filter = 15;
 800206c:	230f      	movs	r3, #15
 800206e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002070:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002074:	4619      	mov	r1, r3
 8002076:	482e      	ldr	r0, [pc, #184]	@ (8002130 <MX_TIM1_Init+0x160>)
 8002078:	f008 f898 	bl	800a1ac <HAL_TIM_Encoder_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002082:	f7ff fd75 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002092:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002096:	4619      	mov	r1, r3
 8002098:	4825      	ldr	r0, [pc, #148]	@ (8002130 <MX_TIM1_Init+0x160>)
 800209a:	f009 f8b3 	bl	800b204 <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80020a4:	f7ff fd64 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a8:	2360      	movs	r3, #96	@ 0x60
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b0:	2300      	movs	r3, #0
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020b4:	2300      	movs	r3, #0
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c8:	2208      	movs	r2, #8
 80020ca:	4619      	mov	r1, r3
 80020cc:	4818      	ldr	r0, [pc, #96]	@ (8002130 <MX_TIM1_Init+0x160>)
 80020ce:	f008 fa1b 	bl	800a508 <HAL_TIM_PWM_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80020d8:	f7ff fd4a 	bl	8001b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002102:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800210c:	463b      	mov	r3, r7
 800210e:	4619      	mov	r1, r3
 8002110:	4807      	ldr	r0, [pc, #28]	@ (8002130 <MX_TIM1_Init+0x160>)
 8002112:	f009 f905 	bl	800b320 <HAL_TIMEx_ConfigBreakDeadTime>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800211c:	f7ff fd28 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002120:	4803      	ldr	r0, [pc, #12]	@ (8002130 <MX_TIM1_Init+0x160>)
 8002122:	f000 fb85 	bl	8002830 <HAL_TIM_MspPostInit>

}
 8002126:	bf00      	nop
 8002128:	3778      	adds	r7, #120	@ 0x78
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	24000504 	.word	0x24000504
 8002134:	40010000 	.word	0x40010000

08002138 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08e      	sub	sp, #56	@ 0x38
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002158:	463b      	mov	r3, r7
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
 8002166:	615a      	str	r2, [r3, #20]
 8002168:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800216a:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <MX_TIM2_Init+0x120>)
 800216c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002170:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8002172:	4b39      	ldr	r3, [pc, #228]	@ (8002258 <MX_TIM2_Init+0x120>)
 8002174:	223f      	movs	r2, #63	@ 0x3f
 8002176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b37      	ldr	r3, [pc, #220]	@ (8002258 <MX_TIM2_Init+0x120>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800217e:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <MX_TIM2_Init+0x120>)
 8002180:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002184:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002186:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <MX_TIM2_Init+0x120>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800218c:	4b32      	ldr	r3, [pc, #200]	@ (8002258 <MX_TIM2_Init+0x120>)
 800218e:	2280      	movs	r2, #128	@ 0x80
 8002190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002192:	4831      	ldr	r0, [pc, #196]	@ (8002258 <MX_TIM2_Init+0x120>)
 8002194:	f007 fdd5 	bl	8009d42 <HAL_TIM_Base_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800219e:	f7ff fce7 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ac:	4619      	mov	r1, r3
 80021ae:	482a      	ldr	r0, [pc, #168]	@ (8002258 <MX_TIM2_Init+0x120>)
 80021b0:	f008 fabe 	bl	800a730 <HAL_TIM_ConfigClockSource>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80021ba:	f7ff fcd9 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021be:	4826      	ldr	r0, [pc, #152]	@ (8002258 <MX_TIM2_Init+0x120>)
 80021c0:	f007 fe8e 	bl	8009ee0 <HAL_TIM_PWM_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80021ca:	f7ff fcd1 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	481e      	ldr	r0, [pc, #120]	@ (8002258 <MX_TIM2_Init+0x120>)
 80021de:	f009 f811 	bl	800b204 <HAL_TIMEx_MasterConfigSynchronization>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021e8:	f7ff fcc2 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ec:	2360      	movs	r3, #96	@ 0x60
 80021ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 750;
 80021f0:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80021f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021fe:	463b      	mov	r3, r7
 8002200:	2200      	movs	r2, #0
 8002202:	4619      	mov	r1, r3
 8002204:	4814      	ldr	r0, [pc, #80]	@ (8002258 <MX_TIM2_Init+0x120>)
 8002206:	f008 f97f 	bl	800a508 <HAL_TIM_PWM_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002210:	f7ff fcae 	bl	8001b70 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8002214:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <MX_TIM2_Init+0x120>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <MX_TIM2_Init+0x120>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0208 	bic.w	r2, r2, #8
 8002222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	2208      	movs	r2, #8
 8002228:	4619      	mov	r1, r3
 800222a:	480b      	ldr	r0, [pc, #44]	@ (8002258 <MX_TIM2_Init+0x120>)
 800222c:	f008 f96c 	bl	800a508 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8002236:	f7ff fc9b 	bl	8001b70 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 800223a:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <MX_TIM2_Init+0x120>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <MX_TIM2_Init+0x120>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0208 	bic.w	r2, r2, #8
 8002248:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800224a:	4803      	ldr	r0, [pc, #12]	@ (8002258 <MX_TIM2_Init+0x120>)
 800224c:	f000 faf0 	bl	8002830 <HAL_TIM_MspPostInit>

}
 8002250:	bf00      	nop
 8002252:	3738      	adds	r7, #56	@ 0x38
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	24000550 	.word	0x24000550

0800225c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08e      	sub	sp, #56	@ 0x38
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	611a      	str	r2, [r3, #16]
 800228a:	615a      	str	r2, [r3, #20]
 800228c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800228e:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <MX_TIM3_Init+0xfc>)
 8002290:	4a32      	ldr	r2, [pc, #200]	@ (800235c <MX_TIM3_Init+0x100>)
 8002292:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002294:	4b30      	ldr	r3, [pc, #192]	@ (8002358 <MX_TIM3_Init+0xfc>)
 8002296:	2200      	movs	r2, #0
 8002298:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b2f      	ldr	r3, [pc, #188]	@ (8002358 <MX_TIM3_Init+0xfc>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <MX_TIM3_Init+0xfc>)
 80022a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002358 <MX_TIM3_Init+0xfc>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <MX_TIM3_Init+0xfc>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022b4:	4828      	ldr	r0, [pc, #160]	@ (8002358 <MX_TIM3_Init+0xfc>)
 80022b6:	f007 fd44 	bl	8009d42 <HAL_TIM_Base_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80022c0:	f7ff fc56 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ce:	4619      	mov	r1, r3
 80022d0:	4821      	ldr	r0, [pc, #132]	@ (8002358 <MX_TIM3_Init+0xfc>)
 80022d2:	f008 fa2d 	bl	800a730 <HAL_TIM_ConfigClockSource>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80022dc:	f7ff fc48 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022e0:	481d      	ldr	r0, [pc, #116]	@ (8002358 <MX_TIM3_Init+0xfc>)
 80022e2:	f007 fdfd 	bl	8009ee0 <HAL_TIM_PWM_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80022ec:	f7ff fc40 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	4619      	mov	r1, r3
 80022fe:	4816      	ldr	r0, [pc, #88]	@ (8002358 <MX_TIM3_Init+0xfc>)
 8002300:	f008 ff80 	bl	800b204 <HAL_TIMEx_MasterConfigSynchronization>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800230a:	f7ff fc31 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230e:	2360      	movs	r3, #96	@ 0x60
 8002310:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800231e:	463b      	mov	r3, r7
 8002320:	2200      	movs	r2, #0
 8002322:	4619      	mov	r1, r3
 8002324:	480c      	ldr	r0, [pc, #48]	@ (8002358 <MX_TIM3_Init+0xfc>)
 8002326:	f008 f8ef 	bl	800a508 <HAL_TIM_PWM_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002330:	f7ff fc1e 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002334:	463b      	mov	r3, r7
 8002336:	2204      	movs	r2, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4807      	ldr	r0, [pc, #28]	@ (8002358 <MX_TIM3_Init+0xfc>)
 800233c:	f008 f8e4 	bl	800a508 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002346:	f7ff fc13 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800234a:	4803      	ldr	r0, [pc, #12]	@ (8002358 <MX_TIM3_Init+0xfc>)
 800234c:	f000 fa70 	bl	8002830 <HAL_TIM_MspPostInit>

}
 8002350:	bf00      	nop
 8002352:	3738      	adds	r7, #56	@ 0x38
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	2400059c 	.word	0x2400059c
 800235c:	40000400 	.word	0x40000400

08002360 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	@ 0x38
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002366:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002380:	463b      	mov	r3, r7
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	615a      	str	r2, [r3, #20]
 8002390:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002392:	4b32      	ldr	r3, [pc, #200]	@ (800245c <MX_TIM4_Init+0xfc>)
 8002394:	4a32      	ldr	r2, [pc, #200]	@ (8002460 <MX_TIM4_Init+0x100>)
 8002396:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 128-1;
 8002398:	4b30      	ldr	r3, [pc, #192]	@ (800245c <MX_TIM4_Init+0xfc>)
 800239a:	227f      	movs	r2, #127	@ 0x7f
 800239c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <MX_TIM4_Init+0xfc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80023a4:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <MX_TIM4_Init+0xfc>)
 80023a6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80023aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ac:	4b2b      	ldr	r3, [pc, #172]	@ (800245c <MX_TIM4_Init+0xfc>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <MX_TIM4_Init+0xfc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023b8:	4828      	ldr	r0, [pc, #160]	@ (800245c <MX_TIM4_Init+0xfc>)
 80023ba:	f007 fcc2 	bl	8009d42 <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80023c4:	f7ff fbd4 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023d2:	4619      	mov	r1, r3
 80023d4:	4821      	ldr	r0, [pc, #132]	@ (800245c <MX_TIM4_Init+0xfc>)
 80023d6:	f008 f9ab 	bl	800a730 <HAL_TIM_ConfigClockSource>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80023e0:	f7ff fbc6 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023e4:	481d      	ldr	r0, [pc, #116]	@ (800245c <MX_TIM4_Init+0xfc>)
 80023e6:	f007 fd7b 	bl	8009ee0 <HAL_TIM_PWM_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80023f0:	f7ff fbbe 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	4619      	mov	r1, r3
 8002402:	4816      	ldr	r0, [pc, #88]	@ (800245c <MX_TIM4_Init+0xfc>)
 8002404:	f008 fefe 	bl	800b204 <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800240e:	f7ff fbaf 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002412:	2360      	movs	r3, #96	@ 0x60
 8002414:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	4619      	mov	r1, r3
 8002428:	480c      	ldr	r0, [pc, #48]	@ (800245c <MX_TIM4_Init+0xfc>)
 800242a:	f008 f86d 	bl	800a508 <HAL_TIM_PWM_ConfigChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002434:	f7ff fb9c 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	220c      	movs	r2, #12
 800243c:	4619      	mov	r1, r3
 800243e:	4807      	ldr	r0, [pc, #28]	@ (800245c <MX_TIM4_Init+0xfc>)
 8002440:	f008 f862 	bl	800a508 <HAL_TIM_PWM_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800244a:	f7ff fb91 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800244e:	4803      	ldr	r0, [pc, #12]	@ (800245c <MX_TIM4_Init+0xfc>)
 8002450:	f000 f9ee 	bl	8002830 <HAL_TIM_MspPostInit>

}
 8002454:	bf00      	nop
 8002456:	3738      	adds	r7, #56	@ 0x38
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	240005e8 	.word	0x240005e8
 8002460:	40000800 	.word	0x40000800

08002464 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002482:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <MX_TIM5_Init+0x9c>)
 8002484:	4a1f      	ldr	r2, [pc, #124]	@ (8002504 <MX_TIM5_Init+0xa0>)
 8002486:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 128-1;
 8002488:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <MX_TIM5_Init+0x9c>)
 800248a:	227f      	movs	r2, #127	@ 0x7f
 800248c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b1c      	ldr	r3, [pc, #112]	@ (8002500 <MX_TIM5_Init+0x9c>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8002494:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <MX_TIM5_Init+0x9c>)
 8002496:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800249a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249c:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <MX_TIM5_Init+0x9c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a2:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <MX_TIM5_Init+0x9c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024a8:	4815      	ldr	r0, [pc, #84]	@ (8002500 <MX_TIM5_Init+0x9c>)
 80024aa:	f007 fc4a 	bl	8009d42 <HAL_TIM_Base_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80024b4:	f7ff fb5c 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4619      	mov	r1, r3
 80024c4:	480e      	ldr	r0, [pc, #56]	@ (8002500 <MX_TIM5_Init+0x9c>)
 80024c6:	f008 f933 	bl	800a730 <HAL_TIM_ConfigClockSource>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80024d0:	f7ff fb4e 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4807      	ldr	r0, [pc, #28]	@ (8002500 <MX_TIM5_Init+0x9c>)
 80024e2:	f008 fe8f 	bl	800b204 <HAL_TIMEx_MasterConfigSynchronization>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80024ec:	f7ff fb40 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start_IT(&htim5);  // 启动1ms定时器中�??????????
 80024f0:	4803      	ldr	r0, [pc, #12]	@ (8002500 <MX_TIM5_Init+0x9c>)
 80024f2:	f007 fc7d 	bl	8009df0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM5_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	24000634 	.word	0x24000634
 8002504:	40000c00 	.word	0x40000c00

08002508 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08c      	sub	sp, #48	@ 0x30
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	2224      	movs	r2, #36	@ 0x24
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f00c fb5b 	bl	800ebd2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251c:	463b      	mov	r3, r7
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002526:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <MX_TIM8_Init+0xac>)
 8002528:	4a23      	ldr	r2, [pc, #140]	@ (80025b8 <MX_TIM8_Init+0xb0>)
 800252a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800252c:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <MX_TIM8_Init+0xac>)
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002532:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <MX_TIM8_Init+0xac>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002538:	4b1e      	ldr	r3, [pc, #120]	@ (80025b4 <MX_TIM8_Init+0xac>)
 800253a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800253e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002540:	4b1c      	ldr	r3, [pc, #112]	@ (80025b4 <MX_TIM8_Init+0xac>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002546:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <MX_TIM8_Init+0xac>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <MX_TIM8_Init+0xac>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002552:	2303      	movs	r3, #3
 8002554:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800255a:	2301      	movs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002562:	230f      	movs	r3, #15
 8002564:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800256a:	2301      	movs	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002572:	230f      	movs	r3, #15
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	4619      	mov	r1, r3
 800257c:	480d      	ldr	r0, [pc, #52]	@ (80025b4 <MX_TIM8_Init+0xac>)
 800257e:	f007 fe15 	bl	800a1ac <HAL_TIM_Encoder_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002588:	f7ff faf2 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002598:	463b      	mov	r3, r7
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <MX_TIM8_Init+0xac>)
 800259e:	f008 fe31 	bl	800b204 <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80025a8:	f7ff fae2 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	3730      	adds	r7, #48	@ 0x30
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	24000680 	.word	0x24000680
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	@ 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002684 <HAL_TIM_PWM_MspInit+0xc8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d14e      	bne.n	800267c <HAL_TIM_PWM_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025de:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <HAL_TIM_PWM_MspInit+0xcc>)
 80025e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e4:	4a28      	ldr	r2, [pc, #160]	@ (8002688 <HAL_TIM_PWM_MspInit+0xcc>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025ee:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <HAL_TIM_PWM_MspInit+0xcc>)
 80025f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fc:	4b22      	ldr	r3, [pc, #136]	@ (8002688 <HAL_TIM_PWM_MspInit+0xcc>)
 80025fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002602:	4a21      	ldr	r2, [pc, #132]	@ (8002688 <HAL_TIM_PWM_MspInit+0xcc>)
 8002604:	f043 0310 	orr.w	r3, r3, #16
 8002608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800260c:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <HAL_TIM_PWM_MspInit+0xcc>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_TIM_PWM_MspInit+0xcc>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	4a19      	ldr	r2, [pc, #100]	@ (8002688 <HAL_TIM_PWM_MspInit+0xcc>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <HAL_TIM_PWM_MspInit+0xcc>)
 800262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002638:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800263c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002646:	2302      	movs	r3, #2
 8002648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800264a:	2301      	movs	r3, #1
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	480d      	ldr	r0, [pc, #52]	@ (800268c <HAL_TIM_PWM_MspInit+0xd0>)
 8002656:	f002 fe15 	bl	8005284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800265a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800265e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002668:	2302      	movs	r3, #2
 800266a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	4806      	ldr	r0, [pc, #24]	@ (8002690 <HAL_TIM_PWM_MspInit+0xd4>)
 8002678:	f002 fe04 	bl	8005284 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	@ 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010000 	.word	0x40010000
 8002688:	58024400 	.word	0x58024400
 800268c:	58021000 	.word	0x58021000
 8002690:	58020000 	.word	0x58020000

08002694 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a4:	d117      	bne.n	80026d6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026a6:	4b39      	ldr	r3, [pc, #228]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 80026a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ac:	4a37      	ldr	r2, [pc, #220]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026b6:	4b35      	ldr	r3, [pc, #212]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 80026b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026c4:	2200      	movs	r2, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	201c      	movs	r0, #28
 80026ca:	f001 ffca 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026ce:	201c      	movs	r0, #28
 80026d0:	f001 ffe1 	bl	8004696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80026d4:	e055      	b.n	8002782 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2d      	ldr	r2, [pc, #180]	@ (8002790 <HAL_TIM_Base_MspInit+0xfc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d117      	bne.n	8002710 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e0:	4b2a      	ldr	r3, [pc, #168]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 80026e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e6:	4a29      	ldr	r2, [pc, #164]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026f0:	4b26      	ldr	r3, [pc, #152]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 80026f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	201d      	movs	r0, #29
 8002704:	f001 ffad 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002708:	201d      	movs	r0, #29
 800270a:	f001 ffc4 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 800270e:	e038      	b.n	8002782 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <HAL_TIM_Base_MspInit+0x100>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d117      	bne.n	800274a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800271a:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 800271c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002720:	4a1a      	ldr	r2, [pc, #104]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 800272c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	201e      	movs	r0, #30
 800273e:	f001 ff90 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002742:	201e      	movs	r0, #30
 8002744:	f001 ffa7 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8002748:	e01b      	b.n	8002782 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM5)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <HAL_TIM_Base_MspInit+0x104>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d116      	bne.n	8002782 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002754:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 8002756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800275a:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002764:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_TIM_Base_MspInit+0xf8>)
 8002766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	2032      	movs	r0, #50	@ 0x32
 8002778:	f001 ff73 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800277c:	2032      	movs	r0, #50	@ 0x32
 800277e:	f001 ff8a 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	58024400 	.word	0x58024400
 8002790:	40000400 	.word	0x40000400
 8002794:	40000800 	.word	0x40000800
 8002798:	40000c00 	.word	0x40000c00

0800279c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	@ 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002824 <HAL_TIM_Encoder_MspInit+0x88>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d12d      	bne.n	800281a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c4:	4a18      	ldr	r2, [pc, #96]	@ (8002828 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027ce:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027dc:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e2:	4a11      	ldr	r2, [pc, #68]	@ (8002828 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027fa:	23c0      	movs	r3, #192	@ 0xc0
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800280a:	2303      	movs	r3, #3
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	@ (800282c <HAL_TIM_Encoder_MspInit+0x90>)
 8002816:	f002 fd35 	bl	8005284 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	@ 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40010400 	.word	0x40010400
 8002828:	58024400 	.word	0x58024400
 800282c:	58020800 	.word	0x58020800

08002830 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a4b      	ldr	r2, [pc, #300]	@ (800297c <HAL_TIM_MspPostInit+0x14c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d120      	bne.n	8002894 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002852:	4b4b      	ldr	r3, [pc, #300]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 8002854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002858:	4a49      	ldr	r2, [pc, #292]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 800285a:	f043 0310 	orr.w	r3, r3, #16
 800285e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 8002864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002882:	2301      	movs	r3, #1
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	483d      	ldr	r0, [pc, #244]	@ (8002984 <HAL_TIM_MspPostInit+0x154>)
 800288e:	f002 fcf9 	bl	8005284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002892:	e06e      	b.n	8002972 <HAL_TIM_MspPostInit+0x142>
  else if(timHandle->Instance==TIM2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289c:	d11f      	bne.n	80028de <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 80028a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a4:	4a36      	ldr	r2, [pc, #216]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ae:	4b34      	ldr	r3, [pc, #208]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 80028b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80028bc:	2305      	movs	r3, #5
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028cc:	2301      	movs	r3, #1
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	482c      	ldr	r0, [pc, #176]	@ (8002988 <HAL_TIM_MspPostInit+0x158>)
 80028d8:	f002 fcd4 	bl	8005284 <HAL_GPIO_Init>
}
 80028dc:	e049      	b.n	8002972 <HAL_TIM_MspPostInit+0x142>
  else if(timHandle->Instance==TIM3)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2a      	ldr	r2, [pc, #168]	@ (800298c <HAL_TIM_MspPostInit+0x15c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d11f      	bne.n	8002928 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 80028ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ee:	4a24      	ldr	r2, [pc, #144]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f8:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 80028fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002906:	2330      	movs	r3, #48	@ 0x30
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002916:	2302      	movs	r3, #2
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	4619      	mov	r1, r3
 8002920:	481b      	ldr	r0, [pc, #108]	@ (8002990 <HAL_TIM_MspPostInit+0x160>)
 8002922:	f002 fcaf 	bl	8005284 <HAL_GPIO_Init>
}
 8002926:	e024      	b.n	8002972 <HAL_TIM_MspPostInit+0x142>
  else if(timHandle->Instance==TIM4)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	@ (8002994 <HAL_TIM_MspPostInit+0x164>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d11f      	bne.n	8002972 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002932:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 8002934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002938:	4a11      	ldr	r2, [pc, #68]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002942:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <HAL_TIM_MspPostInit+0x150>)
 8002944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8002950:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8002954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002962:	2302      	movs	r3, #2
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	4619      	mov	r1, r3
 800296c:	480a      	ldr	r0, [pc, #40]	@ (8002998 <HAL_TIM_MspPostInit+0x168>)
 800296e:	f002 fc89 	bl	8005284 <HAL_GPIO_Init>
}
 8002972:	bf00      	nop
 8002974:	3730      	adds	r7, #48	@ 0x30
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40010000 	.word	0x40010000
 8002980:	58024400 	.word	0x58024400
 8002984:	58021000 	.word	0x58021000
 8002988:	58020000 	.word	0x58020000
 800298c:	40000400 	.word	0x40000400
 8002990:	58020400 	.word	0x58020400
 8002994:	40000800 	.word	0x40000800
 8002998:	58020c00 	.word	0x58020c00

0800299c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80029a0:	4b22      	ldr	r3, [pc, #136]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029a2:	4a23      	ldr	r2, [pc, #140]	@ (8002a30 <MX_LPUART1_UART_Init+0x94>)
 80029a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80029a6:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ae:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029c2:	220c      	movs	r2, #12
 80029c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c6:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029d2:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80029e4:	4811      	ldr	r0, [pc, #68]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029e6:	f008 fd37 	bl	800b458 <HAL_UART_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80029f0:	f7ff f8be 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029f4:	2100      	movs	r1, #0
 80029f6:	480d      	ldr	r0, [pc, #52]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 80029f8:	f00b f891 	bl	800db1e <HAL_UARTEx_SetTxFifoThreshold>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a02:	f7ff f8b5 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a06:	2100      	movs	r1, #0
 8002a08:	4808      	ldr	r0, [pc, #32]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 8002a0a:	f00b f8c6 	bl	800db9a <HAL_UARTEx_SetRxFifoThreshold>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a14:	f7ff f8ac 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	@ (8002a2c <MX_LPUART1_UART_Init+0x90>)
 8002a1a:	f00b f847 	bl	800daac <HAL_UARTEx_DisableFifoMode>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a24:	f7ff f8a4 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	240006cc 	.word	0x240006cc
 8002a30:	58000c00 	.word	0x58000c00

08002a34 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a38:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a3a:	4a23      	ldr	r2, [pc, #140]	@ (8002ac8 <MX_UART4_Init+0x94>)
 8002a3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002a3e:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a52:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a64:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a70:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a76:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a7c:	4811      	ldr	r0, [pc, #68]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a7e:	f008 fceb 	bl	800b458 <HAL_UART_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002a88:	f7ff f872 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	480d      	ldr	r0, [pc, #52]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002a90:	f00b f845 	bl	800db1e <HAL_UARTEx_SetTxFifoThreshold>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002a9a:	f7ff f869 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4808      	ldr	r0, [pc, #32]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002aa2:	f00b f87a 	bl	800db9a <HAL_UARTEx_SetRxFifoThreshold>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002aac:	f7ff f860 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002ab0:	4804      	ldr	r0, [pc, #16]	@ (8002ac4 <MX_UART4_Init+0x90>)
 8002ab2:	f00a fffb 	bl	800daac <HAL_UARTEx_DisableFifoMode>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002abc:	f7ff f858 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	24000760 	.word	0x24000760
 8002ac8:	40004c00 	.word	0x40004c00

08002acc <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002ad0:	4b22      	ldr	r3, [pc, #136]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002ad2:	4a23      	ldr	r2, [pc, #140]	@ (8002b60 <MX_UART8_Init+0x94>)
 8002ad4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002ad6:	4b21      	ldr	r3, [pc, #132]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002adc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002ade:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002aea:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002af2:	220c      	movs	r2, #12
 8002af4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002afc:	4b17      	ldr	r3, [pc, #92]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b02:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b08:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002b14:	4811      	ldr	r0, [pc, #68]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002b16:	f008 fc9f 	bl	800b458 <HAL_UART_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002b20:	f7ff f826 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b24:	2100      	movs	r1, #0
 8002b26:	480d      	ldr	r0, [pc, #52]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002b28:	f00a fff9 	bl	800db1e <HAL_UARTEx_SetTxFifoThreshold>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002b32:	f7ff f81d 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b36:	2100      	movs	r1, #0
 8002b38:	4808      	ldr	r0, [pc, #32]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002b3a:	f00b f82e 	bl	800db9a <HAL_UARTEx_SetRxFifoThreshold>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002b44:	f7ff f814 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002b48:	4804      	ldr	r0, [pc, #16]	@ (8002b5c <MX_UART8_Init+0x90>)
 8002b4a:	f00a ffaf 	bl	800daac <HAL_UARTEx_DisableFifoMode>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002b54:	f7ff f80c 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	240007f4 	.word	0x240007f4
 8002b60:	40007c00 	.word	0x40007c00

08002b64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002b6a:	4a23      	ldr	r2, [pc, #140]	@ (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b6e:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002b70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b76:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b82:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8e:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b94:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9a:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba6:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bac:	4811      	ldr	r0, [pc, #68]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002bae:	f008 fc53 	bl	800b458 <HAL_UART_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002bb8:	f7fe ffda 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	480d      	ldr	r0, [pc, #52]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002bc0:	f00a ffad 	bl	800db1e <HAL_UARTEx_SetTxFifoThreshold>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002bca:	f7fe ffd1 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4808      	ldr	r0, [pc, #32]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002bd2:	f00a ffe2 	bl	800db9a <HAL_UARTEx_SetRxFifoThreshold>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002bdc:	f7fe ffc8 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002be0:	4804      	ldr	r0, [pc, #16]	@ (8002bf4 <MX_USART2_UART_Init+0x90>)
 8002be2:	f00a ff63 	bl	800daac <HAL_UARTEx_DisableFifoMode>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002bec:	f7fe ffc0 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	24000888 	.word	0x24000888
 8002bf8:	40004400 	.word	0x40004400

08002bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b0c0      	sub	sp, #256	@ 0x100
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c18:	22c0      	movs	r2, #192	@ 0xc0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00b ffd8 	bl	800ebd2 <memset>
  if(uartHandle->Instance==LPUART1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4aa5      	ldr	r2, [pc, #660]	@ (8002ebc <HAL_UART_MspInit+0x2c0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d14e      	bne.n	8002cca <HAL_UART_MspInit+0xce>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002c2c:	f04f 0204 	mov.w	r2, #4
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fd70 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c4e:	f7fe ff8f 	bl	8001b70 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c52:	4b9b      	ldr	r3, [pc, #620]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c58:	4a99      	ldr	r2, [pc, #612]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002c5a:	f043 0308 	orr.w	r3, r3, #8
 8002c5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c62:	4b97      	ldr	r3, [pc, #604]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c70:	4b93      	ldr	r3, [pc, #588]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c76:	4a92      	ldr	r2, [pc, #584]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c80:	4b8f      	ldr	r3, [pc, #572]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c8e:	23c0      	movs	r3, #192	@ 0xc0
 8002c90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4884      	ldr	r0, [pc, #528]	@ (8002ec4 <HAL_UART_MspInit+0x2c8>)
 8002cb4:	f002 fae6 	bl	8005284 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2100      	movs	r1, #0
 8002cbc:	208e      	movs	r0, #142	@ 0x8e
 8002cbe:	f001 fcd0 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002cc2:	208e      	movs	r0, #142	@ 0x8e
 8002cc4:	f001 fce7 	bl	8004696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002cc8:	e0f3      	b.n	8002eb2 <HAL_UART_MspInit+0x2b6>
  else if(uartHandle->Instance==UART4)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7e      	ldr	r2, [pc, #504]	@ (8002ec8 <HAL_UART_MspInit+0x2cc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d14f      	bne.n	8002d74 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002cd4:	f04f 0202 	mov.w	r2, #2
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fd1c 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8002cf6:	f7fe ff3b 	bl	8001b70 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cfa:	4b71      	ldr	r3, [pc, #452]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d00:	4a6f      	ldr	r2, [pc, #444]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002d02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d18:	4b69      	ldr	r3, [pc, #420]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d1e:	4a68      	ldr	r2, [pc, #416]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d28:	4b65      	ldr	r3, [pc, #404]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d50:	2308      	movs	r3, #8
 8002d52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d56:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4859      	ldr	r0, [pc, #356]	@ (8002ec4 <HAL_UART_MspInit+0x2c8>)
 8002d5e:	f002 fa91 	bl	8005284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	2034      	movs	r0, #52	@ 0x34
 8002d68:	f001 fc7b 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d6c:	2034      	movs	r0, #52	@ 0x34
 8002d6e:	f001 fc92 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8002d72:	e09e      	b.n	8002eb2 <HAL_UART_MspInit+0x2b6>
  else if(uartHandle->Instance==UART8)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a54      	ldr	r2, [pc, #336]	@ (8002ecc <HAL_UART_MspInit+0x2d0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d146      	bne.n	8002e0c <HAL_UART_MspInit+0x210>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002d7e:	f04f 0202 	mov.w	r2, #2
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fcc7 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002da0:	f7fe fee6 	bl	8001b70 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002da4:	4b46      	ldr	r3, [pc, #280]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002daa:	4a45      	ldr	r2, [pc, #276]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002dac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002db0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002db4:	4b42      	ldr	r3, [pc, #264]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dc8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002dca:	f043 0310 	orr.w	r3, r3, #16
 8002dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002de0:	2303      	movs	r3, #3
 8002de2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002df8:	2308      	movs	r3, #8
 8002dfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dfe:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e02:	4619      	mov	r1, r3
 8002e04:	4832      	ldr	r0, [pc, #200]	@ (8002ed0 <HAL_UART_MspInit+0x2d4>)
 8002e06:	f002 fa3d 	bl	8005284 <HAL_GPIO_Init>
}
 8002e0a:	e052      	b.n	8002eb2 <HAL_UART_MspInit+0x2b6>
  else if(uartHandle->Instance==USART2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a30      	ldr	r2, [pc, #192]	@ (8002ed4 <HAL_UART_MspInit+0x2d8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d14d      	bne.n	8002eb2 <HAL_UART_MspInit+0x2b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e16:	f04f 0202 	mov.w	r2, #2
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 fc7b 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_MspInit+0x240>
      Error_Handler();
 8002e38:	f7fe fe9a 	bl	8001b70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e42:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5a:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e60:	4a17      	ldr	r2, [pc, #92]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ec0 <HAL_UART_MspInit+0x2c4>)
 8002e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e78:	2360      	movs	r3, #96	@ 0x60
 8002e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e90:	2307      	movs	r3, #7
 8002e92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e96:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480e      	ldr	r0, [pc, #56]	@ (8002ed8 <HAL_UART_MspInit+0x2dc>)
 8002e9e:	f002 f9f1 	bl	8005284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2026      	movs	r0, #38	@ 0x26
 8002ea8:	f001 fbdb 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002eac:	2026      	movs	r0, #38	@ 0x26
 8002eae:	f001 fbf2 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	58000c00 	.word	0x58000c00
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	58020400 	.word	0x58020400
 8002ec8:	40004c00 	.word	0x40004c00
 8002ecc:	40007c00 	.word	0x40007c00
 8002ed0:	58021000 	.word	0x58021000
 8002ed4:	40004400 	.word	0x40004400
 8002ed8:	58020c00 	.word	0x58020c00

08002edc <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:
#  ldr   sp, =_estack      /* set stack pointer */

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002edc:	f7fd fde2 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee0:	480b      	ldr	r0, [pc, #44]	@ (8002f10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ee2:	490c      	ldr	r1, [pc, #48]	@ (8002f14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8002f18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee8:	e002      	b.n	8002ef0 <LoopCopyDataInit>

08002eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eee:	3304      	adds	r3, #4

08002ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef4:	d3f9      	bcc.n	8002eea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef6:	4a09      	ldr	r2, [pc, #36]	@ (8002f1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ef8:	4c09      	ldr	r4, [pc, #36]	@ (8002f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002efc:	e001      	b.n	8002f02 <LoopFillZerobss>

08002efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f00:	3204      	adds	r2, #4

08002f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f04:	d3fb      	bcc.n	8002efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f06:	f00b fecf 	bl	800eca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0a:	f7fe fb85 	bl	8001618 <main>
  bx  lr
 8002f0e:	4770      	bx	lr
  ldr r0, =_sdata
 8002f10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f14:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8002f18:	08012f14 	.word	0x08012f14
  ldr r2, =_sbss
 8002f1c:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8002f20:	24000a6c 	.word	0x24000a6c

08002f24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f24:	e7fe      	b.n	8002f24 <ADC3_IRQHandler>
	...

08002f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2e:	2003      	movs	r0, #3
 8002f30:	f001 fb8c 	bl	800464c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f34:	f003 fa22 	bl	800637c <HAL_RCC_GetSysClockFreq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <HAL_Init+0x68>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	4913      	ldr	r1, [pc, #76]	@ (8002f94 <HAL_Init+0x6c>)
 8002f46:	5ccb      	ldrb	r3, [r1, r3]
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f52:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <HAL_Init+0x68>)
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f94 <HAL_Init+0x6c>)
 8002f5c:	5cd3      	ldrb	r3, [r2, r3]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	4a0b      	ldr	r2, [pc, #44]	@ (8002f98 <HAL_Init+0x70>)
 8002f6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f9c <HAL_Init+0x74>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f72:	200f      	movs	r0, #15
 8002f74:	f000 f814 	bl	8002fa0 <HAL_InitTick>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e002      	b.n	8002f88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f82:	f7fe fec7 	bl	8001d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	58024400 	.word	0x58024400
 8002f94:	08012a8c 	.word	0x08012a8c
 8002f98:	24000004 	.word	0x24000004
 8002f9c:	24000000 	.word	0x24000000

08002fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002fa8:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <HAL_InitTick+0x60>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e021      	b.n	8002ff8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fb4:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <HAL_InitTick+0x64>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <HAL_InitTick+0x60>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 fb71 	bl	80046b2 <HAL_SYSTICK_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00e      	b.n	8002ff8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b0f      	cmp	r3, #15
 8002fde:	d80a      	bhi.n	8002ff6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe8:	f001 fb3b 	bl	8004662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fec:	4a06      	ldr	r2, [pc, #24]	@ (8003008 <HAL_InitTick+0x68>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e000      	b.n	8002ff8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	24000020 	.word	0x24000020
 8003004:	24000000 	.word	0x24000000
 8003008:	2400001c 	.word	0x2400001c

0800300c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003010:	4b06      	ldr	r3, [pc, #24]	@ (800302c <HAL_IncTick+0x20>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_IncTick+0x24>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4413      	add	r3, r2
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <HAL_IncTick+0x24>)
 800301e:	6013      	str	r3, [r2, #0]
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	24000020 	.word	0x24000020
 8003030:	2400091c 	.word	0x2400091c

08003034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return uwTick;
 8003038:	4b03      	ldr	r3, [pc, #12]	@ (8003048 <HAL_GetTick+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	2400091c 	.word	0x2400091c

0800304c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003050:	4b03      	ldr	r3, [pc, #12]	@ (8003060 <HAL_GetREVID+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0c1b      	lsrs	r3, r3, #16
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	5c001000 	.word	0x5c001000

08003064 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	609a      	str	r2, [r3, #8]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3360      	adds	r3, #96	@ 0x60
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	431a      	orrs	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	431a      	orrs	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	611a      	str	r2, [r3, #16]
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800313e:	b480      	push	{r7}
 8003140:	b087      	sub	sp, #28
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3360      	adds	r3, #96	@ 0x60
 800314e:	461a      	mov	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	431a      	orrs	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	601a      	str	r2, [r3, #0]
  }
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3330      	adds	r3, #48	@ 0x30
 8003184:	461a      	mov	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	4413      	add	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	211f      	movs	r1, #31
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0e9b      	lsrs	r3, r3, #26
 80031ac:	f003 011f 	and.w	r1, r3, #31
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	431a      	orrs	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3314      	adds	r3, #20
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	0e5b      	lsrs	r3, r3, #25
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	4413      	add	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	0d1b      	lsrs	r3, r3, #20
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2107      	movs	r1, #7
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	401a      	ands	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	0d1b      	lsrs	r3, r3, #20
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	431a      	orrs	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800323c:	43db      	mvns	r3, r3
 800323e:	401a      	ands	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0318 	and.w	r3, r3, #24
 8003246:	4908      	ldr	r1, [pc, #32]	@ (8003268 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003248:	40d9      	lsrs	r1, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	400b      	ands	r3, r1
 800324e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	000fffff 	.word	0x000fffff

0800326c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 031f 	and.w	r3, r3, #31
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003296:	4013      	ands	r3, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6093      	str	r3, [r2, #8]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	5fffffc0 	.word	0x5fffffc0

080032ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c0:	d101      	bne.n	80032c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	6fffffc0 	.word	0x6fffffc0

080032fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003310:	d101      	bne.n	8003316 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <LL_ADC_Enable+0x24>)
 8003332:	4013      	ands	r3, r2
 8003334:	f043 0201 	orr.w	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	7fffffc0 	.word	0x7fffffc0

0800334c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <LL_ADC_IsEnabled+0x18>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <LL_ADC_IsEnabled+0x1a>
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <LL_ADC_REG_StartConversion+0x24>)
 8003382:	4013      	ands	r3, r2
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	7fffffc0 	.word	0x7fffffc0

0800339c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d101      	bne.n	80033b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d101      	bne.n	80033da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b089      	sub	sp, #36	@ 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e18f      	b.n	8003722 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd fed5 	bl	80011c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff3f 	bl	80032ac <LL_ADC_IsDeepPowerDownEnabled>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff25 	bl	8003288 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff ff5a 	bl	80032fc <LL_ADC_IsInternalRegulatorEnabled>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d114      	bne.n	8003478 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ff3e 	bl	80032d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003458:	4b87      	ldr	r3, [pc, #540]	@ (8003678 <HAL_ADC_Init+0x290>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	4a87      	ldr	r2, [pc, #540]	@ (800367c <HAL_ADC_Init+0x294>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	3301      	adds	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800346a:	e002      	b.n	8003472 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3b01      	subs	r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f9      	bne.n	800346c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff3d 	bl	80032fc <LL_ADC_IsInternalRegulatorEnabled>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348c:	f043 0210 	orr.w	r2, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff77 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 80034ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 8129 	bne.w	8003710 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f040 8125 	bne.w	8003710 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034ce:	f043 0202 	orr.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff36 	bl	800334c <LL_ADC_IsEnabled>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d136      	bne.n	8003554 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a65      	ldr	r2, [pc, #404]	@ (8003680 <HAL_ADC_Init+0x298>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_ADC_Init+0x112>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a63      	ldr	r2, [pc, #396]	@ (8003684 <HAL_ADC_Init+0x29c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10e      	bne.n	8003518 <HAL_ADC_Init+0x130>
 80034fa:	4861      	ldr	r0, [pc, #388]	@ (8003680 <HAL_ADC_Init+0x298>)
 80034fc:	f7ff ff26 	bl	800334c <LL_ADC_IsEnabled>
 8003500:	4604      	mov	r4, r0
 8003502:	4860      	ldr	r0, [pc, #384]	@ (8003684 <HAL_ADC_Init+0x29c>)
 8003504:	f7ff ff22 	bl	800334c <LL_ADC_IsEnabled>
 8003508:	4603      	mov	r3, r0
 800350a:	4323      	orrs	r3, r4
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e008      	b.n	800352a <HAL_ADC_Init+0x142>
 8003518:	485b      	ldr	r0, [pc, #364]	@ (8003688 <HAL_ADC_Init+0x2a0>)
 800351a:	f7ff ff17 	bl	800334c <LL_ADC_IsEnabled>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d012      	beq.n	8003554 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a53      	ldr	r2, [pc, #332]	@ (8003680 <HAL_ADC_Init+0x298>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_ADC_Init+0x15a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a51      	ldr	r2, [pc, #324]	@ (8003684 <HAL_ADC_Init+0x29c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_ADC_Init+0x15e>
 8003542:	4a52      	ldr	r2, [pc, #328]	@ (800368c <HAL_ADC_Init+0x2a4>)
 8003544:	e000      	b.n	8003548 <HAL_ADC_Init+0x160>
 8003546:	4a52      	ldr	r2, [pc, #328]	@ (8003690 <HAL_ADC_Init+0x2a8>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7ff fd88 	bl	8003064 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003554:	f7ff fd7a 	bl	800304c <HAL_GetREVID>
 8003558:	4603      	mov	r3, r0
 800355a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800355e:	4293      	cmp	r3, r2
 8003560:	d914      	bls.n	800358c <HAL_ADC_Init+0x1a4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b10      	cmp	r3, #16
 8003568:	d110      	bne.n	800358c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7d5b      	ldrb	r3, [r3, #21]
 800356e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003574:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800357a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7f1b      	ldrb	r3, [r3, #28]
 8003580:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003582:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003584:	f043 030c 	orr.w	r3, r3, #12
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	e00d      	b.n	80035a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7d5b      	ldrb	r3, [r3, #21]
 8003590:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003596:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800359c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7f1b      	ldrb	r3, [r3, #28]
 80035a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7f1b      	ldrb	r3, [r3, #28]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d106      	bne.n	80035be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	045b      	lsls	r3, r3, #17
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <HAL_ADC_Init+0x2ac>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	69b9      	ldr	r1, [r7, #24]
 80035ea:	430b      	orrs	r3, r1
 80035ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fed2 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 80035f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fedf 	bl	80033c2 <LL_ADC_INJ_IsConversionOngoing>
 8003604:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d15f      	bne.n	80036cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d15c      	bne.n	80036cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7d1b      	ldrb	r3, [r3, #20]
 8003616:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <HAL_ADC_Init+0x2b0>)
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	69b9      	ldr	r1, [r7, #24]
 8003630:	430b      	orrs	r3, r1
 8003632:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800363a:	2b01      	cmp	r3, #1
 800363c:	d130      	bne.n	80036a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	4b14      	ldr	r3, [pc, #80]	@ (800369c <HAL_ADC_Init+0x2b4>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003652:	3a01      	subs	r2, #1
 8003654:	0411      	lsls	r1, r2, #16
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800365a:	4311      	orrs	r1, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003660:	4311      	orrs	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003666:	430a      	orrs	r2, r1
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	611a      	str	r2, [r3, #16]
 8003674:	e01c      	b.n	80036b0 <HAL_ADC_Init+0x2c8>
 8003676:	bf00      	nop
 8003678:	24000000 	.word	0x24000000
 800367c:	053e2d63 	.word	0x053e2d63
 8003680:	40022000 	.word	0x40022000
 8003684:	40022100 	.word	0x40022100
 8003688:	58026000 	.word	0x58026000
 800368c:	40022300 	.word	0x40022300
 8003690:	58026300 	.word	0x58026300
 8003694:	fff0c003 	.word	0xfff0c003
 8003698:	ffffbffc 	.word	0xffffbffc
 800369c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fce0 	bl	800408c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d10c      	bne.n	80036ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	f023 010f 	bic.w	r1, r3, #15
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	1e5a      	subs	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80036ec:	e007      	b.n	80036fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 020f 	bic.w	r2, r2, #15
 80036fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	655a      	str	r2, [r3, #84]	@ 0x54
 800370e:	e007      	b.n	8003720 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003714:	f043 0210 	orr.w	r2, r3, #16
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003720:	7ffb      	ldrb	r3, [r7, #31]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3724      	adds	r7, #36	@ 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	bf00      	nop

0800372c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a5c      	ldr	r2, [pc, #368]	@ (80038ac <HAL_ADC_Start+0x180>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_ADC_Start+0x1c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a5b      	ldr	r2, [pc, #364]	@ (80038b0 <HAL_ADC_Start+0x184>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_ADC_Start+0x20>
 8003748:	4b5a      	ldr	r3, [pc, #360]	@ (80038b4 <HAL_ADC_Start+0x188>)
 800374a:	e000      	b.n	800374e <HAL_ADC_Start+0x22>
 800374c:	4b5a      	ldr	r3, [pc, #360]	@ (80038b8 <HAL_ADC_Start+0x18c>)
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fd8c 	bl	800326c <LL_ADC_GetMultimode>
 8003754:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fe1e 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	f040 809a 	bne.w	800389c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_ADC_Start+0x4a>
 8003772:	2302      	movs	r3, #2
 8003774:	e095      	b.n	80038a2 <HAL_ADC_Start+0x176>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fbfa 	bl	8003f78 <ADC_Enable>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 8081 	bne.w	8003892 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003794:	4b49      	ldr	r3, [pc, #292]	@ (80038bc <HAL_ADC_Start+0x190>)
 8003796:	4013      	ands	r3, r2
 8003798:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a42      	ldr	r2, [pc, #264]	@ (80038b0 <HAL_ADC_Start+0x184>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d002      	beq.n	80037b0 <HAL_ADC_Start+0x84>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	e000      	b.n	80037b2 <HAL_ADC_Start+0x86>
 80037b0:	4b3e      	ldr	r3, [pc, #248]	@ (80038ac <HAL_ADC_Start+0x180>)
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d002      	beq.n	80037c0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d8:	d106      	bne.n	80037e8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037de:	f023 0206 	bic.w	r2, r3, #6
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80037e6:	e002      	b.n	80037ee <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	221c      	movs	r2, #28
 80037f4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2b      	ldr	r2, [pc, #172]	@ (80038b0 <HAL_ADC_Start+0x184>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d002      	beq.n	800380e <HAL_ADC_Start+0xe2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e000      	b.n	8003810 <HAL_ADC_Start+0xe4>
 800380e:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <HAL_ADC_Start+0x180>)
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	4293      	cmp	r3, r2
 8003816:	d008      	beq.n	800382a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b05      	cmp	r3, #5
 8003822:	d002      	beq.n	800382a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b09      	cmp	r3, #9
 8003828:	d114      	bne.n	8003854 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003840:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fd91 	bl	8003374 <LL_ADC_REG_StartConversion>
 8003852:	e025      	b.n	80038a0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003858:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a12      	ldr	r2, [pc, #72]	@ (80038b0 <HAL_ADC_Start+0x184>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d002      	beq.n	8003870 <HAL_ADC_Start+0x144>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	e000      	b.n	8003872 <HAL_ADC_Start+0x146>
 8003870:	4b0e      	ldr	r3, [pc, #56]	@ (80038ac <HAL_ADC_Start+0x180>)
 8003872:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00f      	beq.n	80038a0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003884:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003888:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003890:	e006      	b.n	80038a0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800389a:	e001      	b.n	80038a0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800389c:	2302      	movs	r3, #2
 800389e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40022100 	.word	0x40022100
 80038b4:	40022300 	.word	0x40022300
 80038b8:	58026300 	.word	0x58026300
 80038bc:	fffff0fe 	.word	0xfffff0fe

080038c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b0a1      	sub	sp, #132	@ 0x84
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4a65      	ldr	r2, [pc, #404]	@ (8003a70 <HAL_ADC_ConfigChannel+0x1b0>)
 80038da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x2a>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e32e      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x688>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fd50 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 8313 	bne.w	8003f2a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db2c      	blt.n	8003966 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003914:	2b00      	cmp	r3, #0
 8003916:	d108      	bne.n	800392a <HAL_ADC_ConfigChannel+0x6a>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2201      	movs	r2, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	e016      	b.n	8003958 <HAL_ADC_ConfigChannel+0x98>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	663b      	str	r3, [r7, #96]	@ 0x60
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	667b      	str	r3, [r7, #100]	@ 0x64
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800393a:	65fb      	str	r3, [r7, #92]	@ 0x5c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800393c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003942:	2320      	movs	r3, #32
 8003944:	e003      	b.n	800394e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	2201      	movs	r2, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	69d1      	ldr	r1, [r2, #28]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	430b      	orrs	r3, r1
 8003964:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	f7ff fbfe 	bl	8003174 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fd0d 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 8003982:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fd1a 	bl	80033c2 <LL_ADC_INJ_IsConversionOngoing>
 800398e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 80b8 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 80b4 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	461a      	mov	r2, r3
 80039ae:	f7ff fc0d 	bl	80031cc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039b2:	4b30      	ldr	r3, [pc, #192]	@ (8003a74 <HAL_ADC_ConfigChannel+0x1b4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80039ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039be:	d10b      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x118>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	e01d      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x154>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x13e>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	e00a      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x154>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d02c      	beq.n	8003a78 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6919      	ldr	r1, [r3, #16]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a2c:	f7ff fb4e 	bl	80030cc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6919      	ldr	r1, [r3, #16]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	7e5b      	ldrb	r3, [r3, #25]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x186>
 8003a40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003a44:	e000      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x188>
 8003a46:	2300      	movs	r3, #0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f7ff fb78 	bl	800313e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6919      	ldr	r1, [r3, #16]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	7e1b      	ldrb	r3, [r3, #24]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x1a4>
 8003a5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a62:	e000      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x1a6>
 8003a64:	2300      	movs	r3, #0
 8003a66:	461a      	mov	r2, r3
 8003a68:	f7ff fb50 	bl	800310c <LL_ADC_SetDataRightShift>
 8003a6c:	e04c      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x248>
 8003a6e:	bf00      	nop
 8003a70:	47ff0000 	.word	0x47ff0000
 8003a74:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	069b      	lsls	r3, r3, #26
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d107      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a9a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	069b      	lsls	r3, r3, #26
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d107      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003abe:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ac6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	069b      	lsls	r3, r3, #26
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d107      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ae2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	069b      	lsls	r3, r3, #26
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b06:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fc1d 	bl	800334c <LL_ADC_IsEnabled>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f040 8211 	bne.w	8003f3c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f7ff fb7c 	bl	8003224 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4aa1      	ldr	r2, [pc, #644]	@ (8003db8 <HAL_ADC_ConfigChannel+0x4f8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	f040 812e 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x2a0>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	0e9b      	lsrs	r3, r3, #26
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	2b09      	cmp	r3, #9
 8003b56:	bf94      	ite	ls
 8003b58:	2301      	movls	r3, #1
 8003b5a:	2300      	movhi	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e019      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x2d4>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b70:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003b72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e003      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003b7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2b09      	cmp	r3, #9
 8003b8c:	bf94      	ite	ls
 8003b8e:	2301      	movls	r3, #1
 8003b90:	2300      	movhi	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d079      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d107      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x2f4>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0e9b      	lsrs	r3, r3, #26
 8003baa:	3301      	adds	r3, #1
 8003bac:	069b      	lsls	r3, r3, #26
 8003bae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bb2:	e015      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x320>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bc4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003bcc:	2320      	movs	r3, #32
 8003bce:	e003      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	069b      	lsls	r3, r3, #26
 8003bdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x340>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	e017      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x370>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c10:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003c18:	2320      	movs	r3, #32
 8003c1a:	e003      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	3301      	adds	r3, #1
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	ea42 0103 	orr.w	r1, r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x396>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	0e9b      	lsrs	r3, r3, #26
 8003c46:	3301      	adds	r3, #1
 8003c48:	f003 021f 	and.w	r2, r3, #31
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	051b      	lsls	r3, r3, #20
 8003c54:	e018      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x3c8>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	e003      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4613      	mov	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	e07e      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d107      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x3e8>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0e9b      	lsrs	r3, r3, #26
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	069b      	lsls	r3, r3, #26
 8003ca2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ca6:	e015      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x414>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb0:	fa93 f3a3 	rbit	r3, r3
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	e003      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	fab3 f383 	clz	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	069b      	lsls	r3, r3, #26
 8003cd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x434>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	0e9b      	lsrs	r3, r3, #26
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	e017      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x464>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	61bb      	str	r3, [r7, #24]
  return result;
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	e003      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	ea42 0103 	orr.w	r1, r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10d      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x490>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	0e9b      	lsrs	r3, r3, #26
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	4613      	mov	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	3b1e      	subs	r3, #30
 8003d48:	051b      	lsls	r3, r3, #20
 8003d4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	e01b      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x4c8>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	60fb      	str	r3, [r7, #12]
  return result;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003d68:	2320      	movs	r3, #32
 8003d6a:	e003      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	3301      	adds	r3, #1
 8003d76:	f003 021f 	and.w	r2, r3, #31
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	3b1e      	subs	r3, #30
 8003d82:	051b      	lsls	r3, r3, #20
 8003d84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	6892      	ldr	r2, [r2, #8]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7ff fa1c 	bl	80031cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f280 80cf 	bge.w	8003f3c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a06      	ldr	r2, [pc, #24]	@ (8003dbc <HAL_ADC_ConfigChannel+0x4fc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_ADC_ConfigChannel+0x4f2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a04      	ldr	r2, [pc, #16]	@ (8003dc0 <HAL_ADC_ConfigChannel+0x500>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10a      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x508>
 8003db2:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x504>)
 8003db4:	e009      	b.n	8003dca <HAL_ADC_ConfigChannel+0x50a>
 8003db6:	bf00      	nop
 8003db8:	47ff0000 	.word	0x47ff0000
 8003dbc:	40022000 	.word	0x40022000
 8003dc0:	40022100 	.word	0x40022100
 8003dc4:	40022300 	.word	0x40022300
 8003dc8:	4b61      	ldr	r3, [pc, #388]	@ (8003f50 <HAL_ADC_ConfigChannel+0x690>)
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f970 	bl	80030b0 <LL_ADC_GetCommonPathInternalCh>
 8003dd0:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f54 <HAL_ADC_ConfigChannel+0x694>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x526>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f58 <HAL_ADC_ConfigChannel+0x698>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10e      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x544>
 8003de6:	485b      	ldr	r0, [pc, #364]	@ (8003f54 <HAL_ADC_ConfigChannel+0x694>)
 8003de8:	f7ff fab0 	bl	800334c <LL_ADC_IsEnabled>
 8003dec:	4604      	mov	r4, r0
 8003dee:	485a      	ldr	r0, [pc, #360]	@ (8003f58 <HAL_ADC_ConfigChannel+0x698>)
 8003df0:	f7ff faac 	bl	800334c <LL_ADC_IsEnabled>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4323      	orrs	r3, r4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e008      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x556>
 8003e04:	4855      	ldr	r0, [pc, #340]	@ (8003f5c <HAL_ADC_ConfigChannel+0x69c>)
 8003e06:	f7ff faa1 	bl	800334c <LL_ADC_IsEnabled>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d07d      	beq.n	8003f16 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a50      	ldr	r2, [pc, #320]	@ (8003f60 <HAL_ADC_ConfigChannel+0x6a0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d130      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x5c6>
 8003e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d12b      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a4a      	ldr	r2, [pc, #296]	@ (8003f5c <HAL_ADC_ConfigChannel+0x69c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	f040 8081 	bne.w	8003f3c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a45      	ldr	r2, [pc, #276]	@ (8003f54 <HAL_ADC_ConfigChannel+0x694>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x58e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a43      	ldr	r2, [pc, #268]	@ (8003f58 <HAL_ADC_ConfigChannel+0x698>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x592>
 8003e4e:	4a45      	ldr	r2, [pc, #276]	@ (8003f64 <HAL_ADC_ConfigChannel+0x6a4>)
 8003e50:	e000      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x594>
 8003e52:	4a3f      	ldr	r2, [pc, #252]	@ (8003f50 <HAL_ADC_ConfigChannel+0x690>)
 8003e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f7ff f914 	bl	800308a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e62:	4b41      	ldr	r3, [pc, #260]	@ (8003f68 <HAL_ADC_ConfigChannel+0x6a8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	4a40      	ldr	r2, [pc, #256]	@ (8003f6c <HAL_ADC_ConfigChannel+0x6ac>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	099b      	lsrs	r3, r3, #6
 8003e70:	3301      	adds	r3, #1
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e76:	e002      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f9      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e84:	e05a      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a39      	ldr	r2, [pc, #228]	@ (8003f70 <HAL_ADC_ConfigChannel+0x6b0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d11e      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x60e>
 8003e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d119      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f5c <HAL_ADC_ConfigChannel+0x69c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d14b      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f54 <HAL_ADC_ConfigChannel+0x694>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0x5f8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a29      	ldr	r2, [pc, #164]	@ (8003f58 <HAL_ADC_ConfigChannel+0x698>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x5fc>
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f64 <HAL_ADC_ConfigChannel+0x6a4>)
 8003eba:	e000      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x5fe>
 8003ebc:	4a24      	ldr	r2, [pc, #144]	@ (8003f50 <HAL_ADC_ConfigChannel+0x690>)
 8003ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7ff f8df 	bl	800308a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ecc:	e036      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a28      	ldr	r2, [pc, #160]	@ (8003f74 <HAL_ADC_ConfigChannel+0x6b4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d131      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x67c>
 8003ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d12c      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f5c <HAL_ADC_ConfigChannel+0x69c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d127      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <HAL_ADC_ConfigChannel+0x694>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x640>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a17      	ldr	r2, [pc, #92]	@ (8003f58 <HAL_ADC_ConfigChannel+0x698>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x644>
 8003f00:	4a18      	ldr	r2, [pc, #96]	@ (8003f64 <HAL_ADC_ConfigChannel+0x6a4>)
 8003f02:	e000      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x646>
 8003f04:	4a12      	ldr	r2, [pc, #72]	@ (8003f50 <HAL_ADC_ConfigChannel+0x690>)
 8003f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f7ff f8bb 	bl	800308a <LL_ADC_SetCommonPathInternalCh>
 8003f14:	e012      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f28:	e008      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	f043 0220 	orr.w	r2, r3, #32
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3784      	adds	r7, #132	@ 0x84
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd90      	pop	{r4, r7, pc}
 8003f50:	58026300 	.word	0x58026300
 8003f54:	40022000 	.word	0x40022000
 8003f58:	40022100 	.word	0x40022100
 8003f5c:	58026000 	.word	0x58026000
 8003f60:	cb840000 	.word	0xcb840000
 8003f64:	40022300 	.word	0x40022300
 8003f68:	24000000 	.word	0x24000000
 8003f6c:	053e2d63 	.word	0x053e2d63
 8003f70:	c7520000 	.word	0xc7520000
 8003f74:	cfb80000 	.word	0xcfb80000

08003f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff f9e1 	bl	800334c <LL_ADC_IsEnabled>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d16e      	bne.n	800406e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	4b38      	ldr	r3, [pc, #224]	@ (8004078 <ADC_Enable+0x100>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa2:	f043 0210 	orr.w	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e05a      	b.n	8004070 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff f9b0 	bl	8003324 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003fc4:	f7ff f836 	bl	8003034 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2b      	ldr	r2, [pc, #172]	@ (800407c <ADC_Enable+0x104>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <ADC_Enable+0x66>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a29      	ldr	r2, [pc, #164]	@ (8004080 <ADC_Enable+0x108>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <ADC_Enable+0x6a>
 8003fde:	4b29      	ldr	r3, [pc, #164]	@ (8004084 <ADC_Enable+0x10c>)
 8003fe0:	e000      	b.n	8003fe4 <ADC_Enable+0x6c>
 8003fe2:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <ADC_Enable+0x110>)
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff f941 	bl	800326c <LL_ADC_GetMultimode>
 8003fea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a23      	ldr	r2, [pc, #140]	@ (8004080 <ADC_Enable+0x108>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d002      	beq.n	8003ffc <ADC_Enable+0x84>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	e000      	b.n	8003ffe <ADC_Enable+0x86>
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800407c <ADC_Enable+0x104>)
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	4293      	cmp	r3, r2
 8004004:	d02c      	beq.n	8004060 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d130      	bne.n	800406e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800400c:	e028      	b.n	8004060 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff f99a 	bl	800334c <LL_ADC_IsEnabled>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d104      	bne.n	8004028 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff f97e 	bl	8003324 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004028:	f7ff f804 	bl	8003034 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d914      	bls.n	8004060 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d00d      	beq.n	8004060 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	f043 0210 	orr.w	r2, r3, #16
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e007      	b.n	8004070 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d1cf      	bne.n	800400e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	8000003f 	.word	0x8000003f
 800407c:	40022000 	.word	0x40022000
 8004080:	40022100 	.word	0x40022100
 8004084:	40022300 	.word	0x40022300
 8004088:	58026300 	.word	0x58026300

0800408c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a7a      	ldr	r2, [pc, #488]	@ (8004284 <ADC_ConfigureBoostMode+0x1f8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <ADC_ConfigureBoostMode+0x1c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a79      	ldr	r2, [pc, #484]	@ (8004288 <ADC_ConfigureBoostMode+0x1fc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d109      	bne.n	80040bc <ADC_ConfigureBoostMode+0x30>
 80040a8:	4b78      	ldr	r3, [pc, #480]	@ (800428c <ADC_ConfigureBoostMode+0x200>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	e008      	b.n	80040ce <ADC_ConfigureBoostMode+0x42>
 80040bc:	4b74      	ldr	r3, [pc, #464]	@ (8004290 <ADC_ConfigureBoostMode+0x204>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01c      	beq.n	800410c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80040d2:	f002 facd 	bl	8006670 <HAL_RCC_GetHCLKFreq>
 80040d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040e0:	d010      	beq.n	8004104 <ADC_ConfigureBoostMode+0x78>
 80040e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040e6:	d873      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ec:	d002      	beq.n	80040f4 <ADC_ConfigureBoostMode+0x68>
 80040ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040f2:	d16d      	bne.n	80041d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	60fb      	str	r3, [r7, #12]
        break;
 8004102:	e068      	b.n	80041d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	60fb      	str	r3, [r7, #12]
        break;
 800410a:	e064      	b.n	80041d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800410c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	f003 fd12 	bl	8007b3c <HAL_RCCEx_GetPeriphCLKFreq>
 8004118:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004122:	d051      	beq.n	80041c8 <ADC_ConfigureBoostMode+0x13c>
 8004124:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004128:	d854      	bhi.n	80041d4 <ADC_ConfigureBoostMode+0x148>
 800412a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800412e:	d047      	beq.n	80041c0 <ADC_ConfigureBoostMode+0x134>
 8004130:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004134:	d84e      	bhi.n	80041d4 <ADC_ConfigureBoostMode+0x148>
 8004136:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800413a:	d03d      	beq.n	80041b8 <ADC_ConfigureBoostMode+0x12c>
 800413c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004140:	d848      	bhi.n	80041d4 <ADC_ConfigureBoostMode+0x148>
 8004142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004146:	d033      	beq.n	80041b0 <ADC_ConfigureBoostMode+0x124>
 8004148:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800414c:	d842      	bhi.n	80041d4 <ADC_ConfigureBoostMode+0x148>
 800414e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004152:	d029      	beq.n	80041a8 <ADC_ConfigureBoostMode+0x11c>
 8004154:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004158:	d83c      	bhi.n	80041d4 <ADC_ConfigureBoostMode+0x148>
 800415a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800415e:	d01a      	beq.n	8004196 <ADC_ConfigureBoostMode+0x10a>
 8004160:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004164:	d836      	bhi.n	80041d4 <ADC_ConfigureBoostMode+0x148>
 8004166:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800416a:	d014      	beq.n	8004196 <ADC_ConfigureBoostMode+0x10a>
 800416c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004170:	d830      	bhi.n	80041d4 <ADC_ConfigureBoostMode+0x148>
 8004172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004176:	d00e      	beq.n	8004196 <ADC_ConfigureBoostMode+0x10a>
 8004178:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800417c:	d82a      	bhi.n	80041d4 <ADC_ConfigureBoostMode+0x148>
 800417e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004182:	d008      	beq.n	8004196 <ADC_ConfigureBoostMode+0x10a>
 8004184:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004188:	d824      	bhi.n	80041d4 <ADC_ConfigureBoostMode+0x148>
 800418a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800418e:	d002      	beq.n	8004196 <ADC_ConfigureBoostMode+0x10a>
 8004190:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004194:	d11e      	bne.n	80041d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	0c9b      	lsrs	r3, r3, #18
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	60fb      	str	r3, [r7, #12]
        break;
 80041a6:	e016      	b.n	80041d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]
        break;
 80041ae:	e012      	b.n	80041d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	60fb      	str	r3, [r7, #12]
        break;
 80041b6:	e00e      	b.n	80041d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	60fb      	str	r3, [r7, #12]
        break;
 80041be:	e00a      	b.n	80041d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	09db      	lsrs	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
        break;
 80041c6:	e006      	b.n	80041d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	60fb      	str	r3, [r7, #12]
        break;
 80041ce:	e002      	b.n	80041d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80041d0:	bf00      	nop
 80041d2:	e000      	b.n	80041d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80041d4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80041d6:	f7fe ff39 	bl	800304c <HAL_GetREVID>
 80041da:	4603      	mov	r3, r0
 80041dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d815      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004294 <ADC_ConfigureBoostMode+0x208>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d908      	bls.n	80041fe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80041fc:	e03e      	b.n	800427c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800420c:	609a      	str	r2, [r3, #8]
}
 800420e:	e035      	b.n	800427c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	085b      	lsrs	r3, r3, #1
 8004214:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a1f      	ldr	r2, [pc, #124]	@ (8004298 <ADC_ConfigureBoostMode+0x20c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d808      	bhi.n	8004230 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800422c:	609a      	str	r2, [r3, #8]
}
 800422e:	e025      	b.n	800427c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a1a      	ldr	r2, [pc, #104]	@ (800429c <ADC_ConfigureBoostMode+0x210>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d80a      	bhi.n	800424e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	e016      	b.n	800427c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a13      	ldr	r2, [pc, #76]	@ (80042a0 <ADC_ConfigureBoostMode+0x214>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d80a      	bhi.n	800426c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004268:	609a      	str	r2, [r3, #8]
}
 800426a:	e007      	b.n	800427c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40022000 	.word	0x40022000
 8004288:	40022100 	.word	0x40022100
 800428c:	40022300 	.word	0x40022300
 8004290:	58026300 	.word	0x58026300
 8004294:	01312d00 	.word	0x01312d00
 8004298:	005f5e10 	.word	0x005f5e10
 800429c:	00bebc20 	.word	0x00bebc20
 80042a0:	017d7840 	.word	0x017d7840

080042a4 <LL_ADC_IsEnabled>:
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <LL_ADC_IsEnabled+0x18>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <LL_ADC_IsEnabled+0x1a>
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <LL_ADC_REG_IsConversionOngoing>:
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d101      	bne.n	80042e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b09f      	sub	sp, #124	@ 0x7c
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800430a:	2302      	movs	r3, #2
 800430c:	e0be      	b.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004316:	2300      	movs	r3, #0
 8004318:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800431a:	2300      	movs	r3, #0
 800431c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a5c      	ldr	r2, [pc, #368]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d102      	bne.n	800432e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004328:	4b5b      	ldr	r3, [pc, #364]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	e001      	b.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e09d      	b.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff ffb9 	bl	80042ca <LL_ADC_REG_IsConversionOngoing>
 8004358:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ffb3 	bl	80042ca <LL_ADC_REG_IsConversionOngoing>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d17f      	bne.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800436a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800436c:	2b00      	cmp	r3, #0
 800436e:	d17c      	bne.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a47      	ldr	r2, [pc, #284]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a46      	ldr	r2, [pc, #280]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004384:	4b45      	ldr	r3, [pc, #276]	@ (800449c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004386:	e000      	b.n	800438a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004388:	4b45      	ldr	r3, [pc, #276]	@ (80044a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800438a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d039      	beq.n	8004408 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a3a      	ldr	r2, [pc, #232]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a38      	ldr	r2, [pc, #224]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10e      	bne.n	80043d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80043ba:	4836      	ldr	r0, [pc, #216]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043bc:	f7ff ff72 	bl	80042a4 <LL_ADC_IsEnabled>
 80043c0:	4604      	mov	r4, r0
 80043c2:	4835      	ldr	r0, [pc, #212]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043c4:	f7ff ff6e 	bl	80042a4 <LL_ADC_IsEnabled>
 80043c8:	4603      	mov	r3, r0
 80043ca:	4323      	orrs	r3, r4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e008      	b.n	80043ea <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80043d8:	4832      	ldr	r0, [pc, #200]	@ (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80043da:	f7ff ff63 	bl	80042a4 <LL_ADC_IsEnabled>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d047      	beq.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	6811      	ldr	r1, [r2, #0]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	6892      	ldr	r2, [r2, #8]
 80043fe:	430a      	orrs	r2, r1
 8004400:	431a      	orrs	r2, r3
 8004402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004404:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004406:	e03a      	b.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004412:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1e      	ldr	r2, [pc, #120]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1d      	ldr	r2, [pc, #116]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d10e      	bne.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004428:	481a      	ldr	r0, [pc, #104]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800442a:	f7ff ff3b 	bl	80042a4 <LL_ADC_IsEnabled>
 800442e:	4604      	mov	r4, r0
 8004430:	4819      	ldr	r0, [pc, #100]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004432:	f7ff ff37 	bl	80042a4 <LL_ADC_IsEnabled>
 8004436:	4603      	mov	r3, r0
 8004438:	4323      	orrs	r3, r4
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf0c      	ite	eq
 800443e:	2301      	moveq	r3, #1
 8004440:	2300      	movne	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	e008      	b.n	8004458 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004446:	4817      	ldr	r0, [pc, #92]	@ (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004448:	f7ff ff2c 	bl	80042a4 <LL_ADC_IsEnabled>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d010      	beq.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800445c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004462:	4013      	ands	r3, r2
 8004464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004466:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004468:	e009      	b.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446e:	f043 0220 	orr.w	r2, r3, #32
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800447c:	e000      	b.n	8004480 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800447e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004488:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800448c:	4618      	mov	r0, r3
 800448e:	377c      	adds	r7, #124	@ 0x7c
 8004490:	46bd      	mov	sp, r7
 8004492:	bd90      	pop	{r4, r7, pc}
 8004494:	40022000 	.word	0x40022000
 8004498:	40022100 	.word	0x40022100
 800449c:	40022300 	.word	0x40022300
 80044a0:	58026300 	.word	0x58026300
 80044a4:	58026000 	.word	0x58026000
 80044a8:	fffff0e0 	.word	0xfffff0e0

080044ac <__NVIC_SetPriorityGrouping>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <__NVIC_SetPriorityGrouping+0x40>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044c8:	4013      	ands	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044d4:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <__NVIC_SetPriorityGrouping+0x44>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044da:	4a04      	ldr	r2, [pc, #16]	@ (80044ec <__NVIC_SetPriorityGrouping+0x40>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	60d3      	str	r3, [r2, #12]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00
 80044f0:	05fa0000 	.word	0x05fa0000

080044f4 <__NVIC_GetPriorityGrouping>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f8:	4b04      	ldr	r3, [pc, #16]	@ (800450c <__NVIC_GetPriorityGrouping+0x18>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	f003 0307 	and.w	r3, r3, #7
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <__NVIC_EnableIRQ>:
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800451a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	db0b      	blt.n	800453a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	4907      	ldr	r1, [pc, #28]	@ (8004548 <__NVIC_EnableIRQ+0x38>)
 800452a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2001      	movs	r0, #1
 8004532:	fa00 f202 	lsl.w	r2, r0, r2
 8004536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	e000e100 	.word	0xe000e100

0800454c <__NVIC_SetPriority>:
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db0a      	blt.n	8004576 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	490c      	ldr	r1, [pc, #48]	@ (8004598 <__NVIC_SetPriority+0x4c>)
 8004566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	440b      	add	r3, r1
 8004570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004574:	e00a      	b.n	800458c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4908      	ldr	r1, [pc, #32]	@ (800459c <__NVIC_SetPriority+0x50>)
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	3b04      	subs	r3, #4
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	440b      	add	r3, r1
 800458a:	761a      	strb	r2, [r3, #24]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000e100 	.word	0xe000e100
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <NVIC_EncodePriority>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	@ 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f1c3 0307 	rsb	r3, r3, #7
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	bf28      	it	cs
 80045be:	2304      	movcs	r3, #4
 80045c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	d902      	bls.n	80045d0 <NVIC_EncodePriority+0x30>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3b03      	subs	r3, #3
 80045ce:	e000      	b.n	80045d2 <NVIC_EncodePriority+0x32>
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43da      	mvns	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	401a      	ands	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	43d9      	mvns	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	4313      	orrs	r3, r2
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3724      	adds	r7, #36	@ 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004618:	d301      	bcc.n	800461e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800461a:	2301      	movs	r3, #1
 800461c:	e00f      	b.n	800463e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461e:	4a0a      	ldr	r2, [pc, #40]	@ (8004648 <SysTick_Config+0x40>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004626:	210f      	movs	r1, #15
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	f7ff ff8e 	bl	800454c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <SysTick_Config+0x40>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004636:	4b04      	ldr	r3, [pc, #16]	@ (8004648 <SysTick_Config+0x40>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	e000e010 	.word	0xe000e010

0800464c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff29 	bl	80044ac <__NVIC_SetPriorityGrouping>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b086      	sub	sp, #24
 8004666:	af00      	add	r7, sp, #0
 8004668:	4603      	mov	r3, r0
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004670:	f7ff ff40 	bl	80044f4 <__NVIC_GetPriorityGrouping>
 8004674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff ff90 	bl	80045a0 <NVIC_EncodePriority>
 8004680:	4602      	mov	r2, r0
 8004682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff5f 	bl	800454c <__NVIC_SetPriority>
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff33 	bl	8004510 <__NVIC_EnableIRQ>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffa4 	bl	8004608 <SysTick_Config>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80046d0:	f3bf 8f5f 	dmb	sy
}
 80046d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80046d6:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <HAL_MPU_Disable+0x28>)
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	4a06      	ldr	r2, [pc, #24]	@ (80046f4 <HAL_MPU_Disable+0x28>)
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80046e2:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_MPU_Disable+0x2c>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	605a      	str	r2, [r3, #4]
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000ed00 	.word	0xe000ed00
 80046f8:	e000ed90 	.word	0xe000ed90

080046fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004704:	4a0b      	ldr	r2, [pc, #44]	@ (8004734 <HAL_MPU_Enable+0x38>)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800470e:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <HAL_MPU_Enable+0x3c>)
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	4a09      	ldr	r2, [pc, #36]	@ (8004738 <HAL_MPU_Enable+0x3c>)
 8004714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004718:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800471a:	f3bf 8f4f 	dsb	sy
}
 800471e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004720:	f3bf 8f6f 	isb	sy
}
 8004724:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	e000ed90 	.word	0xe000ed90
 8004738:	e000ed00 	.word	0xe000ed00

0800473c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	785a      	ldrb	r2, [r3, #1]
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <HAL_MPU_ConfigRegion+0x7c>)
 800474a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800474c:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <HAL_MPU_ConfigRegion+0x7c>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <HAL_MPU_ConfigRegion+0x7c>)
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004758:	4a17      	ldr	r2, [pc, #92]	@ (80047b8 <HAL_MPU_ConfigRegion+0x7c>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	7b1b      	ldrb	r3, [r3, #12]
 8004764:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	7adb      	ldrb	r3, [r3, #11]
 800476a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800476c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	7a9b      	ldrb	r3, [r3, #10]
 8004772:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	7b5b      	ldrb	r3, [r3, #13]
 800477a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800477c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	7b9b      	ldrb	r3, [r3, #14]
 8004782:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004784:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7bdb      	ldrb	r3, [r3, #15]
 800478a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800478c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	7a5b      	ldrb	r3, [r3, #9]
 8004792:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004794:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	7a1b      	ldrb	r3, [r3, #8]
 800479a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800479c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	7812      	ldrb	r2, [r2, #0]
 80047a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047a4:	4a04      	ldr	r2, [pc, #16]	@ (80047b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80047a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047a8:	6113      	str	r3, [r2, #16]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000ed90 	.word	0xe000ed90

080047bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80047c4:	f7fe fc36 	bl	8003034 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e2dc      	b.n	8004d8e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d008      	beq.n	80047f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2280      	movs	r2, #128	@ 0x80
 80047e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e2cd      	b.n	8004d8e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a76      	ldr	r2, [pc, #472]	@ (80049d0 <HAL_DMA_Abort+0x214>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d04a      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a74      	ldr	r2, [pc, #464]	@ (80049d4 <HAL_DMA_Abort+0x218>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d045      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a73      	ldr	r2, [pc, #460]	@ (80049d8 <HAL_DMA_Abort+0x21c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d040      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a71      	ldr	r2, [pc, #452]	@ (80049dc <HAL_DMA_Abort+0x220>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d03b      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a70      	ldr	r2, [pc, #448]	@ (80049e0 <HAL_DMA_Abort+0x224>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d036      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a6e      	ldr	r2, [pc, #440]	@ (80049e4 <HAL_DMA_Abort+0x228>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d031      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a6d      	ldr	r2, [pc, #436]	@ (80049e8 <HAL_DMA_Abort+0x22c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d02c      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a6b      	ldr	r2, [pc, #428]	@ (80049ec <HAL_DMA_Abort+0x230>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d027      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a6a      	ldr	r2, [pc, #424]	@ (80049f0 <HAL_DMA_Abort+0x234>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d022      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a68      	ldr	r2, [pc, #416]	@ (80049f4 <HAL_DMA_Abort+0x238>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01d      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a67      	ldr	r2, [pc, #412]	@ (80049f8 <HAL_DMA_Abort+0x23c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d018      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a65      	ldr	r2, [pc, #404]	@ (80049fc <HAL_DMA_Abort+0x240>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a64      	ldr	r2, [pc, #400]	@ (8004a00 <HAL_DMA_Abort+0x244>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00e      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a62      	ldr	r2, [pc, #392]	@ (8004a04 <HAL_DMA_Abort+0x248>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d009      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a61      	ldr	r2, [pc, #388]	@ (8004a08 <HAL_DMA_Abort+0x24c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <HAL_DMA_Abort+0xd6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a5f      	ldr	r2, [pc, #380]	@ (8004a0c <HAL_DMA_Abort+0x250>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d101      	bne.n	8004896 <HAL_DMA_Abort+0xda>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_DMA_Abort+0xdc>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 021e 	bic.w	r2, r2, #30
 80048aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e00a      	b.n	80048da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 020e 	bic.w	r2, r2, #14
 80048d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3c      	ldr	r2, [pc, #240]	@ (80049d0 <HAL_DMA_Abort+0x214>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d072      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3a      	ldr	r2, [pc, #232]	@ (80049d4 <HAL_DMA_Abort+0x218>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d06d      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a39      	ldr	r2, [pc, #228]	@ (80049d8 <HAL_DMA_Abort+0x21c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d068      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a37      	ldr	r2, [pc, #220]	@ (80049dc <HAL_DMA_Abort+0x220>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d063      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a36      	ldr	r2, [pc, #216]	@ (80049e0 <HAL_DMA_Abort+0x224>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d05e      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a34      	ldr	r2, [pc, #208]	@ (80049e4 <HAL_DMA_Abort+0x228>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d059      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a33      	ldr	r2, [pc, #204]	@ (80049e8 <HAL_DMA_Abort+0x22c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d054      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a31      	ldr	r2, [pc, #196]	@ (80049ec <HAL_DMA_Abort+0x230>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d04f      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a30      	ldr	r2, [pc, #192]	@ (80049f0 <HAL_DMA_Abort+0x234>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d04a      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2e      	ldr	r2, [pc, #184]	@ (80049f4 <HAL_DMA_Abort+0x238>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d045      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2d      	ldr	r2, [pc, #180]	@ (80049f8 <HAL_DMA_Abort+0x23c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d040      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2b      	ldr	r2, [pc, #172]	@ (80049fc <HAL_DMA_Abort+0x240>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d03b      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2a      	ldr	r2, [pc, #168]	@ (8004a00 <HAL_DMA_Abort+0x244>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d036      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a28      	ldr	r2, [pc, #160]	@ (8004a04 <HAL_DMA_Abort+0x248>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d031      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a27      	ldr	r2, [pc, #156]	@ (8004a08 <HAL_DMA_Abort+0x24c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d02c      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a25      	ldr	r2, [pc, #148]	@ (8004a0c <HAL_DMA_Abort+0x250>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d027      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a24      	ldr	r2, [pc, #144]	@ (8004a10 <HAL_DMA_Abort+0x254>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d022      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a22      	ldr	r2, [pc, #136]	@ (8004a14 <HAL_DMA_Abort+0x258>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01d      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a21      	ldr	r2, [pc, #132]	@ (8004a18 <HAL_DMA_Abort+0x25c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d018      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a1c <HAL_DMA_Abort+0x260>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a20 <HAL_DMA_Abort+0x264>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00e      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a24 <HAL_DMA_Abort+0x268>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d009      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <HAL_DMA_Abort+0x26c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_DMA_Abort+0x20e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a19      	ldr	r2, [pc, #100]	@ (8004a2c <HAL_DMA_Abort+0x270>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d132      	bne.n	8004a30 <HAL_DMA_Abort+0x274>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e031      	b.n	8004a32 <HAL_DMA_Abort+0x276>
 80049ce:	bf00      	nop
 80049d0:	40020010 	.word	0x40020010
 80049d4:	40020028 	.word	0x40020028
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020058 	.word	0x40020058
 80049e0:	40020070 	.word	0x40020070
 80049e4:	40020088 	.word	0x40020088
 80049e8:	400200a0 	.word	0x400200a0
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	40020440 	.word	0x40020440
 80049fc:	40020458 	.word	0x40020458
 8004a00:	40020470 	.word	0x40020470
 8004a04:	40020488 	.word	0x40020488
 8004a08:	400204a0 	.word	0x400204a0
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	58025408 	.word	0x58025408
 8004a14:	5802541c 	.word	0x5802541c
 8004a18:	58025430 	.word	0x58025430
 8004a1c:	58025444 	.word	0x58025444
 8004a20:	58025458 	.word	0x58025458
 8004a24:	5802546c 	.word	0x5802546c
 8004a28:	58025480 	.word	0x58025480
 8004a2c:	58025494 	.word	0x58025494
 8004a30:	2300      	movs	r3, #0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a44:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6d      	ldr	r2, [pc, #436]	@ (8004c00 <HAL_DMA_Abort+0x444>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d04a      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a6b      	ldr	r2, [pc, #428]	@ (8004c04 <HAL_DMA_Abort+0x448>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d045      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a6a      	ldr	r2, [pc, #424]	@ (8004c08 <HAL_DMA_Abort+0x44c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d040      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a68      	ldr	r2, [pc, #416]	@ (8004c0c <HAL_DMA_Abort+0x450>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d03b      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a67      	ldr	r2, [pc, #412]	@ (8004c10 <HAL_DMA_Abort+0x454>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d036      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a65      	ldr	r2, [pc, #404]	@ (8004c14 <HAL_DMA_Abort+0x458>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d031      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a64      	ldr	r2, [pc, #400]	@ (8004c18 <HAL_DMA_Abort+0x45c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d02c      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a62      	ldr	r2, [pc, #392]	@ (8004c1c <HAL_DMA_Abort+0x460>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d027      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a61      	ldr	r2, [pc, #388]	@ (8004c20 <HAL_DMA_Abort+0x464>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d022      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a5f      	ldr	r2, [pc, #380]	@ (8004c24 <HAL_DMA_Abort+0x468>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01d      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a5e      	ldr	r2, [pc, #376]	@ (8004c28 <HAL_DMA_Abort+0x46c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d018      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a5c      	ldr	r2, [pc, #368]	@ (8004c2c <HAL_DMA_Abort+0x470>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a5b      	ldr	r2, [pc, #364]	@ (8004c30 <HAL_DMA_Abort+0x474>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a59      	ldr	r2, [pc, #356]	@ (8004c34 <HAL_DMA_Abort+0x478>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a58      	ldr	r2, [pc, #352]	@ (8004c38 <HAL_DMA_Abort+0x47c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_DMA_Abort+0x32a>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a56      	ldr	r2, [pc, #344]	@ (8004c3c <HAL_DMA_Abort+0x480>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d108      	bne.n	8004af8 <HAL_DMA_Abort+0x33c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e007      	b.n	8004b08 <HAL_DMA_Abort+0x34c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b08:	e013      	b.n	8004b32 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b0a:	f7fe fa93 	bl	8003034 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b05      	cmp	r3, #5
 8004b16:	d90c      	bls.n	8004b32 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2203      	movs	r2, #3
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e12d      	b.n	8004d8e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e5      	bne.n	8004b0a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2f      	ldr	r2, [pc, #188]	@ (8004c00 <HAL_DMA_Abort+0x444>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d04a      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004c04 <HAL_DMA_Abort+0x448>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d045      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2c      	ldr	r2, [pc, #176]	@ (8004c08 <HAL_DMA_Abort+0x44c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d040      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2a      	ldr	r2, [pc, #168]	@ (8004c0c <HAL_DMA_Abort+0x450>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d03b      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a29      	ldr	r2, [pc, #164]	@ (8004c10 <HAL_DMA_Abort+0x454>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d036      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a27      	ldr	r2, [pc, #156]	@ (8004c14 <HAL_DMA_Abort+0x458>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d031      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a26      	ldr	r2, [pc, #152]	@ (8004c18 <HAL_DMA_Abort+0x45c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d02c      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a24      	ldr	r2, [pc, #144]	@ (8004c1c <HAL_DMA_Abort+0x460>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d027      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a23      	ldr	r2, [pc, #140]	@ (8004c20 <HAL_DMA_Abort+0x464>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d022      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a21      	ldr	r2, [pc, #132]	@ (8004c24 <HAL_DMA_Abort+0x468>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01d      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a20      	ldr	r2, [pc, #128]	@ (8004c28 <HAL_DMA_Abort+0x46c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d018      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c2c <HAL_DMA_Abort+0x470>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1d      	ldr	r2, [pc, #116]	@ (8004c30 <HAL_DMA_Abort+0x474>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c34 <HAL_DMA_Abort+0x478>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1a      	ldr	r2, [pc, #104]	@ (8004c38 <HAL_DMA_Abort+0x47c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_DMA_Abort+0x422>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a18      	ldr	r2, [pc, #96]	@ (8004c3c <HAL_DMA_Abort+0x480>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_DMA_Abort+0x426>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <HAL_DMA_Abort+0x428>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d02b      	beq.n	8004c40 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	223f      	movs	r2, #63	@ 0x3f
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	e02a      	b.n	8004c56 <HAL_DMA_Abort+0x49a>
 8004c00:	40020010 	.word	0x40020010
 8004c04:	40020028 	.word	0x40020028
 8004c08:	40020040 	.word	0x40020040
 8004c0c:	40020058 	.word	0x40020058
 8004c10:	40020070 	.word	0x40020070
 8004c14:	40020088 	.word	0x40020088
 8004c18:	400200a0 	.word	0x400200a0
 8004c1c:	400200b8 	.word	0x400200b8
 8004c20:	40020410 	.word	0x40020410
 8004c24:	40020428 	.word	0x40020428
 8004c28:	40020440 	.word	0x40020440
 8004c2c:	40020458 	.word	0x40020458
 8004c30:	40020470 	.word	0x40020470
 8004c34:	40020488 	.word	0x40020488
 8004c38:	400204a0 	.word	0x400204a0
 8004c3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c44:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2201      	movs	r2, #1
 8004c50:	409a      	lsls	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a4f      	ldr	r2, [pc, #316]	@ (8004d98 <HAL_DMA_Abort+0x5dc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d072      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a4d      	ldr	r2, [pc, #308]	@ (8004d9c <HAL_DMA_Abort+0x5e0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d06d      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8004da0 <HAL_DMA_Abort+0x5e4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d068      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a4a      	ldr	r2, [pc, #296]	@ (8004da4 <HAL_DMA_Abort+0x5e8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d063      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a49      	ldr	r2, [pc, #292]	@ (8004da8 <HAL_DMA_Abort+0x5ec>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d05e      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a47      	ldr	r2, [pc, #284]	@ (8004dac <HAL_DMA_Abort+0x5f0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d059      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a46      	ldr	r2, [pc, #280]	@ (8004db0 <HAL_DMA_Abort+0x5f4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d054      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a44      	ldr	r2, [pc, #272]	@ (8004db4 <HAL_DMA_Abort+0x5f8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d04f      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a43      	ldr	r2, [pc, #268]	@ (8004db8 <HAL_DMA_Abort+0x5fc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d04a      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a41      	ldr	r2, [pc, #260]	@ (8004dbc <HAL_DMA_Abort+0x600>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d045      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a40      	ldr	r2, [pc, #256]	@ (8004dc0 <HAL_DMA_Abort+0x604>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d040      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a3e      	ldr	r2, [pc, #248]	@ (8004dc4 <HAL_DMA_Abort+0x608>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d03b      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a3d      	ldr	r2, [pc, #244]	@ (8004dc8 <HAL_DMA_Abort+0x60c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d036      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8004dcc <HAL_DMA_Abort+0x610>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d031      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8004dd0 <HAL_DMA_Abort+0x614>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d02c      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a38      	ldr	r2, [pc, #224]	@ (8004dd4 <HAL_DMA_Abort+0x618>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d027      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a37      	ldr	r2, [pc, #220]	@ (8004dd8 <HAL_DMA_Abort+0x61c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d022      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a35      	ldr	r2, [pc, #212]	@ (8004ddc <HAL_DMA_Abort+0x620>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01d      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a34      	ldr	r2, [pc, #208]	@ (8004de0 <HAL_DMA_Abort+0x624>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d018      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a32      	ldr	r2, [pc, #200]	@ (8004de4 <HAL_DMA_Abort+0x628>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a31      	ldr	r2, [pc, #196]	@ (8004de8 <HAL_DMA_Abort+0x62c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00e      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004dec <HAL_DMA_Abort+0x630>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2e      	ldr	r2, [pc, #184]	@ (8004df0 <HAL_DMA_Abort+0x634>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_DMA_Abort+0x58a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2c      	ldr	r2, [pc, #176]	@ (8004df4 <HAL_DMA_Abort+0x638>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d101      	bne.n	8004d4a <HAL_DMA_Abort+0x58e>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <HAL_DMA_Abort+0x590>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d015      	beq.n	8004d7c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d58:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d70:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d7a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40020010 	.word	0x40020010
 8004d9c:	40020028 	.word	0x40020028
 8004da0:	40020040 	.word	0x40020040
 8004da4:	40020058 	.word	0x40020058
 8004da8:	40020070 	.word	0x40020070
 8004dac:	40020088 	.word	0x40020088
 8004db0:	400200a0 	.word	0x400200a0
 8004db4:	400200b8 	.word	0x400200b8
 8004db8:	40020410 	.word	0x40020410
 8004dbc:	40020428 	.word	0x40020428
 8004dc0:	40020440 	.word	0x40020440
 8004dc4:	40020458 	.word	0x40020458
 8004dc8:	40020470 	.word	0x40020470
 8004dcc:	40020488 	.word	0x40020488
 8004dd0:	400204a0 	.word	0x400204a0
 8004dd4:	400204b8 	.word	0x400204b8
 8004dd8:	58025408 	.word	0x58025408
 8004ddc:	5802541c 	.word	0x5802541c
 8004de0:	58025430 	.word	0x58025430
 8004de4:	58025444 	.word	0x58025444
 8004de8:	58025458 	.word	0x58025458
 8004dec:	5802546c 	.word	0x5802546c
 8004df0:	58025480 	.word	0x58025480
 8004df4:	58025494 	.word	0x58025494

08004df8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e237      	b.n	800527a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d004      	beq.n	8004e20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2280      	movs	r2, #128	@ 0x80
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e22c      	b.n	800527a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a5c      	ldr	r2, [pc, #368]	@ (8004f98 <HAL_DMA_Abort_IT+0x1a0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d04a      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8004f9c <HAL_DMA_Abort_IT+0x1a4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d045      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a59      	ldr	r2, [pc, #356]	@ (8004fa0 <HAL_DMA_Abort_IT+0x1a8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d040      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a58      	ldr	r2, [pc, #352]	@ (8004fa4 <HAL_DMA_Abort_IT+0x1ac>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d03b      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a56      	ldr	r2, [pc, #344]	@ (8004fa8 <HAL_DMA_Abort_IT+0x1b0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d036      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a55      	ldr	r2, [pc, #340]	@ (8004fac <HAL_DMA_Abort_IT+0x1b4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d031      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a53      	ldr	r2, [pc, #332]	@ (8004fb0 <HAL_DMA_Abort_IT+0x1b8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02c      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a52      	ldr	r2, [pc, #328]	@ (8004fb4 <HAL_DMA_Abort_IT+0x1bc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d027      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a50      	ldr	r2, [pc, #320]	@ (8004fb8 <HAL_DMA_Abort_IT+0x1c0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d022      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a4f      	ldr	r2, [pc, #316]	@ (8004fbc <HAL_DMA_Abort_IT+0x1c4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d01d      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a4d      	ldr	r2, [pc, #308]	@ (8004fc0 <HAL_DMA_Abort_IT+0x1c8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d018      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a4c      	ldr	r2, [pc, #304]	@ (8004fc4 <HAL_DMA_Abort_IT+0x1cc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc8 <HAL_DMA_Abort_IT+0x1d0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a49      	ldr	r2, [pc, #292]	@ (8004fcc <HAL_DMA_Abort_IT+0x1d4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a47      	ldr	r2, [pc, #284]	@ (8004fd0 <HAL_DMA_Abort_IT+0x1d8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a46      	ldr	r2, [pc, #280]	@ (8004fd4 <HAL_DMA_Abort_IT+0x1dc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DMA_Abort_IT+0xcc>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_DMA_Abort_IT+0xce>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 8086 	beq.w	8004fd8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8004f98 <HAL_DMA_Abort_IT+0x1a0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d04a      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8004f9c <HAL_DMA_Abort_IT+0x1a4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d045      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa0 <HAL_DMA_Abort_IT+0x1a8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d040      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa4 <HAL_DMA_Abort_IT+0x1ac>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d03b      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a29      	ldr	r2, [pc, #164]	@ (8004fa8 <HAL_DMA_Abort_IT+0x1b0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d036      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a28      	ldr	r2, [pc, #160]	@ (8004fac <HAL_DMA_Abort_IT+0x1b4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d031      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a26      	ldr	r2, [pc, #152]	@ (8004fb0 <HAL_DMA_Abort_IT+0x1b8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d02c      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a25      	ldr	r2, [pc, #148]	@ (8004fb4 <HAL_DMA_Abort_IT+0x1bc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d027      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a23      	ldr	r2, [pc, #140]	@ (8004fb8 <HAL_DMA_Abort_IT+0x1c0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d022      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a22      	ldr	r2, [pc, #136]	@ (8004fbc <HAL_DMA_Abort_IT+0x1c4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d01d      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	@ (8004fc0 <HAL_DMA_Abort_IT+0x1c8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d018      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc4 <HAL_DMA_Abort_IT+0x1cc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <HAL_DMA_Abort_IT+0x1d0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00e      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <HAL_DMA_Abort_IT+0x1d4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d009      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd0 <HAL_DMA_Abort_IT+0x1d8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x17c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a19      	ldr	r2, [pc, #100]	@ (8004fd4 <HAL_DMA_Abort_IT+0x1dc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d108      	bne.n	8004f86 <HAL_DMA_Abort_IT+0x18e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e178      	b.n	8005278 <HAL_DMA_Abort_IT+0x480>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e16f      	b.n	8005278 <HAL_DMA_Abort_IT+0x480>
 8004f98:	40020010 	.word	0x40020010
 8004f9c:	40020028 	.word	0x40020028
 8004fa0:	40020040 	.word	0x40020040
 8004fa4:	40020058 	.word	0x40020058
 8004fa8:	40020070 	.word	0x40020070
 8004fac:	40020088 	.word	0x40020088
 8004fb0:	400200a0 	.word	0x400200a0
 8004fb4:	400200b8 	.word	0x400200b8
 8004fb8:	40020410 	.word	0x40020410
 8004fbc:	40020428 	.word	0x40020428
 8004fc0:	40020440 	.word	0x40020440
 8004fc4:	40020458 	.word	0x40020458
 8004fc8:	40020470 	.word	0x40020470
 8004fcc:	40020488 	.word	0x40020488
 8004fd0:	400204a0 	.word	0x400204a0
 8004fd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 020e 	bic.w	r2, r2, #14
 8004fe6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a6c      	ldr	r2, [pc, #432]	@ (80051a0 <HAL_DMA_Abort_IT+0x3a8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d04a      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a6b      	ldr	r2, [pc, #428]	@ (80051a4 <HAL_DMA_Abort_IT+0x3ac>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d045      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a69      	ldr	r2, [pc, #420]	@ (80051a8 <HAL_DMA_Abort_IT+0x3b0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d040      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a68      	ldr	r2, [pc, #416]	@ (80051ac <HAL_DMA_Abort_IT+0x3b4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d03b      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a66      	ldr	r2, [pc, #408]	@ (80051b0 <HAL_DMA_Abort_IT+0x3b8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d036      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a65      	ldr	r2, [pc, #404]	@ (80051b4 <HAL_DMA_Abort_IT+0x3bc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d031      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a63      	ldr	r2, [pc, #396]	@ (80051b8 <HAL_DMA_Abort_IT+0x3c0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d02c      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a62      	ldr	r2, [pc, #392]	@ (80051bc <HAL_DMA_Abort_IT+0x3c4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d027      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a60      	ldr	r2, [pc, #384]	@ (80051c0 <HAL_DMA_Abort_IT+0x3c8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d022      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a5f      	ldr	r2, [pc, #380]	@ (80051c4 <HAL_DMA_Abort_IT+0x3cc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d01d      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5d      	ldr	r2, [pc, #372]	@ (80051c8 <HAL_DMA_Abort_IT+0x3d0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d018      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a5c      	ldr	r2, [pc, #368]	@ (80051cc <HAL_DMA_Abort_IT+0x3d4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a5a      	ldr	r2, [pc, #360]	@ (80051d0 <HAL_DMA_Abort_IT+0x3d8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00e      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a59      	ldr	r2, [pc, #356]	@ (80051d4 <HAL_DMA_Abort_IT+0x3dc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d009      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a57      	ldr	r2, [pc, #348]	@ (80051d8 <HAL_DMA_Abort_IT+0x3e0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <HAL_DMA_Abort_IT+0x290>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a56      	ldr	r2, [pc, #344]	@ (80051dc <HAL_DMA_Abort_IT+0x3e4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d108      	bne.n	800509a <HAL_DMA_Abort_IT+0x2a2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e007      	b.n	80050aa <HAL_DMA_Abort_IT+0x2b2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3c      	ldr	r2, [pc, #240]	@ (80051a0 <HAL_DMA_Abort_IT+0x3a8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d072      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a3a      	ldr	r2, [pc, #232]	@ (80051a4 <HAL_DMA_Abort_IT+0x3ac>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d06d      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a39      	ldr	r2, [pc, #228]	@ (80051a8 <HAL_DMA_Abort_IT+0x3b0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d068      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a37      	ldr	r2, [pc, #220]	@ (80051ac <HAL_DMA_Abort_IT+0x3b4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d063      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a36      	ldr	r2, [pc, #216]	@ (80051b0 <HAL_DMA_Abort_IT+0x3b8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d05e      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a34      	ldr	r2, [pc, #208]	@ (80051b4 <HAL_DMA_Abort_IT+0x3bc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d059      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a33      	ldr	r2, [pc, #204]	@ (80051b8 <HAL_DMA_Abort_IT+0x3c0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d054      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a31      	ldr	r2, [pc, #196]	@ (80051bc <HAL_DMA_Abort_IT+0x3c4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d04f      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a30      	ldr	r2, [pc, #192]	@ (80051c0 <HAL_DMA_Abort_IT+0x3c8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d04a      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2e      	ldr	r2, [pc, #184]	@ (80051c4 <HAL_DMA_Abort_IT+0x3cc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d045      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2d      	ldr	r2, [pc, #180]	@ (80051c8 <HAL_DMA_Abort_IT+0x3d0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d040      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a2b      	ldr	r2, [pc, #172]	@ (80051cc <HAL_DMA_Abort_IT+0x3d4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d03b      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a2a      	ldr	r2, [pc, #168]	@ (80051d0 <HAL_DMA_Abort_IT+0x3d8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d036      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a28      	ldr	r2, [pc, #160]	@ (80051d4 <HAL_DMA_Abort_IT+0x3dc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d031      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a27      	ldr	r2, [pc, #156]	@ (80051d8 <HAL_DMA_Abort_IT+0x3e0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d02c      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a25      	ldr	r2, [pc, #148]	@ (80051dc <HAL_DMA_Abort_IT+0x3e4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d027      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a24      	ldr	r2, [pc, #144]	@ (80051e0 <HAL_DMA_Abort_IT+0x3e8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a22      	ldr	r2, [pc, #136]	@ (80051e4 <HAL_DMA_Abort_IT+0x3ec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01d      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a21      	ldr	r2, [pc, #132]	@ (80051e8 <HAL_DMA_Abort_IT+0x3f0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d018      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1f      	ldr	r2, [pc, #124]	@ (80051ec <HAL_DMA_Abort_IT+0x3f4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1e      	ldr	r2, [pc, #120]	@ (80051f0 <HAL_DMA_Abort_IT+0x3f8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00e      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1c      	ldr	r2, [pc, #112]	@ (80051f4 <HAL_DMA_Abort_IT+0x3fc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d009      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1b      	ldr	r2, [pc, #108]	@ (80051f8 <HAL_DMA_Abort_IT+0x400>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d004      	beq.n	800519a <HAL_DMA_Abort_IT+0x3a2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a19      	ldr	r2, [pc, #100]	@ (80051fc <HAL_DMA_Abort_IT+0x404>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d132      	bne.n	8005200 <HAL_DMA_Abort_IT+0x408>
 800519a:	2301      	movs	r3, #1
 800519c:	e031      	b.n	8005202 <HAL_DMA_Abort_IT+0x40a>
 800519e:	bf00      	nop
 80051a0:	40020010 	.word	0x40020010
 80051a4:	40020028 	.word	0x40020028
 80051a8:	40020040 	.word	0x40020040
 80051ac:	40020058 	.word	0x40020058
 80051b0:	40020070 	.word	0x40020070
 80051b4:	40020088 	.word	0x40020088
 80051b8:	400200a0 	.word	0x400200a0
 80051bc:	400200b8 	.word	0x400200b8
 80051c0:	40020410 	.word	0x40020410
 80051c4:	40020428 	.word	0x40020428
 80051c8:	40020440 	.word	0x40020440
 80051cc:	40020458 	.word	0x40020458
 80051d0:	40020470 	.word	0x40020470
 80051d4:	40020488 	.word	0x40020488
 80051d8:	400204a0 	.word	0x400204a0
 80051dc:	400204b8 	.word	0x400204b8
 80051e0:	58025408 	.word	0x58025408
 80051e4:	5802541c 	.word	0x5802541c
 80051e8:	58025430 	.word	0x58025430
 80051ec:	58025444 	.word	0x58025444
 80051f0:	58025458 	.word	0x58025458
 80051f4:	5802546c 	.word	0x5802546c
 80051f8:	58025480 	.word	0x58025480
 80051fc:	58025494 	.word	0x58025494
 8005200:	2300      	movs	r3, #0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d028      	beq.n	8005258 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005210:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005214:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2201      	movs	r2, #1
 8005226:	409a      	lsls	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005234:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800524c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005256:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop

08005284 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	@ 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005292:	4b89      	ldr	r3, [pc, #548]	@ (80054b8 <HAL_GPIO_Init+0x234>)
 8005294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005296:	e194      	b.n	80055c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	2101      	movs	r1, #1
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	fa01 f303 	lsl.w	r3, r1, r3
 80052a4:	4013      	ands	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 8186 	beq.w	80055bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d005      	beq.n	80052c8 <HAL_GPIO_Init+0x44>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d130      	bne.n	800532a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	2203      	movs	r2, #3
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4013      	ands	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052fe:	2201      	movs	r2, #1
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	f003 0201 	and.w	r2, r3, #1
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b03      	cmp	r3, #3
 8005334:	d017      	beq.n	8005366 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	2203      	movs	r2, #3
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d123      	bne.n	80053ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	08da      	lsrs	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3208      	adds	r2, #8
 800537a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	220f      	movs	r2, #15
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	08da      	lsrs	r2, r3, #3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3208      	adds	r2, #8
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	2203      	movs	r2, #3
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f003 0203 	and.w	r2, r3, #3
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80e0 	beq.w	80055bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053fc:	4b2f      	ldr	r3, [pc, #188]	@ (80054bc <HAL_GPIO_Init+0x238>)
 80053fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005402:	4a2e      	ldr	r2, [pc, #184]	@ (80054bc <HAL_GPIO_Init+0x238>)
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800540c:	4b2b      	ldr	r3, [pc, #172]	@ (80054bc <HAL_GPIO_Init+0x238>)
 800540e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800541a:	4a29      	ldr	r2, [pc, #164]	@ (80054c0 <HAL_GPIO_Init+0x23c>)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	089b      	lsrs	r3, r3, #2
 8005420:	3302      	adds	r3, #2
 8005422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	220f      	movs	r2, #15
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43db      	mvns	r3, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4013      	ands	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <HAL_GPIO_Init+0x240>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d052      	beq.n	80054ec <HAL_GPIO_Init+0x268>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <HAL_GPIO_Init+0x244>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d031      	beq.n	80054b2 <HAL_GPIO_Init+0x22e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <HAL_GPIO_Init+0x248>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d02b      	beq.n	80054ae <HAL_GPIO_Init+0x22a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <HAL_GPIO_Init+0x24c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d025      	beq.n	80054aa <HAL_GPIO_Init+0x226>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1c      	ldr	r2, [pc, #112]	@ (80054d4 <HAL_GPIO_Init+0x250>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01f      	beq.n	80054a6 <HAL_GPIO_Init+0x222>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1b      	ldr	r2, [pc, #108]	@ (80054d8 <HAL_GPIO_Init+0x254>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d019      	beq.n	80054a2 <HAL_GPIO_Init+0x21e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1a      	ldr	r2, [pc, #104]	@ (80054dc <HAL_GPIO_Init+0x258>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <HAL_GPIO_Init+0x21a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a19      	ldr	r2, [pc, #100]	@ (80054e0 <HAL_GPIO_Init+0x25c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00d      	beq.n	800549a <HAL_GPIO_Init+0x216>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a18      	ldr	r2, [pc, #96]	@ (80054e4 <HAL_GPIO_Init+0x260>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <HAL_GPIO_Init+0x212>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a17      	ldr	r2, [pc, #92]	@ (80054e8 <HAL_GPIO_Init+0x264>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <HAL_GPIO_Init+0x20e>
 800548e:	2309      	movs	r3, #9
 8005490:	e02d      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 8005492:	230a      	movs	r3, #10
 8005494:	e02b      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 8005496:	2308      	movs	r3, #8
 8005498:	e029      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 800549a:	2307      	movs	r3, #7
 800549c:	e027      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 800549e:	2306      	movs	r3, #6
 80054a0:	e025      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054a2:	2305      	movs	r3, #5
 80054a4:	e023      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054a6:	2304      	movs	r3, #4
 80054a8:	e021      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054aa:	2303      	movs	r3, #3
 80054ac:	e01f      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e01d      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e01b      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054b6:	bf00      	nop
 80054b8:	58000080 	.word	0x58000080
 80054bc:	58024400 	.word	0x58024400
 80054c0:	58000400 	.word	0x58000400
 80054c4:	58020000 	.word	0x58020000
 80054c8:	58020400 	.word	0x58020400
 80054cc:	58020800 	.word	0x58020800
 80054d0:	58020c00 	.word	0x58020c00
 80054d4:	58021000 	.word	0x58021000
 80054d8:	58021400 	.word	0x58021400
 80054dc:	58021800 	.word	0x58021800
 80054e0:	58021c00 	.word	0x58021c00
 80054e4:	58022000 	.word	0x58022000
 80054e8:	58022400 	.word	0x58022400
 80054ec:	2300      	movs	r3, #0
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	f002 0203 	and.w	r2, r2, #3
 80054f4:	0092      	lsls	r2, r2, #2
 80054f6:	4093      	lsls	r3, r2
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054fe:	4938      	ldr	r1, [pc, #224]	@ (80055e0 <HAL_GPIO_Init+0x35c>)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	089b      	lsrs	r3, r3, #2
 8005504:	3302      	adds	r3, #2
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005532:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800553a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005560:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	43db      	mvns	r3, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4013      	ands	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3301      	adds	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f47f ae63 	bne.w	8005298 <HAL_GPIO_Init+0x14>
  }
}
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	3724      	adds	r7, #36	@ 0x24
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	58000400 	.word	0x58000400

080055e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	807b      	strh	r3, [r7, #2]
 80055f0:	4613      	mov	r3, r2
 80055f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055f4:	787b      	ldrb	r3, [r7, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055fa:	887a      	ldrh	r2, [r7, #2]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005600:	e003      	b.n	800560a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005602:	887b      	ldrh	r3, [r7, #2]
 8005604:	041a      	lsls	r2, r3, #16
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	619a      	str	r2, [r3, #24]
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	4603      	mov	r3, r0
 800561e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005624:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005630:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fb fac7 	bl	8000bd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005654:	4a08      	ldr	r2, [pc, #32]	@ (8005678 <HAL_HSEM_FastTake+0x2c>)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3320      	adds	r3, #32
 800565a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565e:	4a07      	ldr	r2, [pc, #28]	@ (800567c <HAL_HSEM_FastTake+0x30>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	58026400 	.word	0x58026400
 800567c:	80000300 	.word	0x80000300

08005680 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800568a:	4906      	ldr	r1, [pc, #24]	@ (80056a4 <HAL_HSEM_Release+0x24>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	58026400 	.word	0x58026400

080056a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80056b0:	4b29      	ldr	r3, [pc, #164]	@ (8005758 <HAL_PWREx_ConfigSupply+0xb0>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	2b06      	cmp	r3, #6
 80056ba:	d00a      	beq.n	80056d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056bc:	4b26      	ldr	r3, [pc, #152]	@ (8005758 <HAL_PWREx_ConfigSupply+0xb0>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d001      	beq.n	80056ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e040      	b.n	8005750 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e03e      	b.n	8005750 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056d2:	4b21      	ldr	r3, [pc, #132]	@ (8005758 <HAL_PWREx_ConfigSupply+0xb0>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80056da:	491f      	ldr	r1, [pc, #124]	@ (8005758 <HAL_PWREx_ConfigSupply+0xb0>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056e2:	f7fd fca7 	bl	8003034 <HAL_GetTick>
 80056e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056e8:	e009      	b.n	80056fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056ea:	f7fd fca3 	bl	8003034 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056f8:	d901      	bls.n	80056fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e028      	b.n	8005750 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056fe:	4b16      	ldr	r3, [pc, #88]	@ (8005758 <HAL_PWREx_ConfigSupply+0xb0>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570a:	d1ee      	bne.n	80056ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b1e      	cmp	r3, #30
 8005710:	d008      	beq.n	8005724 <HAL_PWREx_ConfigSupply+0x7c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b2e      	cmp	r3, #46	@ 0x2e
 8005716:	d005      	beq.n	8005724 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b1d      	cmp	r3, #29
 800571c:	d002      	beq.n	8005724 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b2d      	cmp	r3, #45	@ 0x2d
 8005722:	d114      	bne.n	800574e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005724:	f7fd fc86 	bl	8003034 <HAL_GetTick>
 8005728:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800572a:	e009      	b.n	8005740 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800572c:	f7fd fc82 	bl	8003034 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800573a:	d901      	bls.n	8005740 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e007      	b.n	8005750 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005740:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <HAL_PWREx_ConfigSupply+0xb0>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800574c:	d1ee      	bne.n	800572c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	58024800 	.word	0x58024800

0800575c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	@ 0x30
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f000 bc48 	b.w	8006000 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8088 	beq.w	800588e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800577e:	4b99      	ldr	r3, [pc, #612]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005788:	4b96      	ldr	r3, [pc, #600]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800578e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005790:	2b10      	cmp	r3, #16
 8005792:	d007      	beq.n	80057a4 <HAL_RCC_OscConfig+0x48>
 8005794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005796:	2b18      	cmp	r3, #24
 8005798:	d111      	bne.n	80057be <HAL_RCC_OscConfig+0x62>
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d10c      	bne.n	80057be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a4:	4b8f      	ldr	r3, [pc, #572]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d06d      	beq.n	800588c <HAL_RCC_OscConfig+0x130>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d169      	bne.n	800588c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f000 bc21 	b.w	8006000 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c6:	d106      	bne.n	80057d6 <HAL_RCC_OscConfig+0x7a>
 80057c8:	4b86      	ldr	r3, [pc, #536]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a85      	ldr	r2, [pc, #532]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80057ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e02e      	b.n	8005834 <HAL_RCC_OscConfig+0xd8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10c      	bne.n	80057f8 <HAL_RCC_OscConfig+0x9c>
 80057de:	4b81      	ldr	r3, [pc, #516]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a80      	ldr	r2, [pc, #512]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80057e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	4b7e      	ldr	r3, [pc, #504]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a7d      	ldr	r2, [pc, #500]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80057f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e01d      	b.n	8005834 <HAL_RCC_OscConfig+0xd8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005800:	d10c      	bne.n	800581c <HAL_RCC_OscConfig+0xc0>
 8005802:	4b78      	ldr	r3, [pc, #480]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a77      	ldr	r2, [pc, #476]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	4b75      	ldr	r3, [pc, #468]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a74      	ldr	r2, [pc, #464]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e00b      	b.n	8005834 <HAL_RCC_OscConfig+0xd8>
 800581c:	4b71      	ldr	r3, [pc, #452]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a70      	ldr	r2, [pc, #448]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	4b6e      	ldr	r3, [pc, #440]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6d      	ldr	r2, [pc, #436]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800582e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d013      	beq.n	8005864 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fd fbfa 	bl	8003034 <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005844:	f7fd fbf6 	bl	8003034 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	@ 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e3d4      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005856:	4b63      	ldr	r3, [pc, #396]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0xe8>
 8005862:	e014      	b.n	800588e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005864:	f7fd fbe6 	bl	8003034 <HAL_GetTick>
 8005868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800586c:	f7fd fbe2 	bl	8003034 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b64      	cmp	r3, #100	@ 0x64
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e3c0      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800587e:	4b59      	ldr	r3, [pc, #356]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f0      	bne.n	800586c <HAL_RCC_OscConfig+0x110>
 800588a:	e000      	b.n	800588e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 80ca 	beq.w	8005a30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800589c:	4b51      	ldr	r3, [pc, #324]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058a6:	4b4f      	ldr	r3, [pc, #316]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <HAL_RCC_OscConfig+0x166>
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	2b18      	cmp	r3, #24
 80058b6:	d156      	bne.n	8005966 <HAL_RCC_OscConfig+0x20a>
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d151      	bne.n	8005966 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058c2:	4b48      	ldr	r3, [pc, #288]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_RCC_OscConfig+0x17e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e392      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058da:	4b42      	ldr	r3, [pc, #264]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 0219 	bic.w	r2, r3, #25
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	493f      	ldr	r1, [pc, #252]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7fd fba2 	bl	8003034 <HAL_GetTick>
 80058f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f4:	f7fd fb9e 	bl	8003034 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e37c      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005906:	4b37      	ldr	r3, [pc, #220]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005912:	f7fd fb9b 	bl	800304c <HAL_GetREVID>
 8005916:	4603      	mov	r3, r0
 8005918:	f241 0203 	movw	r2, #4099	@ 0x1003
 800591c:	4293      	cmp	r3, r2
 800591e:	d817      	bhi.n	8005950 <HAL_RCC_OscConfig+0x1f4>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b40      	cmp	r3, #64	@ 0x40
 8005926:	d108      	bne.n	800593a <HAL_RCC_OscConfig+0x1de>
 8005928:	4b2e      	ldr	r3, [pc, #184]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005930:	4a2c      	ldr	r2, [pc, #176]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005936:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005938:	e07a      	b.n	8005a30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593a:	4b2a      	ldr	r3, [pc, #168]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	031b      	lsls	r3, r3, #12
 8005948:	4926      	ldr	r1, [pc, #152]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800594a:	4313      	orrs	r3, r2
 800594c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800594e:	e06f      	b.n	8005a30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005950:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	4921      	ldr	r1, [pc, #132]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005960:	4313      	orrs	r3, r2
 8005962:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005964:	e064      	b.n	8005a30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d047      	beq.n	80059fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800596e:	4b1d      	ldr	r3, [pc, #116]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 0219 	bic.w	r2, r3, #25
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	491a      	ldr	r1, [pc, #104]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fd fb58 	bl	8003034 <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005988:	f7fd fb54 	bl	8003034 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e332      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800599a:	4b12      	ldr	r3, [pc, #72]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a6:	f7fd fb51 	bl	800304c <HAL_GetREVID>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d819      	bhi.n	80059e8 <HAL_RCC_OscConfig+0x28c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b40      	cmp	r3, #64	@ 0x40
 80059ba:	d108      	bne.n	80059ce <HAL_RCC_OscConfig+0x272>
 80059bc:	4b09      	ldr	r3, [pc, #36]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80059c4:	4a07      	ldr	r2, [pc, #28]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80059c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ca:	6053      	str	r3, [r2, #4]
 80059cc:	e030      	b.n	8005a30 <HAL_RCC_OscConfig+0x2d4>
 80059ce:	4b05      	ldr	r3, [pc, #20]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	031b      	lsls	r3, r3, #12
 80059dc:	4901      	ldr	r1, [pc, #4]	@ (80059e4 <HAL_RCC_OscConfig+0x288>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]
 80059e2:	e025      	b.n	8005a30 <HAL_RCC_OscConfig+0x2d4>
 80059e4:	58024400 	.word	0x58024400
 80059e8:	4b9a      	ldr	r3, [pc, #616]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	4997      	ldr	r1, [pc, #604]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]
 80059fc:	e018      	b.n	8005a30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fe:	4b95      	ldr	r3, [pc, #596]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a94      	ldr	r2, [pc, #592]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0a:	f7fd fb13 	bl	8003034 <HAL_GetTick>
 8005a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a12:	f7fd fb0f 	bl	8003034 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e2ed      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a24:	4b8b      	ldr	r3, [pc, #556]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f0      	bne.n	8005a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80a9 	beq.w	8005b90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a3e:	4b85      	ldr	r3, [pc, #532]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a48:	4b82      	ldr	r3, [pc, #520]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d007      	beq.n	8005a64 <HAL_RCC_OscConfig+0x308>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b18      	cmp	r3, #24
 8005a58:	d13a      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x374>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d135      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a64:	4b7b      	ldr	r3, [pc, #492]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCC_OscConfig+0x320>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	2b80      	cmp	r3, #128	@ 0x80
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e2c1      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a7c:	f7fd fae6 	bl	800304c <HAL_GetREVID>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d817      	bhi.n	8005aba <HAL_RCC_OscConfig+0x35e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d108      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x348>
 8005a92:	4b70      	ldr	r3, [pc, #448]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005a9a:	4a6e      	ldr	r2, [pc, #440]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aa0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aa2:	e075      	b.n	8005b90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	069b      	lsls	r3, r3, #26
 8005ab2:	4968      	ldr	r1, [pc, #416]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ab8:	e06a      	b.n	8005b90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005aba:	4b66      	ldr	r3, [pc, #408]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	061b      	lsls	r3, r3, #24
 8005ac8:	4962      	ldr	r1, [pc, #392]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ace:	e05f      	b.n	8005b90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d042      	beq.n	8005b5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a5d      	ldr	r2, [pc, #372]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7fd faa6 	bl	8003034 <HAL_GetTick>
 8005ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005aec:	f7fd faa2 	bl	8003034 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e280      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005afe:	4b55      	ldr	r3, [pc, #340]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b0a:	f7fd fa9f 	bl	800304c <HAL_GetREVID>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d817      	bhi.n	8005b48 <HAL_RCC_OscConfig+0x3ec>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d108      	bne.n	8005b32 <HAL_RCC_OscConfig+0x3d6>
 8005b20:	4b4c      	ldr	r3, [pc, #304]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005b28:	4a4a      	ldr	r2, [pc, #296]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b2e:	6053      	str	r3, [r2, #4]
 8005b30:	e02e      	b.n	8005b90 <HAL_RCC_OscConfig+0x434>
 8005b32:	4b48      	ldr	r3, [pc, #288]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	069b      	lsls	r3, r3, #26
 8005b40:	4944      	ldr	r1, [pc, #272]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
 8005b46:	e023      	b.n	8005b90 <HAL_RCC_OscConfig+0x434>
 8005b48:	4b42      	ldr	r3, [pc, #264]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	061b      	lsls	r3, r3, #24
 8005b56:	493f      	ldr	r1, [pc, #252]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60cb      	str	r3, [r1, #12]
 8005b5c:	e018      	b.n	8005b90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a3c      	ldr	r2, [pc, #240]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6a:	f7fd fa63 	bl	8003034 <HAL_GetTick>
 8005b6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b72:	f7fd fa5f 	bl	8003034 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e23d      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b84:	4b33      	ldr	r3, [pc, #204]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f0      	bne.n	8005b72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d036      	beq.n	8005c0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d019      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb0:	f7fd fa40 	bl	8003034 <HAL_GetTick>
 8005bb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb8:	f7fd fa3c 	bl	8003034 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e21a      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bca:	4b22      	ldr	r3, [pc, #136]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x45c>
 8005bd6:	e018      	b.n	8005c0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fd fa26 	bl	8003034 <HAL_GetTick>
 8005be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bec:	f7fd fa22 	bl	8003034 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e200      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bfe:	4b15      	ldr	r3, [pc, #84]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d039      	beq.n	8005c8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01c      	beq.n	8005c58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a0c      	ldr	r2, [pc, #48]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005c24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c2a:	f7fd fa03 	bl	8003034 <HAL_GetTick>
 8005c2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c32:	f7fd f9ff 	bl	8003034 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e1dd      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c44:	4b03      	ldr	r3, [pc, #12]	@ (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCC_OscConfig+0x4d6>
 8005c50:	e01b      	b.n	8005c8a <HAL_RCC_OscConfig+0x52e>
 8005c52:	bf00      	nop
 8005c54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c58:	4b9b      	ldr	r3, [pc, #620]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a9a      	ldr	r2, [pc, #616]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005c5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c64:	f7fd f9e6 	bl	8003034 <HAL_GetTick>
 8005c68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c6c:	f7fd f9e2 	bl	8003034 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e1c0      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c7e:	4b92      	ldr	r3, [pc, #584]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8081 	beq.w	8005d9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c98:	4b8c      	ldr	r3, [pc, #560]	@ (8005ecc <HAL_RCC_OscConfig+0x770>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a8b      	ldr	r2, [pc, #556]	@ (8005ecc <HAL_RCC_OscConfig+0x770>)
 8005c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ca2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ca4:	f7fd f9c6 	bl	8003034 <HAL_GetTick>
 8005ca8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cac:	f7fd f9c2 	bl	8003034 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	@ 0x64
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e1a0      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cbe:	4b83      	ldr	r3, [pc, #524]	@ (8005ecc <HAL_RCC_OscConfig+0x770>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d106      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x584>
 8005cd2:	4b7d      	ldr	r3, [pc, #500]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cde:	e02d      	b.n	8005d3c <HAL_RCC_OscConfig+0x5e0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10c      	bne.n	8005d02 <HAL_RCC_OscConfig+0x5a6>
 8005ce8:	4b77      	ldr	r3, [pc, #476]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	4a76      	ldr	r2, [pc, #472]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cf4:	4b74      	ldr	r3, [pc, #464]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf8:	4a73      	ldr	r2, [pc, #460]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005cfa:	f023 0304 	bic.w	r3, r3, #4
 8005cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d00:	e01c      	b.n	8005d3c <HAL_RCC_OscConfig+0x5e0>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d10c      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c8>
 8005d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d10:	f043 0304 	orr.w	r3, r3, #4
 8005d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d16:	4b6c      	ldr	r3, [pc, #432]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d22:	e00b      	b.n	8005d3c <HAL_RCC_OscConfig+0x5e0>
 8005d24:	4b68      	ldr	r3, [pc, #416]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d28:	4a67      	ldr	r2, [pc, #412]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d30:	4b65      	ldr	r3, [pc, #404]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d34:	4a64      	ldr	r2, [pc, #400]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d36:	f023 0304 	bic.w	r3, r3, #4
 8005d3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d015      	beq.n	8005d70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d44:	f7fd f976 	bl	8003034 <HAL_GetTick>
 8005d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4c:	f7fd f972 	bl	8003034 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e14e      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d62:	4b59      	ldr	r3, [pc, #356]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0ee      	beq.n	8005d4c <HAL_RCC_OscConfig+0x5f0>
 8005d6e:	e014      	b.n	8005d9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d70:	f7fd f960 	bl	8003034 <HAL_GetTick>
 8005d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d76:	e00a      	b.n	8005d8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d78:	f7fd f95c 	bl	8003034 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e138      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1ee      	bne.n	8005d78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 812d 	beq.w	8005ffe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005da4:	4b48      	ldr	r3, [pc, #288]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dac:	2b18      	cmp	r3, #24
 8005dae:	f000 80bd 	beq.w	8005f2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	f040 809e 	bne.w	8005ef8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dbc:	4b42      	ldr	r3, [pc, #264]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a41      	ldr	r2, [pc, #260]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fd f934 	bl	8003034 <HAL_GetTick>
 8005dcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fd f930 	bl	8003034 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e10e      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005de2:	4b39      	ldr	r3, [pc, #228]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dee:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005df2:	4b37      	ldr	r3, [pc, #220]	@ (8005ed0 <HAL_RCC_OscConfig+0x774>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dfe:	0112      	lsls	r2, r2, #4
 8005e00:	430a      	orrs	r2, r1
 8005e02:	4931      	ldr	r1, [pc, #196]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	628b      	str	r3, [r1, #40]	@ 0x28
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e16:	3b01      	subs	r3, #1
 8005e18:	025b      	lsls	r3, r3, #9
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e22:	3b01      	subs	r3, #1
 8005e24:	041b      	lsls	r3, r3, #16
 8005e26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e30:	3b01      	subs	r3, #1
 8005e32:	061b      	lsls	r3, r3, #24
 8005e34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e38:	4923      	ldr	r1, [pc, #140]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e3e:	4b22      	ldr	r3, [pc, #136]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e42:	4a21      	ldr	r2, [pc, #132]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e4e:	4b21      	ldr	r3, [pc, #132]	@ (8005ed4 <HAL_RCC_OscConfig+0x778>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e56:	00d2      	lsls	r2, r2, #3
 8005e58:	491b      	ldr	r1, [pc, #108]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e62:	f023 020c 	bic.w	r2, r3, #12
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	4917      	ldr	r1, [pc, #92]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e70:	4b15      	ldr	r3, [pc, #84]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	f023 0202 	bic.w	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7c:	4912      	ldr	r1, [pc, #72]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e82:	4b11      	ldr	r3, [pc, #68]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e86:	4a10      	ldr	r2, [pc, #64]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e92:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ea6:	4b08      	ldr	r3, [pc, #32]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	4a07      	ldr	r2, [pc, #28]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005eac:	f043 0301 	orr.w	r3, r3, #1
 8005eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb2:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a04      	ldr	r2, [pc, #16]	@ (8005ec8 <HAL_RCC_OscConfig+0x76c>)
 8005eb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebe:	f7fd f8b9 	bl	8003034 <HAL_GetTick>
 8005ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ec4:	e011      	b.n	8005eea <HAL_RCC_OscConfig+0x78e>
 8005ec6:	bf00      	nop
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	58024800 	.word	0x58024800
 8005ed0:	fffffc0c 	.word	0xfffffc0c
 8005ed4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed8:	f7fd f8ac 	bl	8003034 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e08a      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eea:	4b47      	ldr	r3, [pc, #284]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x77c>
 8005ef6:	e082      	b.n	8005ffe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef8:	4b43      	ldr	r3, [pc, #268]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a42      	ldr	r2, [pc, #264]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fd f896 	bl	8003034 <HAL_GetTick>
 8005f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0c:	f7fd f892 	bl	8003034 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e070      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0x7b0>
 8005f2a:	e068      	b.n	8005ffe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f2c:	4b36      	ldr	r3, [pc, #216]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f32:	4b35      	ldr	r3, [pc, #212]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d031      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f003 0203 	and.w	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d12a      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	091b      	lsrs	r3, r3, #4
 8005f52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d122      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d11a      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	0a5b      	lsrs	r3, r3, #9
 8005f72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d111      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d108      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	0e1b      	lsrs	r3, r3, #24
 8005f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d001      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e02b      	b.n	8006000 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005fa8:	4b17      	ldr	r3, [pc, #92]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fac:	08db      	lsrs	r3, r3, #3
 8005fae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d01f      	beq.n	8005ffe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005fbe:	4b12      	ldr	r3, [pc, #72]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc2:	4a11      	ldr	r2, [pc, #68]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fca:	f7fd f833 	bl	8003034 <HAL_GetTick>
 8005fce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fd0:	bf00      	nop
 8005fd2:	f7fd f82f 	bl	8003034 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d0f9      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fde:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800600c <HAL_RCC_OscConfig+0x8b0>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005fea:	00d2      	lsls	r2, r2, #3
 8005fec:	4906      	ldr	r1, [pc, #24]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005ff2:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff6:	4a04      	ldr	r2, [pc, #16]	@ (8006008 <HAL_RCC_OscConfig+0x8ac>)
 8005ff8:	f043 0301 	orr.w	r3, r3, #1
 8005ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3730      	adds	r7, #48	@ 0x30
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	58024400 	.word	0x58024400
 800600c:	ffff0007 	.word	0xffff0007

08006010 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e19c      	b.n	800635e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006024:	4b8a      	ldr	r3, [pc, #552]	@ (8006250 <HAL_RCC_ClockConfig+0x240>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d910      	bls.n	8006054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006032:	4b87      	ldr	r3, [pc, #540]	@ (8006250 <HAL_RCC_ClockConfig+0x240>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 020f 	bic.w	r2, r3, #15
 800603a:	4985      	ldr	r1, [pc, #532]	@ (8006250 <HAL_RCC_ClockConfig+0x240>)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	4b83      	ldr	r3, [pc, #524]	@ (8006250 <HAL_RCC_ClockConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e184      	b.n	800635e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d010      	beq.n	8006082 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	4b7b      	ldr	r3, [pc, #492]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800606c:	429a      	cmp	r2, r3
 800606e:	d908      	bls.n	8006082 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006070:	4b78      	ldr	r3, [pc, #480]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	4975      	ldr	r1, [pc, #468]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 800607e:	4313      	orrs	r3, r2
 8006080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d010      	beq.n	80060b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	4b70      	ldr	r3, [pc, #448]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800609a:	429a      	cmp	r2, r3
 800609c:	d908      	bls.n	80060b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800609e:	4b6d      	ldr	r3, [pc, #436]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	496a      	ldr	r1, [pc, #424]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d010      	beq.n	80060de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	4b64      	ldr	r3, [pc, #400]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d908      	bls.n	80060de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060cc:	4b61      	ldr	r3, [pc, #388]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	495e      	ldr	r1, [pc, #376]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d010      	beq.n	800610c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69da      	ldr	r2, [r3, #28]
 80060ee:	4b59      	ldr	r3, [pc, #356]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d908      	bls.n	800610c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060fa:	4b56      	ldr	r3, [pc, #344]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	4953      	ldr	r1, [pc, #332]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006108:	4313      	orrs	r3, r2
 800610a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d010      	beq.n	800613a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	4b4d      	ldr	r3, [pc, #308]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	429a      	cmp	r2, r3
 8006126:	d908      	bls.n	800613a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006128:	4b4a      	ldr	r3, [pc, #296]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	f023 020f 	bic.w	r2, r3, #15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4947      	ldr	r1, [pc, #284]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006136:	4313      	orrs	r3, r2
 8006138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d055      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006146:	4b43      	ldr	r3, [pc, #268]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	4940      	ldr	r1, [pc, #256]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006154:	4313      	orrs	r3, r2
 8006156:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d107      	bne.n	8006170 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006160:	4b3c      	ldr	r3, [pc, #240]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d121      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0f6      	b.n	800635e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b03      	cmp	r3, #3
 8006176:	d107      	bne.n	8006188 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006178:	4b36      	ldr	r3, [pc, #216]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d115      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0ea      	b.n	800635e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d107      	bne.n	80061a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006190:	4b30      	ldr	r3, [pc, #192]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e0de      	b.n	800635e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0d6      	b.n	800635e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061b0:	4b28      	ldr	r3, [pc, #160]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f023 0207 	bic.w	r2, r3, #7
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4925      	ldr	r1, [pc, #148]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c2:	f7fc ff37 	bl	8003034 <HAL_GetTick>
 80061c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c8:	e00a      	b.n	80061e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ca:	f7fc ff33 	bl	8003034 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d8:	4293      	cmp	r3, r2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e0be      	b.n	800635e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d1eb      	bne.n	80061ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d010      	beq.n	8006220 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	4b14      	ldr	r3, [pc, #80]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	429a      	cmp	r2, r3
 800620c:	d208      	bcs.n	8006220 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800620e:	4b11      	ldr	r3, [pc, #68]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f023 020f 	bic.w	r2, r3, #15
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	490e      	ldr	r1, [pc, #56]	@ (8006254 <HAL_RCC_ClockConfig+0x244>)
 800621c:	4313      	orrs	r3, r2
 800621e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006220:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <HAL_RCC_ClockConfig+0x240>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d214      	bcs.n	8006258 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b08      	ldr	r3, [pc, #32]	@ (8006250 <HAL_RCC_ClockConfig+0x240>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 020f 	bic.w	r2, r3, #15
 8006236:	4906      	ldr	r1, [pc, #24]	@ (8006250 <HAL_RCC_ClockConfig+0x240>)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623e:	4b04      	ldr	r3, [pc, #16]	@ (8006250 <HAL_RCC_ClockConfig+0x240>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e086      	b.n	800635e <HAL_RCC_ClockConfig+0x34e>
 8006250:	52002000 	.word	0x52002000
 8006254:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d010      	beq.n	8006286 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	4b3f      	ldr	r3, [pc, #252]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006270:	429a      	cmp	r2, r3
 8006272:	d208      	bcs.n	8006286 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006274:	4b3c      	ldr	r3, [pc, #240]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	4939      	ldr	r1, [pc, #228]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 8006282:	4313      	orrs	r3, r2
 8006284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d010      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695a      	ldr	r2, [r3, #20]
 8006296:	4b34      	ldr	r3, [pc, #208]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800629e:	429a      	cmp	r2, r3
 80062a0:	d208      	bcs.n	80062b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062a2:	4b31      	ldr	r3, [pc, #196]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	492e      	ldr	r1, [pc, #184]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d010      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	4b28      	ldr	r3, [pc, #160]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d208      	bcs.n	80062e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062d0:	4b25      	ldr	r3, [pc, #148]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	4922      	ldr	r1, [pc, #136]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d010      	beq.n	8006310 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69da      	ldr	r2, [r3, #28]
 80062f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d208      	bcs.n	8006310 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	4917      	ldr	r1, [pc, #92]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 800630c:	4313      	orrs	r3, r2
 800630e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006310:	f000 f834 	bl	800637c <HAL_RCC_GetSysClockFreq>
 8006314:	4602      	mov	r2, r0
 8006316:	4b14      	ldr	r3, [pc, #80]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	0a1b      	lsrs	r3, r3, #8
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	4912      	ldr	r1, [pc, #72]	@ (800636c <HAL_RCC_ClockConfig+0x35c>)
 8006322:	5ccb      	ldrb	r3, [r1, r3]
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	fa22 f303 	lsr.w	r3, r2, r3
 800632c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800632e:	4b0e      	ldr	r3, [pc, #56]	@ (8006368 <HAL_RCC_ClockConfig+0x358>)
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	4a0d      	ldr	r2, [pc, #52]	@ (800636c <HAL_RCC_ClockConfig+0x35c>)
 8006338:	5cd3      	ldrb	r3, [r2, r3]
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
 8006344:	4a0a      	ldr	r2, [pc, #40]	@ (8006370 <HAL_RCC_ClockConfig+0x360>)
 8006346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006348:	4a0a      	ldr	r2, [pc, #40]	@ (8006374 <HAL_RCC_ClockConfig+0x364>)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800634e:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <HAL_RCC_ClockConfig+0x368>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f7fc fe24 	bl	8002fa0 <HAL_InitTick>
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	58024400 	.word	0x58024400
 800636c:	08012a8c 	.word	0x08012a8c
 8006370:	24000004 	.word	0x24000004
 8006374:	24000000 	.word	0x24000000
 8006378:	2400001c 	.word	0x2400001c

0800637c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800637c:	b480      	push	{r7}
 800637e:	b089      	sub	sp, #36	@ 0x24
 8006380:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006382:	4bb3      	ldr	r3, [pc, #716]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800638a:	2b18      	cmp	r3, #24
 800638c:	f200 8155 	bhi.w	800663a <HAL_RCC_GetSysClockFreq+0x2be>
 8006390:	a201      	add	r2, pc, #4	@ (adr r2, 8006398 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063fd 	.word	0x080063fd
 800639c:	0800663b 	.word	0x0800663b
 80063a0:	0800663b 	.word	0x0800663b
 80063a4:	0800663b 	.word	0x0800663b
 80063a8:	0800663b 	.word	0x0800663b
 80063ac:	0800663b 	.word	0x0800663b
 80063b0:	0800663b 	.word	0x0800663b
 80063b4:	0800663b 	.word	0x0800663b
 80063b8:	08006423 	.word	0x08006423
 80063bc:	0800663b 	.word	0x0800663b
 80063c0:	0800663b 	.word	0x0800663b
 80063c4:	0800663b 	.word	0x0800663b
 80063c8:	0800663b 	.word	0x0800663b
 80063cc:	0800663b 	.word	0x0800663b
 80063d0:	0800663b 	.word	0x0800663b
 80063d4:	0800663b 	.word	0x0800663b
 80063d8:	08006429 	.word	0x08006429
 80063dc:	0800663b 	.word	0x0800663b
 80063e0:	0800663b 	.word	0x0800663b
 80063e4:	0800663b 	.word	0x0800663b
 80063e8:	0800663b 	.word	0x0800663b
 80063ec:	0800663b 	.word	0x0800663b
 80063f0:	0800663b 	.word	0x0800663b
 80063f4:	0800663b 	.word	0x0800663b
 80063f8:	0800642f 	.word	0x0800642f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fc:	4b94      	ldr	r3, [pc, #592]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006408:	4b91      	ldr	r3, [pc, #580]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	08db      	lsrs	r3, r3, #3
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	4a90      	ldr	r2, [pc, #576]	@ (8006654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
 8006418:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800641a:	e111      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800641c:	4b8d      	ldr	r3, [pc, #564]	@ (8006654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800641e:	61bb      	str	r3, [r7, #24]
      break;
 8006420:	e10e      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006422:	4b8d      	ldr	r3, [pc, #564]	@ (8006658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006424:	61bb      	str	r3, [r7, #24]
      break;
 8006426:	e10b      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006428:	4b8c      	ldr	r3, [pc, #560]	@ (800665c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800642a:	61bb      	str	r3, [r7, #24]
      break;
 800642c:	e108      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800642e:	4b88      	ldr	r3, [pc, #544]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006438:	4b85      	ldr	r3, [pc, #532]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800643a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006442:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006444:	4b82      	ldr	r3, [pc, #520]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800644e:	4b80      	ldr	r3, [pc, #512]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006452:	08db      	lsrs	r3, r3, #3
 8006454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006466:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80e1 	beq.w	8006634 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b02      	cmp	r3, #2
 8006476:	f000 8083 	beq.w	8006580 <HAL_RCC_GetSysClockFreq+0x204>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b02      	cmp	r3, #2
 800647e:	f200 80a1 	bhi.w	80065c4 <HAL_RCC_GetSysClockFreq+0x248>
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_RCC_GetSysClockFreq+0x114>
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d056      	beq.n	800653c <HAL_RCC_GetSysClockFreq+0x1c0>
 800648e:	e099      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006490:	4b6f      	ldr	r3, [pc, #444]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d02d      	beq.n	80064f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800649c:	4b6c      	ldr	r3, [pc, #432]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	08db      	lsrs	r3, r3, #3
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	4a6b      	ldr	r2, [pc, #428]	@ (8006654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	ee07 3a90 	vmov	s15, r3
 80064b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c6:	4b62      	ldr	r3, [pc, #392]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064f6:	e087      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006664 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650a:	4b51      	ldr	r3, [pc, #324]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651a:	ed97 6a02 	vldr	s12, [r7, #8]
 800651e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006660 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800653a:	e065      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006668 <HAL_RCC_GetSysClockFreq+0x2ec>
 800654a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654e:	4b40      	ldr	r3, [pc, #256]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006562:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006660 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800657e:	e043      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800666c <HAL_RCC_GetSysClockFreq+0x2f0>
 800658e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006592:	4b2f      	ldr	r3, [pc, #188]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065c2:	e021      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006668 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006606:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006608:	4b11      	ldr	r3, [pc, #68]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660c:	0a5b      	lsrs	r3, r3, #9
 800660e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006612:	3301      	adds	r3, #1
 8006614:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	ee07 3a90 	vmov	s15, r3
 800661c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006620:	edd7 6a07 	vldr	s13, [r7, #28]
 8006624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800662c:	ee17 3a90 	vmov	r3, s15
 8006630:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006632:	e005      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
      break;
 8006638:	e002      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800663a:	4b07      	ldr	r3, [pc, #28]	@ (8006658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800663c:	61bb      	str	r3, [r7, #24]
      break;
 800663e:	bf00      	nop
  }

  return sysclockfreq;
 8006640:	69bb      	ldr	r3, [r7, #24]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3724      	adds	r7, #36	@ 0x24
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	58024400 	.word	0x58024400
 8006654:	03d09000 	.word	0x03d09000
 8006658:	003d0900 	.word	0x003d0900
 800665c:	017d7840 	.word	0x017d7840
 8006660:	46000000 	.word	0x46000000
 8006664:	4c742400 	.word	0x4c742400
 8006668:	4a742400 	.word	0x4a742400
 800666c:	4bbebc20 	.word	0x4bbebc20

08006670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006676:	f7ff fe81 	bl	800637c <HAL_RCC_GetSysClockFreq>
 800667a:	4602      	mov	r2, r0
 800667c:	4b10      	ldr	r3, [pc, #64]	@ (80066c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	490f      	ldr	r1, [pc, #60]	@ (80066c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006688:	5ccb      	ldrb	r3, [r1, r3]
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	fa22 f303 	lsr.w	r3, r2, r3
 8006692:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006694:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	4a09      	ldr	r2, [pc, #36]	@ (80066c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800669e:	5cd3      	ldrb	r3, [r2, r3]
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	fa22 f303 	lsr.w	r3, r2, r3
 80066aa:	4a07      	ldr	r2, [pc, #28]	@ (80066c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80066ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066ae:	4a07      	ldr	r2, [pc, #28]	@ (80066cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066b4:	4b04      	ldr	r3, [pc, #16]	@ (80066c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80066b6:	681b      	ldr	r3, [r3, #0]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	58024400 	.word	0x58024400
 80066c4:	08012a8c 	.word	0x08012a8c
 80066c8:	24000004 	.word	0x24000004
 80066cc:	24000000 	.word	0x24000000

080066d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066d4:	f7ff ffcc 	bl	8006670 <HAL_RCC_GetHCLKFreq>
 80066d8:	4602      	mov	r2, r0
 80066da:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	091b      	lsrs	r3, r3, #4
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	4904      	ldr	r1, [pc, #16]	@ (80066f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066e6:	5ccb      	ldrb	r3, [r1, r3]
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	58024400 	.word	0x58024400
 80066f8:	08012a8c 	.word	0x08012a8c

080066fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006700:	f7ff ffb6 	bl	8006670 <HAL_RCC_GetHCLKFreq>
 8006704:	4602      	mov	r2, r0
 8006706:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	4904      	ldr	r1, [pc, #16]	@ (8006724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006712:	5ccb      	ldrb	r3, [r1, r3]
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800671c:	4618      	mov	r0, r3
 800671e:	bd80      	pop	{r7, pc}
 8006720:	58024400 	.word	0x58024400
 8006724:	08012a8c 	.word	0x08012a8c

08006728 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800672c:	b0ca      	sub	sp, #296	@ 0x128
 800672e:	af00      	add	r7, sp, #0
 8006730:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006734:	2300      	movs	r3, #0
 8006736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800673a:	2300      	movs	r3, #0
 800673c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800674c:	2500      	movs	r5, #0
 800674e:	ea54 0305 	orrs.w	r3, r4, r5
 8006752:	d049      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006758:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800675a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800675e:	d02f      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006760:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006764:	d828      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006766:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800676a:	d01a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800676c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006770:	d822      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800677a:	d007      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800677c:	e01c      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677e:	4bb8      	ldr	r3, [pc, #736]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006782:	4ab7      	ldr	r2, [pc, #732]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006788:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800678a:	e01a      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800678c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006790:	3308      	adds	r3, #8
 8006792:	2102      	movs	r1, #2
 8006794:	4618      	mov	r0, r3
 8006796:	f002 fb61 	bl	8008e5c <RCCEx_PLL2_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067a0:	e00f      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	3328      	adds	r3, #40	@ 0x28
 80067a8:	2102      	movs	r1, #2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f002 fc08 	bl	8008fc0 <RCCEx_PLL3_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067b6:	e004      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80067c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80067ca:	4ba5      	ldr	r3, [pc, #660]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067d8:	4aa1      	ldr	r2, [pc, #644]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067da:	430b      	orrs	r3, r1
 80067dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	ea58 0309 	orrs.w	r3, r8, r9
 80067fc:	d047      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006804:	2b04      	cmp	r3, #4
 8006806:	d82a      	bhi.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006808:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006825 	.word	0x08006825
 8006814:	08006833 	.word	0x08006833
 8006818:	08006849 	.word	0x08006849
 800681c:	08006867 	.word	0x08006867
 8006820:	08006867 	.word	0x08006867
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006824:	4b8e      	ldr	r3, [pc, #568]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006828:	4a8d      	ldr	r2, [pc, #564]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006830:	e01a      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	3308      	adds	r3, #8
 8006838:	2100      	movs	r1, #0
 800683a:	4618      	mov	r0, r3
 800683c:	f002 fb0e 	bl	8008e5c <RCCEx_PLL2_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006846:	e00f      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684c:	3328      	adds	r3, #40	@ 0x28
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f002 fbb5 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800685c:	e004      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006864:	e000      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006870:	4b7b      	ldr	r3, [pc, #492]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006874:	f023 0107 	bic.w	r1, r3, #7
 8006878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800687e:	4a78      	ldr	r2, [pc, #480]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006880:	430b      	orrs	r3, r1
 8006882:	6513      	str	r3, [r2, #80]	@ 0x50
 8006884:	e003      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800688a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800688e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800689a:	f04f 0b00 	mov.w	fp, #0
 800689e:	ea5a 030b 	orrs.w	r3, sl, fp
 80068a2:	d04c      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ae:	d030      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80068b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b4:	d829      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068b8:	d02d      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80068bc:	d825      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068be:	2b80      	cmp	r3, #128	@ 0x80
 80068c0:	d018      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80068c2:	2b80      	cmp	r3, #128	@ 0x80
 80068c4:	d821      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d007      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80068ce:	e01c      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d0:	4b63      	ldr	r3, [pc, #396]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	4a62      	ldr	r2, [pc, #392]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068dc:	e01c      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e2:	3308      	adds	r3, #8
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f002 fab8 	bl	8008e5c <RCCEx_PLL2_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068f2:	e011      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	3328      	adds	r3, #40	@ 0x28
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f002 fb5f 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006908:	e006      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006910:	e002      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006920:	4b4f      	ldr	r3, [pc, #316]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006924:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692e:	4a4c      	ldr	r2, [pc, #304]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006930:	430b      	orrs	r3, r1
 8006932:	6513      	str	r3, [r2, #80]	@ 0x50
 8006934:	e003      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800694a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800694e:	2300      	movs	r3, #0
 8006950:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006954:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006958:	460b      	mov	r3, r1
 800695a:	4313      	orrs	r3, r2
 800695c:	d053      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006966:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800696a:	d035      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800696c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006970:	d82e      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006972:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006976:	d031      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006978:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800697c:	d828      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800697e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006982:	d01a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006988:	d822      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800698e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006992:	d007      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006994:	e01c      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006996:	4b32      	ldr	r3, [pc, #200]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	4a31      	ldr	r2, [pc, #196]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800699c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069a2:	e01c      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a8:	3308      	adds	r3, #8
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 fa55 	bl	8008e5c <RCCEx_PLL2_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069b8:	e011      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	3328      	adds	r3, #40	@ 0x28
 80069c0:	2100      	movs	r1, #0
 80069c2:	4618      	mov	r0, r3
 80069c4:	f002 fafc 	bl	8008fc0 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069ce:	e006      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d6:	e002      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069d8:	bf00      	nop
 80069da:	e000      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80069fc:	e003      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006a12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a16:	2300      	movs	r3, #0
 8006a18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006a1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006a20:	460b      	mov	r3, r1
 8006a22:	4313      	orrs	r3, r2
 8006a24:	d056      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a32:	d038      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a38:	d831      	bhi.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a3e:	d034      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a44:	d82b      	bhi.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a4a:	d01d      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a50:	d825      	bhi.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d006      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a5a:	d00a      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a5c:	e01f      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a64:	4ba2      	ldr	r3, [pc, #648]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	4aa1      	ldr	r2, [pc, #644]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a70:	e01c      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	3308      	adds	r3, #8
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f002 f9ee 	bl	8008e5c <RCCEx_PLL2_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a86:	e011      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	3328      	adds	r3, #40	@ 0x28
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f002 fa95 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e006      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aa4:	e002      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006aa6:	bf00      	nop
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10b      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ac4:	4a8a      	ldr	r2, [pc, #552]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006aca:	e003      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006aea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006aee:	460b      	mov	r3, r1
 8006af0:	4313      	orrs	r3, r2
 8006af2:	d03a      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006afa:	2b30      	cmp	r3, #48	@ 0x30
 8006afc:	d01f      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006afe:	2b30      	cmp	r3, #48	@ 0x30
 8006b00:	d819      	bhi.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d00c      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d815      	bhi.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d019      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d111      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b12:	4b77      	ldr	r3, [pc, #476]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	4a76      	ldr	r2, [pc, #472]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b1e:	e011      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b24:	3308      	adds	r3, #8
 8006b26:	2102      	movs	r1, #2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f002 f997 	bl	8008e5c <RCCEx_PLL2_Config>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b34:	e006      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b3c:	e002      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b3e:	bf00      	nop
 8006b40:	e000      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b4c:	4b68      	ldr	r3, [pc, #416]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b50:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b5a:	4a65      	ldr	r2, [pc, #404]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006b76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4313      	orrs	r3, r2
 8006b88:	d051      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b94:	d035      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b9a:	d82e      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ba0:	d031      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006ba2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ba6:	d828      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bac:	d01a      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bb2:	d822      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bbc:	d007      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006bbe:	e01c      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	4a4a      	ldr	r2, [pc, #296]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bcc:	e01c      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f002 f940 	bl	8008e5c <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006be2:	e011      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be8:	3328      	adds	r3, #40	@ 0x28
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f002 f9e7 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e006      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c00:	e002      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c02:	bf00      	nop
 8006c04:	e000      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c10:	4b37      	ldr	r3, [pc, #220]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c14:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1e:	4a34      	ldr	r2, [pc, #208]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c20:	430b      	orrs	r3, r1
 8006c22:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c24:	e003      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	d056      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c58:	d033      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c5e:	d82c      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c64:	d02f      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006c66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c6a:	d826      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c70:	d02b      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006c72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c76:	d820      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c7c:	d012      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c82:	d81a      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d022      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c8c:	d115      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	3308      	adds	r3, #8
 8006c94:	2101      	movs	r1, #1
 8006c96:	4618      	mov	r0, r3
 8006c98:	f002 f8e0 	bl	8008e5c <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ca2:	e015      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca8:	3328      	adds	r3, #40	@ 0x28
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f002 f987 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cb8:	e00a      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e004      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e002      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e000      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006cd8:	4b05      	ldr	r3, [pc, #20]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce6:	4a02      	ldr	r2, [pc, #8]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cec:	e006      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006cee:	bf00      	nop
 8006cf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	d055      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d28:	d033      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d2e:	d82c      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d34:	d02f      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3a:	d826      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d40:	d02b      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d46:	d820      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4c:	d012      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d52:	d81a      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d022      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d5c:	d115      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d62:	3308      	adds	r3, #8
 8006d64:	2101      	movs	r1, #1
 8006d66:	4618      	mov	r0, r3
 8006d68:	f002 f878 	bl	8008e5c <RCCEx_PLL2_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d72:	e015      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	3328      	adds	r3, #40	@ 0x28
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f002 f91f 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d88:	e00a      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d90:	e006      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d92:	bf00      	nop
 8006d94:	e004      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d96:	bf00      	nop
 8006d98:	e002      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d9a:	bf00      	nop
 8006d9c:	e000      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10b      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006da8:	4ba3      	ldr	r3, [pc, #652]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006db8:	4a9f      	ldr	r2, [pc, #636]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dbe:	e003      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006de2:	460b      	mov	r3, r1
 8006de4:	4313      	orrs	r3, r2
 8006de6:	d037      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df2:	d00e      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df8:	d816      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d018      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e02:	d111      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e04:	4b8c      	ldr	r3, [pc, #560]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e08:	4a8b      	ldr	r2, [pc, #556]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e10:	e00f      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e16:	3308      	adds	r3, #8
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f002 f81e 	bl	8008e5c <RCCEx_PLL2_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e26:	e004      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e2e:	e000      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e48:	4a7b      	ldr	r2, [pc, #492]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e4e:	e003      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4313      	orrs	r3, r2
 8006e76:	d039      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d81c      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006e82:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ec5 	.word	0x08006ec5
 8006e8c:	08006e99 	.word	0x08006e99
 8006e90:	08006ea7 	.word	0x08006ea7
 8006e94:	08006ec5 	.word	0x08006ec5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4b67      	ldr	r3, [pc, #412]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	4a66      	ldr	r2, [pc, #408]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ea4:	e00f      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eaa:	3308      	adds	r3, #8
 8006eac:	2102      	movs	r1, #2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 ffd4 	bl	8008e5c <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006eba:	e004      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ec2:	e000      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ece:	4b5a      	ldr	r3, [pc, #360]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed2:	f023 0103 	bic.w	r1, r3, #3
 8006ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006edc:	4a56      	ldr	r2, [pc, #344]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ee2:	e003      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006efc:	2300      	movs	r3, #0
 8006efe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006f06:	460b      	mov	r3, r1
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f000 809f 	beq.w	800704c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a4a      	ldr	r2, [pc, #296]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f1a:	f7fc f88b 	bl	8003034 <HAL_GetTick>
 8006f1e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f22:	e00b      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f24:	f7fc f886 	bl	8003034 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b64      	cmp	r3, #100	@ 0x64
 8006f32:	d903      	bls.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f3a:	e005      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0ed      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d179      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f50:	4b39      	ldr	r3, [pc, #228]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f5c:	4053      	eors	r3, r2
 8006f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d015      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f66:	4b34      	ldr	r3, [pc, #208]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f72:	4b31      	ldr	r3, [pc, #196]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f76:	4a30      	ldr	r2, [pc, #192]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f82:	4a2d      	ldr	r2, [pc, #180]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f9e:	d118      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa0:	f7fc f848 	bl	8003034 <HAL_GetTick>
 8006fa4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fa8:	e00d      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006faa:	f7fc f843 	bl	8003034 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006fb4:	1ad2      	subs	r2, r2, r3
 8006fb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d903      	bls.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006fc4:	e005      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0eb      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d129      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fea:	d10e      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006fec:	4b12      	ldr	r3, [pc, #72]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ffc:	091a      	lsrs	r2, r3, #4
 8006ffe:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007000:	4013      	ands	r3, r2
 8007002:	4a0d      	ldr	r2, [pc, #52]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007004:	430b      	orrs	r3, r1
 8007006:	6113      	str	r3, [r2, #16]
 8007008:	e005      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800700a:	4b0b      	ldr	r3, [pc, #44]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	4a0a      	ldr	r2, [pc, #40]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007010:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007014:	6113      	str	r3, [r2, #16]
 8007016:	4b08      	ldr	r3, [pc, #32]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007018:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007026:	4a04      	ldr	r2, [pc, #16]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007028:	430b      	orrs	r3, r1
 800702a:	6713      	str	r3, [r2, #112]	@ 0x70
 800702c:	e00e      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800702e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007036:	e009      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007038:	58024400 	.word	0x58024400
 800703c:	58024800 	.word	0x58024800
 8007040:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f002 0301 	and.w	r3, r2, #1
 8007058:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800705c:	2300      	movs	r3, #0
 800705e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007062:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	f000 8089 	beq.w	8007180 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800706e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007072:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007074:	2b28      	cmp	r3, #40	@ 0x28
 8007076:	d86b      	bhi.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007078:	a201      	add	r2, pc, #4	@ (adr r2, 8007080 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	08007159 	.word	0x08007159
 8007084:	08007151 	.word	0x08007151
 8007088:	08007151 	.word	0x08007151
 800708c:	08007151 	.word	0x08007151
 8007090:	08007151 	.word	0x08007151
 8007094:	08007151 	.word	0x08007151
 8007098:	08007151 	.word	0x08007151
 800709c:	08007151 	.word	0x08007151
 80070a0:	08007125 	.word	0x08007125
 80070a4:	08007151 	.word	0x08007151
 80070a8:	08007151 	.word	0x08007151
 80070ac:	08007151 	.word	0x08007151
 80070b0:	08007151 	.word	0x08007151
 80070b4:	08007151 	.word	0x08007151
 80070b8:	08007151 	.word	0x08007151
 80070bc:	08007151 	.word	0x08007151
 80070c0:	0800713b 	.word	0x0800713b
 80070c4:	08007151 	.word	0x08007151
 80070c8:	08007151 	.word	0x08007151
 80070cc:	08007151 	.word	0x08007151
 80070d0:	08007151 	.word	0x08007151
 80070d4:	08007151 	.word	0x08007151
 80070d8:	08007151 	.word	0x08007151
 80070dc:	08007151 	.word	0x08007151
 80070e0:	08007159 	.word	0x08007159
 80070e4:	08007151 	.word	0x08007151
 80070e8:	08007151 	.word	0x08007151
 80070ec:	08007151 	.word	0x08007151
 80070f0:	08007151 	.word	0x08007151
 80070f4:	08007151 	.word	0x08007151
 80070f8:	08007151 	.word	0x08007151
 80070fc:	08007151 	.word	0x08007151
 8007100:	08007159 	.word	0x08007159
 8007104:	08007151 	.word	0x08007151
 8007108:	08007151 	.word	0x08007151
 800710c:	08007151 	.word	0x08007151
 8007110:	08007151 	.word	0x08007151
 8007114:	08007151 	.word	0x08007151
 8007118:	08007151 	.word	0x08007151
 800711c:	08007151 	.word	0x08007151
 8007120:	08007159 	.word	0x08007159
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007128:	3308      	adds	r3, #8
 800712a:	2101      	movs	r1, #1
 800712c:	4618      	mov	r0, r3
 800712e:	f001 fe95 	bl	8008e5c <RCCEx_PLL2_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007138:	e00f      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713e:	3328      	adds	r3, #40	@ 0x28
 8007140:	2101      	movs	r1, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f001 ff3c 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800714e:	e004      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007156:	e000      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007162:	4bbf      	ldr	r3, [pc, #764]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007166:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007170:	4abb      	ldr	r2, [pc, #748]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007172:	430b      	orrs	r3, r1
 8007174:	6553      	str	r3, [r2, #84]	@ 0x54
 8007176:	e003      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800717c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f002 0302 	and.w	r3, r2, #2
 800718c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007196:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d041      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d824      	bhi.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071fd 	.word	0x080071fd
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071df 	.word	0x080071df
 80071bc:	080071fd 	.word	0x080071fd
 80071c0:	080071fd 	.word	0x080071fd
 80071c4:	080071fd 	.word	0x080071fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071cc:	3308      	adds	r3, #8
 80071ce:	2101      	movs	r1, #1
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 fe43 	bl	8008e5c <RCCEx_PLL2_Config>
 80071d6:	4603      	mov	r3, r0
 80071d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071dc:	e00f      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e2:	3328      	adds	r3, #40	@ 0x28
 80071e4:	2101      	movs	r1, #1
 80071e6:	4618      	mov	r0, r3
 80071e8:	f001 feea 	bl	8008fc0 <RCCEx_PLL3_Config>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071f2:	e004      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071fa:	e000      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80071fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007206:	4b96      	ldr	r3, [pc, #600]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720a:	f023 0107 	bic.w	r1, r3, #7
 800720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007212:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007214:	4a92      	ldr	r2, [pc, #584]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007216:	430b      	orrs	r3, r1
 8007218:	6553      	str	r3, [r2, #84]	@ 0x54
 800721a:	e003      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f002 0304 	and.w	r3, r2, #4
 8007230:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007234:	2300      	movs	r3, #0
 8007236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800723a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800723e:	460b      	mov	r3, r1
 8007240:	4313      	orrs	r3, r2
 8007242:	d044      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800724c:	2b05      	cmp	r3, #5
 800724e:	d825      	bhi.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007250:	a201      	add	r2, pc, #4	@ (adr r2, 8007258 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	080072a5 	.word	0x080072a5
 800725c:	08007271 	.word	0x08007271
 8007260:	08007287 	.word	0x08007287
 8007264:	080072a5 	.word	0x080072a5
 8007268:	080072a5 	.word	0x080072a5
 800726c:	080072a5 	.word	0x080072a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	3308      	adds	r3, #8
 8007276:	2101      	movs	r1, #1
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fdef 	bl	8008e5c <RCCEx_PLL2_Config>
 800727e:	4603      	mov	r3, r0
 8007280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007284:	e00f      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	3328      	adds	r3, #40	@ 0x28
 800728c:	2101      	movs	r1, #1
 800728e:	4618      	mov	r0, r3
 8007290:	f001 fe96 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800729a:	e004      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072a2:	e000      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80072a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10b      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072ae:	4b6c      	ldr	r3, [pc, #432]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b2:	f023 0107 	bic.w	r1, r3, #7
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072be:	4a68      	ldr	r2, [pc, #416]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072c0:	430b      	orrs	r3, r1
 80072c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80072c4:	e003      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	f002 0320 	and.w	r3, r2, #32
 80072da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072de:	2300      	movs	r3, #0
 80072e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072e8:	460b      	mov	r3, r1
 80072ea:	4313      	orrs	r3, r2
 80072ec:	d055      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072fa:	d033      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80072fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007300:	d82c      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007306:	d02f      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730c:	d826      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800730e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007312:	d02b      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007314:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007318:	d820      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800731a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800731e:	d012      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007324:	d81a      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d022      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800732a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800732e:	d115      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007334:	3308      	adds	r3, #8
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f001 fd8f 	bl	8008e5c <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007344:	e015      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	3328      	adds	r3, #40	@ 0x28
 800734c:	2102      	movs	r1, #2
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fe36 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800735a:	e00a      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007362:	e006      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007364:	bf00      	nop
 8007366:	e004      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007368:	bf00      	nop
 800736a:	e002      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10b      	bne.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800737a:	4b39      	ldr	r3, [pc, #228]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800737c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738a:	4a35      	ldr	r2, [pc, #212]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800738c:	430b      	orrs	r3, r1
 800738e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007390:	e003      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80073a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073aa:	2300      	movs	r3, #0
 80073ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4313      	orrs	r3, r2
 80073b8:	d058      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80073c6:	d033      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80073c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80073cc:	d82c      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d2:	d02f      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80073d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d8:	d826      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073de:	d02b      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80073e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073e4:	d820      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ea:	d012      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80073ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073f0:	d81a      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d022      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80073f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fa:	d115      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	3308      	adds	r3, #8
 8007402:	2100      	movs	r1, #0
 8007404:	4618      	mov	r0, r3
 8007406:	f001 fd29 	bl	8008e5c <RCCEx_PLL2_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007410:	e015      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007416:	3328      	adds	r3, #40	@ 0x28
 8007418:	2102      	movs	r1, #2
 800741a:	4618      	mov	r0, r3
 800741c:	f001 fdd0 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007426:	e00a      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800742e:	e006      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007430:	bf00      	nop
 8007432:	e004      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007434:	bf00      	nop
 8007436:	e002      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007438:	bf00      	nop
 800743a:	e000      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800743c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10e      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007446:	4b06      	ldr	r3, [pc, #24]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007456:	4a02      	ldr	r2, [pc, #8]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007458:	430b      	orrs	r3, r1
 800745a:	6593      	str	r3, [r2, #88]	@ 0x58
 800745c:	e006      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800745e:	bf00      	nop
 8007460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007482:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007486:	460b      	mov	r3, r1
 8007488:	4313      	orrs	r3, r2
 800748a:	d055      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007494:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007498:	d033      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800749a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800749e:	d82c      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074a4:	d02f      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80074a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074aa:	d826      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074b0:	d02b      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80074b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074b6:	d820      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074bc:	d012      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80074be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074c2:	d81a      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d022      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80074c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074cc:	d115      	bne.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d2:	3308      	adds	r3, #8
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fcc0 	bl	8008e5c <RCCEx_PLL2_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074e2:	e015      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	3328      	adds	r3, #40	@ 0x28
 80074ea:	2102      	movs	r1, #2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 fd67 	bl	8008fc0 <RCCEx_PLL3_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074f8:	e00a      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007500:	e006      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007502:	bf00      	nop
 8007504:	e004      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007506:	bf00      	nop
 8007508:	e002      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800750e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10b      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007518:	4ba1      	ldr	r3, [pc, #644]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800751a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800751c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007528:	4a9d      	ldr	r2, [pc, #628]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800752a:	430b      	orrs	r3, r1
 800752c:	6593      	str	r3, [r2, #88]	@ 0x58
 800752e:	e003      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	f002 0308 	and.w	r3, r2, #8
 8007544:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007548:	2300      	movs	r3, #0
 800754a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800754e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007552:	460b      	mov	r3, r1
 8007554:	4313      	orrs	r3, r2
 8007556:	d01e      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007564:	d10c      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756a:	3328      	adds	r3, #40	@ 0x28
 800756c:	2102      	movs	r1, #2
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fd26 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007580:	4b87      	ldr	r3, [pc, #540]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007584:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007590:	4a83      	ldr	r2, [pc, #524]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007592:	430b      	orrs	r3, r1
 8007594:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f002 0310 	and.w	r3, r2, #16
 80075a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075a6:	2300      	movs	r3, #0
 80075a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80075b0:	460b      	mov	r3, r1
 80075b2:	4313      	orrs	r3, r2
 80075b4:	d01e      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075c2:	d10c      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c8:	3328      	adds	r3, #40	@ 0x28
 80075ca:	2102      	movs	r1, #2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 fcf7 	bl	8008fc0 <RCCEx_PLL3_Config>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075de:	4b70      	ldr	r3, [pc, #448]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075ee:	4a6c      	ldr	r2, [pc, #432]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007600:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800760a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800760e:	460b      	mov	r3, r1
 8007610:	4313      	orrs	r3, r2
 8007612:	d03e      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800761c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007620:	d022      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007626:	d81b      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007630:	d00b      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007632:	e015      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007638:	3308      	adds	r3, #8
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fc0d 	bl	8008e5c <RCCEx_PLL2_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007648:	e00f      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764e:	3328      	adds	r3, #40	@ 0x28
 8007650:	2102      	movs	r1, #2
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fcb4 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800765e:	e004      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007666:	e000      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007672:	4b4b      	ldr	r3, [pc, #300]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007676:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800767a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007682:	4a47      	ldr	r2, [pc, #284]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007684:	430b      	orrs	r3, r1
 8007686:	6593      	str	r3, [r2, #88]	@ 0x58
 8007688:	e003      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800769e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076a0:	2300      	movs	r3, #0
 80076a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80076a8:	460b      	mov	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d03b      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076ba:	d01f      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80076bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076c0:	d818      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80076c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076c6:	d003      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80076c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076cc:	d007      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80076ce:	e011      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4b33      	ldr	r3, [pc, #204]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	4a32      	ldr	r2, [pc, #200]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80076dc:	e00f      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e2:	3328      	adds	r3, #40	@ 0x28
 80076e4:	2101      	movs	r1, #1
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fc6a 	bl	8008fc0 <RCCEx_PLL3_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80076f2:	e004      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076fa:	e000      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80076fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007706:	4b26      	ldr	r3, [pc, #152]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800770a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800770e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007716:	4a22      	ldr	r2, [pc, #136]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007718:	430b      	orrs	r3, r1
 800771a:	6553      	str	r3, [r2, #84]	@ 0x54
 800771c:	e003      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007732:	673b      	str	r3, [r7, #112]	@ 0x70
 8007734:	2300      	movs	r3, #0
 8007736:	677b      	str	r3, [r7, #116]	@ 0x74
 8007738:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800773c:	460b      	mov	r3, r1
 800773e:	4313      	orrs	r3, r2
 8007740:	d034      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800774c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007750:	d007      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007752:	e011      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007754:	4b12      	ldr	r3, [pc, #72]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	4a11      	ldr	r2, [pc, #68]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800775a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800775e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007760:	e00e      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007766:	3308      	adds	r3, #8
 8007768:	2102      	movs	r1, #2
 800776a:	4618      	mov	r0, r3
 800776c:	f001 fb76 	bl	8008e5c <RCCEx_PLL2_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007776:	e003      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800777e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10d      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007788:	4b05      	ldr	r3, [pc, #20]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800778a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800778c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007796:	4a02      	ldr	r2, [pc, #8]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007798:	430b      	orrs	r3, r1
 800779a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800779c:	e006      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800779e:	bf00      	nop
 80077a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80077b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ba:	2300      	movs	r3, #0
 80077bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80077c2:	460b      	mov	r3, r1
 80077c4:	4313      	orrs	r3, r2
 80077c6:	d00c      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	3328      	adds	r3, #40	@ 0x28
 80077ce:	2102      	movs	r1, #2
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 fbf5 	bl	8008fc0 <RCCEx_PLL3_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80077ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80077f0:	2300      	movs	r3, #0
 80077f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80077f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80077f8:	460b      	mov	r3, r1
 80077fa:	4313      	orrs	r3, r2
 80077fc:	d038      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800780a:	d018      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800780c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007810:	d811      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007816:	d014      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800781c:	d80b      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007826:	d106      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007828:	4bc3      	ldr	r3, [pc, #780]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	4ac2      	ldr	r2, [pc, #776]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800782e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007834:	e008      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800783c:	e004      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800783e:	bf00      	nop
 8007840:	e002      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007842:	bf00      	nop
 8007844:	e000      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10b      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007850:	4bb9      	ldr	r3, [pc, #740]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007854:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007860:	4ab5      	ldr	r2, [pc, #724]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007862:	430b      	orrs	r3, r1
 8007864:	6553      	str	r3, [r2, #84]	@ 0x54
 8007866:	e003      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800786c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800787c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800787e:	2300      	movs	r3, #0
 8007880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007882:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007886:	460b      	mov	r3, r1
 8007888:	4313      	orrs	r3, r2
 800788a:	d009      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800788c:	4baa      	ldr	r3, [pc, #680]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800788e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007890:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789a:	4aa7      	ldr	r2, [pc, #668]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800789c:	430b      	orrs	r3, r1
 800789e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80078ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80078ae:	2300      	movs	r3, #0
 80078b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80078b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80078b6:	460b      	mov	r3, r1
 80078b8:	4313      	orrs	r3, r2
 80078ba:	d00a      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80078bc:	4b9e      	ldr	r3, [pc, #632]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80078c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80078cc:	4a9a      	ldr	r2, [pc, #616]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ce:	430b      	orrs	r3, r1
 80078d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80078de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078e0:	2300      	movs	r3, #0
 80078e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80078e8:	460b      	mov	r3, r1
 80078ea:	4313      	orrs	r3, r2
 80078ec:	d009      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078ee:	4b92      	ldr	r3, [pc, #584]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078fc:	4a8e      	ldr	r2, [pc, #568]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078fe:	430b      	orrs	r3, r1
 8007900:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800790e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007910:	2300      	movs	r3, #0
 8007912:	647b      	str	r3, [r7, #68]	@ 0x44
 8007914:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007918:	460b      	mov	r3, r1
 800791a:	4313      	orrs	r3, r2
 800791c:	d00e      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800791e:	4b86      	ldr	r3, [pc, #536]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	4a85      	ldr	r2, [pc, #532]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007924:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007928:	6113      	str	r3, [r2, #16]
 800792a:	4b83      	ldr	r3, [pc, #524]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800792c:	6919      	ldr	r1, [r3, #16]
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007932:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007936:	4a80      	ldr	r2, [pc, #512]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007938:	430b      	orrs	r3, r1
 800793a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007948:	63bb      	str	r3, [r7, #56]	@ 0x38
 800794a:	2300      	movs	r3, #0
 800794c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800794e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007952:	460b      	mov	r3, r1
 8007954:	4313      	orrs	r3, r2
 8007956:	d009      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007958:	4b77      	ldr	r3, [pc, #476]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800795c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007966:	4a74      	ldr	r2, [pc, #464]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007968:	430b      	orrs	r3, r1
 800796a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007978:	633b      	str	r3, [r7, #48]	@ 0x30
 800797a:	2300      	movs	r3, #0
 800797c:	637b      	str	r3, [r7, #52]	@ 0x34
 800797e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007982:	460b      	mov	r3, r1
 8007984:	4313      	orrs	r3, r2
 8007986:	d00a      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007988:	4b6b      	ldr	r3, [pc, #428]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800798a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007998:	4a67      	ldr	r2, [pc, #412]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800799a:	430b      	orrs	r3, r1
 800799c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	2100      	movs	r1, #0
 80079a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80079b4:	460b      	mov	r3, r1
 80079b6:	4313      	orrs	r3, r2
 80079b8:	d011      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	3308      	adds	r3, #8
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 fa4a 	bl	8008e5c <RCCEx_PLL2_Config>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80079ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80079de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	2100      	movs	r1, #0
 80079e8:	6239      	str	r1, [r7, #32]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80079f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80079f4:	460b      	mov	r3, r1
 80079f6:	4313      	orrs	r3, r2
 80079f8:	d011      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fe:	3308      	adds	r3, #8
 8007a00:	2101      	movs	r1, #1
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 fa2a 	bl	8008e5c <RCCEx_PLL2_Config>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	2100      	movs	r1, #0
 8007a28:	61b9      	str	r1, [r7, #24]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a34:	460b      	mov	r3, r1
 8007a36:	4313      	orrs	r3, r2
 8007a38:	d011      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3e:	3308      	adds	r3, #8
 8007a40:	2102      	movs	r1, #2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f001 fa0a 	bl	8008e5c <RCCEx_PLL2_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	2100      	movs	r1, #0
 8007a68:	6139      	str	r1, [r7, #16]
 8007a6a:	f003 0308 	and.w	r3, r3, #8
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a74:	460b      	mov	r3, r1
 8007a76:	4313      	orrs	r3, r2
 8007a78:	d011      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	3328      	adds	r3, #40	@ 0x28
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 fa9c 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	f003 0310 	and.w	r3, r3, #16
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	d011      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abe:	3328      	adds	r3, #40	@ 0x28
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 fa7c 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	607b      	str	r3, [r7, #4]
 8007af0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007af4:	460b      	mov	r3, r1
 8007af6:	4313      	orrs	r3, r2
 8007af8:	d011      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afe:	3328      	adds	r3, #40	@ 0x28
 8007b00:	2102      	movs	r1, #2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f001 fa5c 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007b1e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e000      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007b32:	46bd      	mov	sp, r7
 8007b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b38:	58024400 	.word	0x58024400

08007b3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b090      	sub	sp, #64	@ 0x40
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b4a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	f040 8094 	bne.w	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007b54:	4b9e      	ldr	r3, [pc, #632]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	f200 8087 	bhi.w	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007b66:	a201      	add	r2, pc, #4	@ (adr r2, 8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007b81 	.word	0x08007b81
 8007b70:	08007ba9 	.word	0x08007ba9
 8007b74:	08007bd1 	.word	0x08007bd1
 8007b78:	08007c6d 	.word	0x08007c6d
 8007b7c:	08007bf9 	.word	0x08007bf9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b80:	4b93      	ldr	r3, [pc, #588]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b8c:	d108      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b92:	4618      	mov	r0, r3
 8007b94:	f001 f810 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b9c:	f000 bd45 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba4:	f000 bd41 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ba8:	4b89      	ldr	r3, [pc, #548]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bb4:	d108      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bb6:	f107 0318 	add.w	r3, r7, #24
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fd54 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc4:	f000 bd31 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bcc:	f000 bd2d 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bdc:	d108      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bde:	f107 030c 	add.w	r3, r7, #12
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 fe94 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bec:	f000 bd1d 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf4:	f000 bd19 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bf8:	4b75      	ldr	r3, [pc, #468]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c00:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c02:	4b73      	ldr	r3, [pc, #460]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d10c      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c14:	4b6e      	ldr	r3, [pc, #440]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	08db      	lsrs	r3, r3, #3
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	4a6d      	ldr	r2, [pc, #436]	@ (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c20:	fa22 f303 	lsr.w	r3, r2, r3
 8007c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c26:	e01f      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c28:	4b69      	ldr	r3, [pc, #420]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c34:	d106      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c3c:	d102      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c3e:	4b66      	ldr	r3, [pc, #408]	@ (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c42:	e011      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c44:	4b62      	ldr	r3, [pc, #392]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c50:	d106      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c58:	d102      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c5a:	4b60      	ldr	r3, [pc, #384]	@ (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c5e:	e003      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c64:	f000 bce1 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c68:	f000 bcdf 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c70:	f000 bcdb 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c78:	f000 bcd7 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c80:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007c84:	430b      	orrs	r3, r1
 8007c86:	f040 80ad 	bne.w	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007c8a:	4b51      	ldr	r3, [pc, #324]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c8e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007c92:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c9a:	d056      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca2:	f200 8090 	bhi.w	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	2bc0      	cmp	r3, #192	@ 0xc0
 8007caa:	f000 8088 	beq.w	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cb2:	f200 8088 	bhi.w	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	2b80      	cmp	r3, #128	@ 0x80
 8007cba:	d032      	beq.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	2b80      	cmp	r3, #128	@ 0x80
 8007cc0:	f200 8081 	bhi.w	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	2b40      	cmp	r3, #64	@ 0x40
 8007cce:	d014      	beq.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007cd0:	e079      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cde:	d108      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 ff67 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cee:	f000 bc9c 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf6:	f000 bc98 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cfa:	4b35      	ldr	r3, [pc, #212]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d06:	d108      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d08:	f107 0318 	add.w	r3, r7, #24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fcab 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d16:	f000 bc88 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1e:	f000 bc84 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d22:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d2e:	d108      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d30:	f107 030c 	add.w	r3, r7, #12
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 fdeb 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d3e:	f000 bc74 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d46:	f000 bc70 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d4a:	4b21      	ldr	r3, [pc, #132]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d54:	4b1e      	ldr	r3, [pc, #120]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d10c      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d66:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	08db      	lsrs	r3, r3, #3
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	4a18      	ldr	r2, [pc, #96]	@ (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d72:	fa22 f303 	lsr.w	r3, r2, r3
 8007d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d78:	e01f      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d7a:	4b15      	ldr	r3, [pc, #84]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d86:	d106      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d8e:	d102      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d90:	4b11      	ldr	r3, [pc, #68]	@ (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d94:	e011      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d96:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007da2:	d106      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007daa:	d102      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007db0:	e003      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007db6:	f000 bc38 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dba:	f000 bc36 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dbe:	4b08      	ldr	r3, [pc, #32]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc2:	f000 bc32 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dca:	f000 bc2e 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dce:	bf00      	nop
 8007dd0:	58024400 	.word	0x58024400
 8007dd4:	03d09000 	.word	0x03d09000
 8007dd8:	003d0900 	.word	0x003d0900
 8007ddc:	017d7840 	.word	0x017d7840
 8007de0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007dec:	430b      	orrs	r3, r1
 8007dee:	f040 809c 	bne.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007df2:	4b9e      	ldr	r3, [pc, #632]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007df6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007dfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e02:	d054      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e0a:	f200 808b 	bhi.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e14:	f000 8083 	beq.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e1e:	f200 8081 	bhi.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e28:	d02f      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e30:	d878      	bhi.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e3e:	d012      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007e40:	e070      	b.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e42:	4b8a      	ldr	r3, [pc, #552]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 feaf 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5e:	e3e4      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e64:	e3e1      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e66:	4b81      	ldr	r3, [pc, #516]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e72:	d107      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e74:	f107 0318 	add.w	r3, r7, #24
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fbf5 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e82:	e3d2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e88:	e3cf      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e8a:	4b78      	ldr	r3, [pc, #480]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e96:	d107      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e98:	f107 030c 	add.w	r3, r7, #12
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fd37 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea6:	e3c0      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eac:	e3bd      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eae:	4b6f      	ldr	r3, [pc, #444]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d10c      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d109      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eca:	4b68      	ldr	r3, [pc, #416]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	08db      	lsrs	r3, r3, #3
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	4a66      	ldr	r2, [pc, #408]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007edc:	e01e      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ede:	4b63      	ldr	r3, [pc, #396]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eea:	d106      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ef2:	d102      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef8:	e010      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007efa:	4b5c      	ldr	r3, [pc, #368]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f06:	d106      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f0e:	d102      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f10:	4b59      	ldr	r3, [pc, #356]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f14:	e002      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f1a:	e386      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f1c:	e385      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f1e:	4b57      	ldr	r3, [pc, #348]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f22:	e382      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f28:	e37f      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007f32:	430b      	orrs	r3, r1
 8007f34:	f040 80a7 	bne.w	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f38:	4b4c      	ldr	r3, [pc, #304]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f3c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007f40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f48:	d055      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f50:	f200 8096 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f5a:	f000 8084 	beq.w	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f64:	f200 808c 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f6e:	d030      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f76:	f200 8083 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f86:	d012      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007f88:	e07a      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f8a:	4b38      	ldr	r3, [pc, #224]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fe0b 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa6:	e340      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fac:	e33d      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fae:	4b2f      	ldr	r3, [pc, #188]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fba:	d107      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fbc:	f107 0318 	add.w	r3, r7, #24
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fb51 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fca:	e32e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd0:	e32b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fd2:	4b26      	ldr	r3, [pc, #152]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fde:	d107      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe0:	f107 030c 	add.w	r3, r7, #12
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fc93 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fee:	e31c      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff4:	e319      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ffa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ffe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008000:	4b1a      	ldr	r3, [pc, #104]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b04      	cmp	r3, #4
 800800a:	d10c      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800800c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008012:	4b16      	ldr	r3, [pc, #88]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	08db      	lsrs	r3, r3, #3
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	4a14      	ldr	r2, [pc, #80]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800801e:	fa22 f303 	lsr.w	r3, r2, r3
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008024:	e01e      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008026:	4b11      	ldr	r3, [pc, #68]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800802e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008032:	d106      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800803a:	d102      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800803c:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008040:	e010      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008042:	4b0a      	ldr	r3, [pc, #40]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800804a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800804e:	d106      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008056:	d102      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008058:	4b07      	ldr	r3, [pc, #28]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800805c:	e002      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008062:	e2e2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008064:	e2e1      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008066:	4b05      	ldr	r3, [pc, #20]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800806a:	e2de      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800806c:	58024400 	.word	0x58024400
 8008070:	03d09000 	.word	0x03d09000
 8008074:	003d0900 	.word	0x003d0900
 8008078:	017d7840 	.word	0x017d7840
 800807c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008084:	e2d1      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800808a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800808e:	430b      	orrs	r3, r1
 8008090:	f040 809c 	bne.w	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008094:	4b93      	ldr	r3, [pc, #588]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008098:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800809c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800809e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080a4:	d054      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080ac:	f200 808b 	bhi.w	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080b6:	f000 8083 	beq.w	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080c0:	f200 8081 	bhi.w	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ca:	d02f      	beq.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d2:	d878      	bhi.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e0:	d012      	beq.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80080e2:	e070      	b.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080e4:	4b7f      	ldr	r3, [pc, #508]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080f0:	d107      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fd5e 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008100:	e293      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008106:	e290      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008108:	4b76      	ldr	r3, [pc, #472]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008114:	d107      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008116:	f107 0318 	add.w	r3, r7, #24
 800811a:	4618      	mov	r0, r3
 800811c:	f000 faa4 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008124:	e281      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812a:	e27e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800812c:	4b6d      	ldr	r3, [pc, #436]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008138:	d107      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800813a:	f107 030c 	add.w	r3, r7, #12
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fbe6 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008148:	e26f      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814e:	e26c      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008150:	4b64      	ldr	r3, [pc, #400]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008154:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800815a:	4b62      	ldr	r3, [pc, #392]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b04      	cmp	r3, #4
 8008164:	d10c      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008168:	2b00      	cmp	r3, #0
 800816a:	d109      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800816c:	4b5d      	ldr	r3, [pc, #372]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	08db      	lsrs	r3, r3, #3
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	4a5c      	ldr	r2, [pc, #368]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
 800817c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800817e:	e01e      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008180:	4b58      	ldr	r3, [pc, #352]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800818c:	d106      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800818e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008194:	d102      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008196:	4b55      	ldr	r3, [pc, #340]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800819a:	e010      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800819c:	4b51      	ldr	r3, [pc, #324]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081a8:	d106      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80081aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081b0:	d102      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081b2:	4b4f      	ldr	r3, [pc, #316]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80081b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081b6:	e002      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081bc:	e235      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081be:	e234      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081c0:	4b4c      	ldr	r3, [pc, #304]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c4:	e231      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ca:	e22e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80081cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80081d4:	430b      	orrs	r3, r1
 80081d6:	f040 808f 	bne.w	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80081da:	4b42      	ldr	r3, [pc, #264]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081de:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80081e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081ea:	d06b      	beq.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80081ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081f2:	d874      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80081f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081fa:	d056      	beq.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80081fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008202:	d86c      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008206:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800820a:	d03b      	beq.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008212:	d864      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800821a:	d021      	beq.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008222:	d85c      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800822a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008230:	d004      	beq.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008232:	e054      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008234:	f7fe fa4c 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 8008238:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800823a:	e1f6      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800823c:	4b29      	ldr	r3, [pc, #164]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008244:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008248:	d107      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824a:	f107 0318 	add.w	r3, r7, #24
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fa0a 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008258:	e1e7      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800825e:	e1e4      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008260:	4b20      	ldr	r3, [pc, #128]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800826c:	d107      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826e:	f107 030c 	add.w	r3, r7, #12
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fb4c 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800827c:	e1d5      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008282:	e1d2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008284:	4b17      	ldr	r3, [pc, #92]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b04      	cmp	r3, #4
 800828e:	d109      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008290:	4b14      	ldr	r3, [pc, #80]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	08db      	lsrs	r3, r3, #3
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	4a13      	ldr	r2, [pc, #76]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
 80082a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a2:	e1c2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a8:	e1bf      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80082aa:	4b0e      	ldr	r3, [pc, #56]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b6:	d102      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80082b8:	4b0c      	ldr	r3, [pc, #48]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082bc:	e1b5      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c2:	e1b2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082c4:	4b07      	ldr	r3, [pc, #28]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082d0:	d102      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80082d2:	4b07      	ldr	r3, [pc, #28]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80082d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d6:	e1a8      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082dc:	e1a5      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e2:	e1a2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082e4:	58024400 	.word	0x58024400
 80082e8:	03d09000 	.word	0x03d09000
 80082ec:	003d0900 	.word	0x003d0900
 80082f0:	017d7840 	.word	0x017d7840
 80082f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008300:	430b      	orrs	r3, r1
 8008302:	d173      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008304:	4b9c      	ldr	r3, [pc, #624]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800830c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800830e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008310:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008314:	d02f      	beq.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800831c:	d863      	bhi.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800832a:	d012      	beq.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800832c:	e05b      	b.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800832e:	4b92      	ldr	r3, [pc, #584]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800833a:	d107      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800833c:	f107 0318 	add.w	r3, r7, #24
 8008340:	4618      	mov	r0, r3
 8008342:	f000 f991 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800834a:	e16e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008350:	e16b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008352:	4b89      	ldr	r3, [pc, #548]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800835a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800835e:	d107      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008360:	f107 030c 	add.w	r3, r7, #12
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fad3 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800836e:	e15c      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008374:	e159      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008376:	4b80      	ldr	r3, [pc, #512]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800837a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800837e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008380:	4b7d      	ldr	r3, [pc, #500]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b04      	cmp	r3, #4
 800838a:	d10c      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008392:	4b79      	ldr	r3, [pc, #484]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	08db      	lsrs	r3, r3, #3
 8008398:	f003 0303 	and.w	r3, r3, #3
 800839c:	4a77      	ldr	r2, [pc, #476]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800839e:	fa22 f303 	lsr.w	r3, r2, r3
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083a4:	e01e      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083a6:	4b74      	ldr	r3, [pc, #464]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b2:	d106      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80083b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083ba:	d102      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083bc:	4b70      	ldr	r3, [pc, #448]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083c0:	e010      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083c2:	4b6d      	ldr	r3, [pc, #436]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ce:	d106      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80083d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d6:	d102      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083d8:	4b6a      	ldr	r3, [pc, #424]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083dc:	e002      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80083e2:	e122      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083e4:	e121      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ea:	e11e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80083f4:	430b      	orrs	r3, r1
 80083f6:	d133      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80083f8:	4b5f      	ldr	r3, [pc, #380]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008400:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800840e:	d012      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008410:	e023      	b.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008412:	4b59      	ldr	r3, [pc, #356]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800841a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800841e:	d107      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fbc7 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800842e:	e0fc      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008434:	e0f9      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008436:	4b50      	ldr	r3, [pc, #320]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800843e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008442:	d107      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008444:	f107 0318 	add.w	r3, r7, #24
 8008448:	4618      	mov	r0, r3
 800844a:	f000 f90d 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008452:	e0ea      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008458:	e0e7      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800845e:	e0e4      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008464:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008468:	430b      	orrs	r3, r1
 800846a:	f040 808d 	bne.w	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800846e:	4b42      	ldr	r3, [pc, #264]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008472:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008476:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800847e:	d06b      	beq.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008486:	d874      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800848e:	d056      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008496:	d86c      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800849e:	d03b      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084a6:	d864      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ae:	d021      	beq.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b6:	d85c      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084c4:	d004      	beq.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80084c6:	e054      	b.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80084c8:	f000 f8b8 	bl	800863c <HAL_RCCEx_GetD3PCLK1Freq>
 80084cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084ce:	e0ac      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084d0:	4b29      	ldr	r3, [pc, #164]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084dc:	d107      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084de:	f107 0318 	add.w	r3, r7, #24
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f8c0 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ec:	e09d      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f2:	e09a      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084f4:	4b20      	ldr	r3, [pc, #128]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008500:	d107      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008502:	f107 030c 	add.w	r3, r7, #12
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fa02 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008510:	e08b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008516:	e088      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008518:	4b17      	ldr	r3, [pc, #92]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b04      	cmp	r3, #4
 8008522:	d109      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008524:	4b14      	ldr	r3, [pc, #80]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	08db      	lsrs	r3, r3, #3
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	4a13      	ldr	r2, [pc, #76]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008530:	fa22 f303 	lsr.w	r3, r2, r3
 8008534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008536:	e078      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853c:	e075      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800853e:	4b0e      	ldr	r3, [pc, #56]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800854a:	d102      	bne.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800854c:	4b0c      	ldr	r3, [pc, #48]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800854e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008550:	e06b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008556:	e068      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008558:	4b07      	ldr	r3, [pc, #28]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008564:	d102      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008566:	4b07      	ldr	r3, [pc, #28]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800856a:	e05e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008570:	e05b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008576:	e058      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008578:	58024400 	.word	0x58024400
 800857c:	03d09000 	.word	0x03d09000
 8008580:	003d0900 	.word	0x003d0900
 8008584:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800858c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008590:	430b      	orrs	r3, r1
 8008592:	d148      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008594:	4b27      	ldr	r3, [pc, #156]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008598:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800859c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800859e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a4:	d02a      	beq.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ac:	d838      	bhi.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80085ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ba:	d00d      	beq.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80085bc:	e030      	b.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085be:	4b1d      	ldr	r3, [pc, #116]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085ca:	d102      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80085cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d0:	e02b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d6:	e028      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085d8:	4b16      	ldr	r3, [pc, #88]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085e4:	d107      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fae4 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f4:	e019      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fa:	e016      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008608:	d107      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800860a:	f107 0318 	add.w	r3, r7, #24
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f82a 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008618:	e007      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861e:	e004      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008624:	e001      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800862a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800862c:	4618      	mov	r0, r3
 800862e:	3740      	adds	r7, #64	@ 0x40
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	58024400 	.word	0x58024400
 8008638:	017d7840 	.word	0x017d7840

0800863c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008640:	f7fe f816 	bl	8006670 <HAL_RCC_GetHCLKFreq>
 8008644:	4602      	mov	r2, r0
 8008646:	4b06      	ldr	r3, [pc, #24]	@ (8008660 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	091b      	lsrs	r3, r3, #4
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	4904      	ldr	r1, [pc, #16]	@ (8008664 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008652:	5ccb      	ldrb	r3, [r1, r3]
 8008654:	f003 031f 	and.w	r3, r3, #31
 8008658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800865c:	4618      	mov	r0, r3
 800865e:	bd80      	pop	{r7, pc}
 8008660:	58024400 	.word	0x58024400
 8008664:	08012a8c 	.word	0x08012a8c

08008668 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008668:	b480      	push	{r7}
 800866a:	b089      	sub	sp, #36	@ 0x24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008670:	4ba1      	ldr	r3, [pc, #644]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008674:	f003 0303 	and.w	r3, r3, #3
 8008678:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800867a:	4b9f      	ldr	r3, [pc, #636]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800867c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867e:	0b1b      	lsrs	r3, r3, #12
 8008680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008684:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008686:	4b9c      	ldr	r3, [pc, #624]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	091b      	lsrs	r3, r3, #4
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008692:	4b99      	ldr	r3, [pc, #612]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008696:	08db      	lsrs	r3, r3, #3
 8008698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	fb02 f303 	mul.w	r3, r2, r3
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 8111 	beq.w	80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	f000 8083 	beq.w	80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	f200 80a1 	bhi.w	8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d056      	beq.n	8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086d2:	e099      	b.n	8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086d4:	4b88      	ldr	r3, [pc, #544]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d02d      	beq.n	800873c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086e0:	4b85      	ldr	r3, [pc, #532]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	08db      	lsrs	r3, r3, #3
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	4a84      	ldr	r2, [pc, #528]	@ (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
 80086f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800870a:	4b7b      	ldr	r3, [pc, #492]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800870c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800871a:	ed97 6a03 	vldr	s12, [r7, #12]
 800871e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800872a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800872e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008736:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800873a:	e087      	b.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008746:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800874a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800874e:	4b6a      	ldr	r3, [pc, #424]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008762:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800876e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800877e:	e065      	b.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	ee07 3a90 	vmov	s15, r3
 8008786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800878e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008792:	4b59      	ldr	r3, [pc, #356]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879a:	ee07 3a90 	vmov	s15, r3
 800879e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087c2:	e043      	b.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800890c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087d6:	4b48      	ldr	r3, [pc, #288]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008806:	e021      	b.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	ee07 3a90 	vmov	s15, r3
 800880e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008812:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881a:	4b37      	ldr	r3, [pc, #220]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800881e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882a:	ed97 6a03 	vldr	s12, [r7, #12]
 800882e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800883e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800884a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800884c:	4b2a      	ldr	r3, [pc, #168]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800884e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008850:	0a5b      	lsrs	r3, r3, #9
 8008852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008866:	edd7 6a07 	vldr	s13, [r7, #28]
 800886a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800886e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008872:	ee17 2a90 	vmov	r2, s15
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800887a:	4b1f      	ldr	r3, [pc, #124]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008884:	ee07 3a90 	vmov	s15, r3
 8008888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008894:	edd7 6a07 	vldr	s13, [r7, #28]
 8008898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800889c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a0:	ee17 2a90 	vmov	r2, s15
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088a8:	4b13      	ldr	r3, [pc, #76]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ac:	0e1b      	lsrs	r3, r3, #24
 80088ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80088c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ce:	ee17 2a90 	vmov	r2, s15
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088d6:	e008      	b.n	80088ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	609a      	str	r2, [r3, #8]
}
 80088ea:	bf00      	nop
 80088ec:	3724      	adds	r7, #36	@ 0x24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	58024400 	.word	0x58024400
 80088fc:	03d09000 	.word	0x03d09000
 8008900:	46000000 	.word	0x46000000
 8008904:	4c742400 	.word	0x4c742400
 8008908:	4a742400 	.word	0x4a742400
 800890c:	4bbebc20 	.word	0x4bbebc20

08008910 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008910:	b480      	push	{r7}
 8008912:	b089      	sub	sp, #36	@ 0x24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008918:	4ba1      	ldr	r3, [pc, #644]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800891a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008922:	4b9f      	ldr	r3, [pc, #636]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008926:	0d1b      	lsrs	r3, r3, #20
 8008928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800892c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800892e:	4b9c      	ldr	r3, [pc, #624]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800893a:	4b99      	ldr	r3, [pc, #612]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800893c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893e:	08db      	lsrs	r3, r3, #3
 8008940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	fb02 f303 	mul.w	r3, r2, r3
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8111 	beq.w	8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b02      	cmp	r3, #2
 8008962:	f000 8083 	beq.w	8008a6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b02      	cmp	r3, #2
 800896a:	f200 80a1 	bhi.w	8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d056      	beq.n	8008a28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800897a:	e099      	b.n	8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800897c:	4b88      	ldr	r3, [pc, #544]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b00      	cmp	r3, #0
 8008986:	d02d      	beq.n	80089e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008988:	4b85      	ldr	r3, [pc, #532]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	08db      	lsrs	r3, r3, #3
 800898e:	f003 0303 	and.w	r3, r3, #3
 8008992:	4a84      	ldr	r2, [pc, #528]	@ (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008994:	fa22 f303 	lsr.w	r3, r2, r3
 8008998:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089b2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089e2:	e087      	b.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089f6:	4b6a      	ldr	r3, [pc, #424]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a26:	e065      	b.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3a:	4b59      	ldr	r3, [pc, #356]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a6a:	e043      	b.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a7e:	4b48      	ldr	r3, [pc, #288]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aae:	e021      	b.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac2:	4b37      	ldr	r3, [pc, #220]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ad6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008af2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008af4:	4b2a      	ldr	r3, [pc, #168]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af8:	0a5b      	lsrs	r3, r3, #9
 8008afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b1a:	ee17 2a90 	vmov	r2, s15
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b22:	4b1f      	ldr	r3, [pc, #124]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2c:	ee07 3a90 	vmov	s15, r3
 8008b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b48:	ee17 2a90 	vmov	r2, s15
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b50:	4b13      	ldr	r3, [pc, #76]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b54:	0e1b      	lsrs	r3, r3, #24
 8008b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b76:	ee17 2a90 	vmov	r2, s15
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b7e:	e008      	b.n	8008b92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	609a      	str	r2, [r3, #8]
}
 8008b92:	bf00      	nop
 8008b94:	3724      	adds	r7, #36	@ 0x24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	58024400 	.word	0x58024400
 8008ba4:	03d09000 	.word	0x03d09000
 8008ba8:	46000000 	.word	0x46000000
 8008bac:	4c742400 	.word	0x4c742400
 8008bb0:	4a742400 	.word	0x4a742400
 8008bb4:	4bbebc20 	.word	0x4bbebc20

08008bb8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b089      	sub	sp, #36	@ 0x24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bc0:	4ba0      	ldr	r3, [pc, #640]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008bca:	4b9e      	ldr	r3, [pc, #632]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bce:	091b      	lsrs	r3, r3, #4
 8008bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bd4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008bd6:	4b9b      	ldr	r3, [pc, #620]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008be0:	4b98      	ldr	r3, [pc, #608]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be4:	08db      	lsrs	r3, r3, #3
 8008be6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	fb02 f303 	mul.w	r3, r2, r3
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8111 	beq.w	8008e26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	f000 8083 	beq.w	8008d12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	f200 80a1 	bhi.w	8008d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d056      	beq.n	8008cce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008c20:	e099      	b.n	8008d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c22:	4b88      	ldr	r3, [pc, #544]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d02d      	beq.n	8008c8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c2e:	4b85      	ldr	r3, [pc, #532]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	08db      	lsrs	r3, r3, #3
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	4a83      	ldr	r2, [pc, #524]	@ (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	ee07 3a90 	vmov	s15, r3
 8008c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c58:	4b7a      	ldr	r3, [pc, #488]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c60:	ee07 3a90 	vmov	s15, r3
 8008c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c88:	e087      	b.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c94:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9c:	4b69      	ldr	r3, [pc, #420]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ccc:	e065      	b.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	ee07 3a90 	vmov	s15, r3
 8008cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008e54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce0:	4b58      	ldr	r3, [pc, #352]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce8:	ee07 3a90 	vmov	s15, r3
 8008cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d10:	e043      	b.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d24:	4b47      	ldr	r3, [pc, #284]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2c:	ee07 3a90 	vmov	s15, r3
 8008d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d38:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d54:	e021      	b.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	ee07 3a90 	vmov	s15, r3
 8008d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d60:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d68:	4b36      	ldr	r3, [pc, #216]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d70:	ee07 3a90 	vmov	s15, r3
 8008d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9e:	0a5b      	lsrs	r3, r3, #9
 8008da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da4:	ee07 3a90 	vmov	s15, r3
 8008da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc0:	ee17 2a90 	vmov	r2, s15
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dcc:	0c1b      	lsrs	r3, r3, #16
 8008dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dee:	ee17 2a90 	vmov	r2, s15
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008df6:	4b13      	ldr	r3, [pc, #76]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfa:	0e1b      	lsrs	r3, r3, #24
 8008dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e00:	ee07 3a90 	vmov	s15, r3
 8008e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1c:	ee17 2a90 	vmov	r2, s15
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e24:	e008      	b.n	8008e38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	609a      	str	r2, [r3, #8]
}
 8008e38:	bf00      	nop
 8008e3a:	3724      	adds	r7, #36	@ 0x24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	58024400 	.word	0x58024400
 8008e48:	03d09000 	.word	0x03d09000
 8008e4c:	46000000 	.word	0x46000000
 8008e50:	4c742400 	.word	0x4c742400
 8008e54:	4a742400 	.word	0x4a742400
 8008e58:	4bbebc20 	.word	0x4bbebc20

08008e5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e6a:	4b53      	ldr	r3, [pc, #332]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d101      	bne.n	8008e7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e099      	b.n	8008fae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008e80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e86:	f7fa f8d5 	bl	8003034 <HAL_GetTick>
 8008e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e8c:	e008      	b.n	8008ea0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e8e:	f7fa f8d1 	bl	8003034 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d901      	bls.n	8008ea0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e086      	b.n	8008fae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ea0:	4b45      	ldr	r3, [pc, #276]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f0      	bne.n	8008e8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008eac:	4b42      	ldr	r3, [pc, #264]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	031b      	lsls	r3, r3, #12
 8008eba:	493f      	ldr	r1, [pc, #252]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	025b      	lsls	r3, r3, #9
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	041b      	lsls	r3, r3, #16
 8008ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	061b      	lsls	r3, r3, #24
 8008eec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ef0:	4931      	ldr	r1, [pc, #196]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ef6:	4b30      	ldr	r3, [pc, #192]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	492d      	ldr	r1, [pc, #180]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f08:	4b2b      	ldr	r3, [pc, #172]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0c:	f023 0220 	bic.w	r2, r3, #32
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	4928      	ldr	r1, [pc, #160]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f1a:	4b27      	ldr	r3, [pc, #156]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1e:	4a26      	ldr	r2, [pc, #152]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f20:	f023 0310 	bic.w	r3, r3, #16
 8008f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f26:	4b24      	ldr	r3, [pc, #144]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f2a:	4b24      	ldr	r3, [pc, #144]	@ (8008fbc <RCCEx_PLL2_Config+0x160>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	69d2      	ldr	r2, [r2, #28]
 8008f32:	00d2      	lsls	r2, r2, #3
 8008f34:	4920      	ldr	r1, [pc, #128]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f40:	f043 0310 	orr.w	r3, r3, #16
 8008f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	4a19      	ldr	r2, [pc, #100]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f58:	e00f      	b.n	8008f7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d106      	bne.n	8008f6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f60:	4b15      	ldr	r3, [pc, #84]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	4a14      	ldr	r2, [pc, #80]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f6c:	e005      	b.n	8008f7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f6e:	4b12      	ldr	r3, [pc, #72]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f72:	4a11      	ldr	r2, [pc, #68]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f86:	f7fa f855 	bl	8003034 <HAL_GetTick>
 8008f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f8c:	e008      	b.n	8008fa0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f8e:	f7fa f851 	bl	8003034 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d901      	bls.n	8008fa0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e006      	b.n	8008fae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fa0:	4b05      	ldr	r3, [pc, #20]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0f0      	beq.n	8008f8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	ffff0007 	.word	0xffff0007

08008fc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fce:	4b53      	ldr	r3, [pc, #332]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd2:	f003 0303 	and.w	r3, r3, #3
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d101      	bne.n	8008fde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e099      	b.n	8009112 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fde:	4b4f      	ldr	r3, [pc, #316]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a4e      	ldr	r2, [pc, #312]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8008fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fea:	f7fa f823 	bl	8003034 <HAL_GetTick>
 8008fee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ff0:	e008      	b.n	8009004 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ff2:	f7fa f81f 	bl	8003034 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e086      	b.n	8009112 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009004:	4b45      	ldr	r3, [pc, #276]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1f0      	bne.n	8008ff2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009010:	4b42      	ldr	r3, [pc, #264]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009014:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	051b      	lsls	r3, r3, #20
 800901e:	493f      	ldr	r1, [pc, #252]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009020:	4313      	orrs	r3, r2
 8009022:	628b      	str	r3, [r1, #40]	@ 0x28
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	3b01      	subs	r3, #1
 800902a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	3b01      	subs	r3, #1
 8009034:	025b      	lsls	r3, r3, #9
 8009036:	b29b      	uxth	r3, r3
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	3b01      	subs	r3, #1
 8009040:	041b      	lsls	r3, r3, #16
 8009042:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009046:	431a      	orrs	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	3b01      	subs	r3, #1
 800904e:	061b      	lsls	r3, r3, #24
 8009050:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009054:	4931      	ldr	r1, [pc, #196]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009056:	4313      	orrs	r3, r2
 8009058:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800905a:	4b30      	ldr	r3, [pc, #192]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	492d      	ldr	r1, [pc, #180]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009068:	4313      	orrs	r3, r2
 800906a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800906c:	4b2b      	ldr	r3, [pc, #172]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800906e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009070:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	4928      	ldr	r1, [pc, #160]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800907a:	4313      	orrs	r3, r2
 800907c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800907e:	4b27      	ldr	r3, [pc, #156]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009082:	4a26      	ldr	r2, [pc, #152]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800908a:	4b24      	ldr	r3, [pc, #144]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800908c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800908e:	4b24      	ldr	r3, [pc, #144]	@ (8009120 <RCCEx_PLL3_Config+0x160>)
 8009090:	4013      	ands	r3, r2
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	69d2      	ldr	r2, [r2, #28]
 8009096:	00d2      	lsls	r2, r2, #3
 8009098:	4920      	ldr	r1, [pc, #128]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800909a:	4313      	orrs	r3, r2
 800909c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800909e:	4b1f      	ldr	r3, [pc, #124]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a2:	4a1e      	ldr	r2, [pc, #120]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d106      	bne.n	80090be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090b0:	4b1a      	ldr	r3, [pc, #104]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	4a19      	ldr	r2, [pc, #100]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80090ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090bc:	e00f      	b.n	80090de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d106      	bne.n	80090d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090c4:	4b15      	ldr	r3, [pc, #84]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c8:	4a14      	ldr	r2, [pc, #80]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090d0:	e005      	b.n	80090de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090d2:	4b12      	ldr	r3, [pc, #72]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d6:	4a11      	ldr	r2, [pc, #68]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090de:	4b0f      	ldr	r3, [pc, #60]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a0e      	ldr	r2, [pc, #56]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ea:	f7f9 ffa3 	bl	8003034 <HAL_GetTick>
 80090ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090f0:	e008      	b.n	8009104 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090f2:	f7f9 ff9f 	bl	8003034 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d901      	bls.n	8009104 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e006      	b.n	8009112 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009104:	4b05      	ldr	r3, [pc, #20]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0f0      	beq.n	80090f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	58024400 	.word	0x58024400
 8009120:	ffff0007 	.word	0xffff0007

08009124 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e1bd      	b.n	80094b2 <HAL_SPI_Init+0x38e>
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a88      	ldr	r2, [pc, #544]	@ (800935c <HAL_SPI_Init+0x238>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d00f      	beq.n	8009160 <HAL_SPI_Init+0x3c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a86      	ldr	r2, [pc, #536]	@ (8009360 <HAL_SPI_Init+0x23c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00a      	beq.n	8009160 <HAL_SPI_Init+0x3c>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a85      	ldr	r2, [pc, #532]	@ (8009364 <HAL_SPI_Init+0x240>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d005      	beq.n	8009160 <HAL_SPI_Init+0x3c>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	2b0f      	cmp	r3, #15
 800915a:	d901      	bls.n	8009160 <HAL_SPI_Init+0x3c>
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e1a8      	b.n	80094b2 <HAL_SPI_Init+0x38e>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fdd3 	bl	8009d0c <SPI_GetPacketSize>
 8009166:	6138      	str	r0, [r7, #16]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a7b      	ldr	r2, [pc, #492]	@ (800935c <HAL_SPI_Init+0x238>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00c      	beq.n	800918c <HAL_SPI_Init+0x68>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a7a      	ldr	r2, [pc, #488]	@ (8009360 <HAL_SPI_Init+0x23c>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d007      	beq.n	800918c <HAL_SPI_Init+0x68>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a78      	ldr	r2, [pc, #480]	@ (8009364 <HAL_SPI_Init+0x240>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d002      	beq.n	800918c <HAL_SPI_Init+0x68>
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b08      	cmp	r3, #8
 800918a:	d811      	bhi.n	80091b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009190:	4a72      	ldr	r2, [pc, #456]	@ (800935c <HAL_SPI_Init+0x238>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d009      	beq.n	80091aa <HAL_SPI_Init+0x86>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a71      	ldr	r2, [pc, #452]	@ (8009360 <HAL_SPI_Init+0x23c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d004      	beq.n	80091aa <HAL_SPI_Init+0x86>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a6f      	ldr	r2, [pc, #444]	@ (8009364 <HAL_SPI_Init+0x240>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d104      	bne.n	80091b4 <HAL_SPI_Init+0x90>
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b10      	cmp	r3, #16
 80091ae:	d901      	bls.n	80091b4 <HAL_SPI_Init+0x90>
  {
    return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e17e      	b.n	80094b2 <HAL_SPI_Init+0x38e>
  }

#if (USE_SPI_CRC != 0UL)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091bc:	d129      	bne.n	8009212 <HAL_SPI_Init+0xee>
  {
    /* Verify that the SPI instance supports CRC Length higher than 16bits */
    if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a66      	ldr	r2, [pc, #408]	@ (800935c <HAL_SPI_Init+0x238>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d010      	beq.n	80091ea <HAL_SPI_Init+0xc6>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a64      	ldr	r2, [pc, #400]	@ (8009360 <HAL_SPI_Init+0x23c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d00b      	beq.n	80091ea <HAL_SPI_Init+0xc6>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a63      	ldr	r2, [pc, #396]	@ (8009364 <HAL_SPI_Init+0x240>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d006      	beq.n	80091ea <HAL_SPI_Init+0xc6>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e0:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 80091e4:	d901      	bls.n	80091ea <HAL_SPI_Init+0xc6>
    {
      return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e163      	b.n	80094b2 <HAL_SPI_Init+0x38e>
    }

    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d104      	bne.n	80091fc <HAL_SPI_Init+0xd8>
    {
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	041b      	lsls	r3, r3, #16
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e002      	b.n	8009202 <HAL_SPI_Init+0xde>
    }
    else
    {
      crc_length = hspi->Init.CRCLength;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009200:	617b      	str	r3, [r7, #20]

    /* Verify the correctness of polynom size */
    assert_param(IS_SPI_CRC_POLYNOMIAL_SIZE(hspi->Init.CRCPolynomial, crc_length));

    /* Verify that the CRC Length is higher than DataSize */
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	0c1b      	lsrs	r3, r3, #16
 800920a:	429a      	cmp	r2, r3
 800920c:	d905      	bls.n	800921a <HAL_SPI_Init+0xf6>
    {
      return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e14f      	b.n	80094b2 <HAL_SPI_Init+0x38e>
    }
  }
  else
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	041b      	lsls	r3, r3, #16
 8009218:	617b      	str	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d106      	bne.n	8009234 <HAL_SPI_Init+0x110>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f8 fd08 	bl	8001c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 0201 	bic.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009254:	d119      	bne.n	800928a <HAL_SPI_Init+0x166>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800925e:	d103      	bne.n	8009268 <HAL_SPI_Init+0x144>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009264:	2b00      	cmp	r3, #0
 8009266:	d008      	beq.n	800927a <HAL_SPI_Init+0x156>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10c      	bne.n	800928a <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009278:	d107      	bne.n	800928a <HAL_SPI_Init+0x166>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009288:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00f      	beq.n	80092b6 <HAL_SPI_Init+0x192>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	2b06      	cmp	r3, #6
 800929c:	d90b      	bls.n	80092b6 <HAL_SPI_Init+0x192>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	e007      	b.n	80092c6 <HAL_SPI_Init+0x1a2>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80092c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69da      	ldr	r2, [r3, #28]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ce:	431a      	orrs	r2, r3
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d8:	ea42 0103 	orr.w	r1, r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f0:	431a      	orrs	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	431a      	orrs	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	431a      	orrs	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800931a:	431a      	orrs	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	431a      	orrs	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009326:	ea42 0103 	orr.w	r1, r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	60da      	str	r2, [r3, #12]
                                   hspi->Init.MasterSSIdleness        | hspi->Init.IOSwap));

#if (USE_SPI_CRC != 0UL)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800933e:	d17a      	bne.n	8009436 <HAL_SPI_Init+0x312>
  {
    /* Initialize TXCRC Pattern Initial Value */
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009344:	2b01      	cmp	r3, #1
 8009346:	d10f      	bne.n	8009368 <HAL_SPI_Init+0x244>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	e00e      	b.n	8009378 <HAL_SPI_Init+0x254>
 800935a:	bf00      	nop
 800935c:	40013000 	.word	0x40013000
 8009360:	40003800 	.word	0x40003800
 8009364:	40003c00 	.word	0x40003c00
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009376:	601a      	str	r2, [r3, #0]
    }

    /* Initialize RXCRC Pattern Initial Value */
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800937c:	2b01      	cmp	r3, #1
 800937e:	d108      	bne.n	8009392 <HAL_SPI_Init+0x26e>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	e007      	b.n	80093a2 <HAL_SPI_Init+0x27e>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80093a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable 33/17 bits CRC computation */
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a45      	ldr	r2, [pc, #276]	@ (80094bc <HAL_SPI_Init+0x398>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d00d      	beq.n	80093c8 <HAL_SPI_Init+0x2a4>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a43      	ldr	r2, [pc, #268]	@ (80094c0 <HAL_SPI_Init+0x39c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d008      	beq.n	80093c8 <HAL_SPI_Init+0x2a4>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a42      	ldr	r2, [pc, #264]	@ (80094c4 <HAL_SPI_Init+0x3a0>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d003      	beq.n	80093c8 <HAL_SPI_Init+0x2a4>
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 80093c6:	d012      	beq.n	80093ee <HAL_SPI_Init+0x2ca>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 80093cc:	4a3b      	ldr	r2, [pc, #236]	@ (80094bc <HAL_SPI_Init+0x398>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d009      	beq.n	80093e6 <HAL_SPI_Init+0x2c2>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a3a      	ldr	r2, [pc, #232]	@ (80094c0 <HAL_SPI_Init+0x39c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d004      	beq.n	80093e6 <HAL_SPI_Init+0x2c2>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a38      	ldr	r2, [pc, #224]	@ (80094c4 <HAL_SPI_Init+0x3a0>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d111      	bne.n	800940a <HAL_SPI_Init+0x2e6>
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f5b3 1ff8 	cmp.w	r3, #2031616	@ 0x1f0000
 80093ec:	d10d      	bne.n	800940a <HAL_SPI_Init+0x2e6>
    {
      /* Set SPI_CR1_CRC33_17 bit */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80093fc:	601a      	str	r2, [r3, #0]
      /* Write CRC polynomial in SPI Register */
      WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009406:	641a      	str	r2, [r3, #64]	@ 0x40
 8009408:	e015      	b.n	8009436 <HAL_SPI_Init+0x312>
    }
    else
    {
      /* Clear SPI_CR1_CRC33_17 bit */
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009418:	601a      	str	r2, [r3, #0]

      /* Write CRC polynomial and set MSB bit at 1 in SPI Register */
      /* Set MSB is mandatory for a correct CRC computation        */
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	0c1b      	lsrs	r3, r3, #16
 800941e:	3301      	adds	r3, #1
 8009420:	2201      	movs	r2, #1
 8009422:	fa02 f303 	lsl.w	r3, r2, r3
 8009426:	60fb      	str	r3, [r7, #12]
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	430a      	orrs	r2, r1
 8009434:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d117      	bne.n	800946e <HAL_SPI_Init+0x34a>
  {
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	d109      	bne.n	800945a <HAL_SPI_Init+0x336>
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009458:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800946c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 0201 	bic.w	r2, r2, #1
 800947c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <HAL_SPI_Init+0x37c>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	40013000 	.word	0x40013000
 80094c0:	40003800 	.word	0x40003800
 80094c4:	40003c00 	.word	0x40003c00

080094c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08e      	sub	sp, #56	@ 0x38
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3320      	adds	r3, #32
 80094dc:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3330      	adds	r3, #48	@ 0x30
 80094e4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ea:	095b      	lsrs	r3, r3, #5
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3301      	adds	r3, #1
 80094f0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094f2:	f7f9 fd9f 	bl	8003034 <HAL_GetTick>
 80094f6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80094f8:	887b      	ldrh	r3, [r7, #2]
 80094fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80094fc:	887b      	ldrh	r3, [r7, #2]
 80094fe:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b01      	cmp	r3, #1
 800950a:	d001      	beq.n	8009510 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800950c:	2302      	movs	r3, #2
 800950e:	e310      	b.n	8009b32 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d005      	beq.n	8009522 <HAL_SPI_TransmitReceive+0x5a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <HAL_SPI_TransmitReceive+0x5a>
 800951c:	887b      	ldrh	r3, [r7, #2]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e305      	b.n	8009b32 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800952c:	2b01      	cmp	r3, #1
 800952e:	d101      	bne.n	8009534 <HAL_SPI_TransmitReceive+0x6c>
 8009530:	2302      	movs	r3, #2
 8009532:	e2fe      	b.n	8009b32 <HAL_SPI_TransmitReceive+0x66a>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2205      	movs	r2, #5
 8009540:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	887a      	ldrh	r2, [r7, #2]
 8009556:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	887a      	ldrh	r2, [r7, #2]
 800955e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	887a      	ldrh	r2, [r7, #2]
 800956c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	887a      	ldrh	r2, [r7, #2]
 8009574:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009592:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a70      	ldr	r2, [pc, #448]	@ (800975c <HAL_SPI_TransmitReceive+0x294>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d009      	beq.n	80095b2 <HAL_SPI_TransmitReceive+0xea>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a6f      	ldr	r2, [pc, #444]	@ (8009760 <HAL_SPI_TransmitReceive+0x298>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d004      	beq.n	80095b2 <HAL_SPI_TransmitReceive+0xea>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a6d      	ldr	r2, [pc, #436]	@ (8009764 <HAL_SPI_TransmitReceive+0x29c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d102      	bne.n	80095b8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80095b2:	2310      	movs	r3, #16
 80095b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095b6:	e001      	b.n	80095bc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80095b8:	2308      	movs	r3, #8
 80095ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	4b69      	ldr	r3, [pc, #420]	@ (8009768 <HAL_SPI_TransmitReceive+0x2a0>)
 80095c4:	4013      	ands	r3, r2
 80095c6:	8879      	ldrh	r1, [r7, #2]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	6812      	ldr	r2, [r2, #0]
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f042 0201 	orr.w	r2, r2, #1
 80095de:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095e8:	d107      	bne.n	80095fa <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	2b0f      	cmp	r3, #15
 8009600:	f240 80a2 	bls.w	8009748 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009606:	089b      	lsrs	r3, r3, #2
 8009608:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800960a:	e094      	b.n	8009736 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b02      	cmp	r3, #2
 8009618:	d120      	bne.n	800965c <HAL_SPI_TransmitReceive+0x194>
 800961a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800961c:	2b00      	cmp	r3, #0
 800961e:	d01d      	beq.n	800965c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009620:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009622:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009626:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009628:	429a      	cmp	r2, r3
 800962a:	d217      	bcs.n	800965c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6812      	ldr	r2, [r2, #0]
 8009636:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800963c:	1d1a      	adds	r2, r3, #4
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009648:	b29b      	uxth	r3, r3
 800964a:	3b01      	subs	r3, #1
 800964c:	b29a      	uxth	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800965a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009664:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d065      	beq.n	8009736 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b01      	cmp	r3, #1
 8009676:	d118      	bne.n	80096aa <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009680:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009682:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009688:	1d1a      	adds	r2, r3, #4
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009694:	b29b      	uxth	r3, r3
 8009696:	3b01      	subs	r3, #1
 8009698:	b29a      	uxth	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80096a8:	e045      	b.n	8009736 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80096aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80096ac:	8bfb      	ldrh	r3, [r7, #30]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d21d      	bcs.n	80096ee <HAL_SPI_TransmitReceive+0x226>
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d018      	beq.n	80096ee <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80096c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096cc:	1d1a      	adds	r2, r3, #4
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80096ec:	e023      	b.n	8009736 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ee:	f7f9 fca1 	bl	8003034 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d803      	bhi.n	8009706 <HAL_SPI_TransmitReceive+0x23e>
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009704:	d102      	bne.n	800970c <HAL_SPI_TransmitReceive+0x244>
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	2b00      	cmp	r3, #0
 800970a:	d114      	bne.n	8009736 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 fa15 	bl	8009b3c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009718:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e1fd      	b.n	8009b32 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009736:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009738:	2b00      	cmp	r3, #0
 800973a:	f47f af67 	bne.w	800960c <HAL_SPI_TransmitReceive+0x144>
 800973e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009740:	2b00      	cmp	r3, #0
 8009742:	f47f af63 	bne.w	800960c <HAL_SPI_TransmitReceive+0x144>
 8009746:	e1ce      	b.n	8009ae6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	2b07      	cmp	r3, #7
 800974e:	f240 81c2 	bls.w	8009ad6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	085b      	lsrs	r3, r3, #1
 8009756:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009758:	e0c9      	b.n	80098ee <HAL_SPI_TransmitReceive+0x426>
 800975a:	bf00      	nop
 800975c:	40013000 	.word	0x40013000
 8009760:	40003800 	.word	0x40003800
 8009764:	40003c00 	.word	0x40003c00
 8009768:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	f003 0302 	and.w	r3, r3, #2
 8009776:	2b02      	cmp	r3, #2
 8009778:	d11f      	bne.n	80097ba <HAL_SPI_TransmitReceive+0x2f2>
 800977a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800977c:	2b00      	cmp	r3, #0
 800977e:	d01c      	beq.n	80097ba <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009780:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009782:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009786:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009788:	429a      	cmp	r2, r3
 800978a:	d216      	bcs.n	80097ba <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009790:	881a      	ldrh	r2, [r3, #0]
 8009792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009794:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800979a:	1c9a      	adds	r2, r3, #2
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80097c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8092 	beq.w	80098ee <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d118      	bne.n	800980a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097dc:	6a3a      	ldr	r2, [r7, #32]
 80097de:	8812      	ldrh	r2, [r2, #0]
 80097e0:	b292      	uxth	r2, r2
 80097e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097e8:	1c9a      	adds	r2, r3, #2
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009806:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009808:	e071      	b.n	80098ee <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800980a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800980c:	8bfb      	ldrh	r3, [r7, #30]
 800980e:	429a      	cmp	r2, r3
 8009810:	d228      	bcs.n	8009864 <HAL_SPI_TransmitReceive+0x39c>
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d023      	beq.n	8009864 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009820:	6a3a      	ldr	r2, [r7, #32]
 8009822:	8812      	ldrh	r2, [r2, #0]
 8009824:	b292      	uxth	r2, r2
 8009826:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800982c:	1c9a      	adds	r2, r3, #2
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009836:	6a3a      	ldr	r2, [r7, #32]
 8009838:	8812      	ldrh	r2, [r2, #0]
 800983a:	b292      	uxth	r2, r2
 800983c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009842:	1c9a      	adds	r2, r3, #2
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800984e:	b29b      	uxth	r3, r3
 8009850:	3b02      	subs	r3, #2
 8009852:	b29a      	uxth	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009860:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009862:	e044      	b.n	80098ee <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009864:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009866:	2b01      	cmp	r3, #1
 8009868:	d11d      	bne.n	80098a6 <HAL_SPI_TransmitReceive+0x3de>
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d018      	beq.n	80098a6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009878:	6a3a      	ldr	r2, [r7, #32]
 800987a:	8812      	ldrh	r2, [r2, #0]
 800987c:	b292      	uxth	r2, r2
 800987e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009884:	1c9a      	adds	r2, r3, #2
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009890:	b29b      	uxth	r3, r3
 8009892:	3b01      	subs	r3, #1
 8009894:	b29a      	uxth	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80098a4:	e023      	b.n	80098ee <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098a6:	f7f9 fbc5 	bl	8003034 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d803      	bhi.n	80098be <HAL_SPI_TransmitReceive+0x3f6>
 80098b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098bc:	d102      	bne.n	80098c4 <HAL_SPI_TransmitReceive+0x3fc>
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d114      	bne.n	80098ee <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 f939 	bl	8009b3c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e121      	b.n	8009b32 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80098ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f47f af3b 	bne.w	800976c <HAL_SPI_TransmitReceive+0x2a4>
 80098f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f47f af37 	bne.w	800976c <HAL_SPI_TransmitReceive+0x2a4>
 80098fe:	e0f2      	b.n	8009ae6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b02      	cmp	r3, #2
 800990c:	d121      	bne.n	8009952 <HAL_SPI_TransmitReceive+0x48a>
 800990e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01e      	beq.n	8009952 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009914:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009916:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800991c:	429a      	cmp	r2, r3
 800991e:	d218      	bcs.n	8009952 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3320      	adds	r3, #32
 800992a:	7812      	ldrb	r2, [r2, #0]
 800992c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800993e:	b29b      	uxth	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009950:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800995a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 80ba 	beq.w	8009ad6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	695b      	ldr	r3, [r3, #20]
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b01      	cmp	r3, #1
 800996e:	d11b      	bne.n	80099a8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009992:	b29b      	uxth	r3, r3
 8009994:	3b01      	subs	r3, #1
 8009996:	b29a      	uxth	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099a4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80099a6:	e096      	b.n	8009ad6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80099a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80099aa:	8bfb      	ldrh	r3, [r7, #30]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d24a      	bcs.n	8009a46 <HAL_SPI_TransmitReceive+0x57e>
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d045      	beq.n	8009a46 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099c6:	7812      	ldrb	r2, [r2, #0]
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099e2:	7812      	ldrb	r2, [r2, #0]
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099fe:	7812      	ldrb	r2, [r2, #0]
 8009a00:	b2d2      	uxtb	r2, r2
 8009a02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a1a:	7812      	ldrb	r2, [r2, #0]
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	3b04      	subs	r3, #4
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a42:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009a44:	e047      	b.n	8009ad6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009a46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d820      	bhi.n	8009a8e <HAL_SPI_TransmitReceive+0x5c6>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d01b      	beq.n	8009a8e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a62:	7812      	ldrb	r2, [r2, #0]
 8009a64:	b2d2      	uxtb	r2, r2
 8009a66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a8a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009a8c:	e023      	b.n	8009ad6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a8e:	f7f9 fad1 	bl	8003034 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d803      	bhi.n	8009aa6 <HAL_SPI_TransmitReceive+0x5de>
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa4:	d102      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x5e4>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d114      	bne.n	8009ad6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 f845 	bl	8009b3c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ab8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e02d      	b.n	8009b32 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009ad6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f47f af11 	bne.w	8009900 <HAL_SPI_TransmitReceive+0x438>
 8009ade:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f47f af0d 	bne.w	8009900 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aec:	2200      	movs	r2, #0
 8009aee:	2108      	movs	r1, #8
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 f8dd 	bl	8009cb0 <SPI_WaitOnFlagUntilTimeout>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b02:	f043 0220 	orr.w	r2, r3, #32
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 f815 	bl	8009b3c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e000      	b.n	8009b32 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8009b30:	2300      	movs	r3, #0
  }
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3730      	adds	r7, #48	@ 0x30
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop

08009b3c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0208 	orr.w	r2, r2, #8
 8009b5a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f042 0210 	orr.w	r2, r2, #16
 8009b6a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0201 	bic.w	r2, r2, #1
 8009b7a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6919      	ldr	r1, [r3, #16]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4b49      	ldr	r3, [pc, #292]	@ (8009cac <SPI_CloseTransfer+0x170>)
 8009b88:	400b      	ands	r3, r1
 8009b8a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009b9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d014      	beq.n	8009bd2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f003 0320 	and.w	r3, r3, #32
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00f      	beq.n	8009bd2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bb8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	699a      	ldr	r2, [r3, #24]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0220 	orr.w	r2, r2, #32
 8009bd0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d02e      	beq.n	8009c3c <SPI_CloseTransfer+0x100>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00f      	beq.n	8009c08 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bee:	f043 0204 	orr.w	r2, r3, #4
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	699a      	ldr	r2, [r3, #24]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c06:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c10:	d114      	bne.n	8009c3c <SPI_CloseTransfer+0x100>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00f      	beq.n	8009c3c <SPI_CloseTransfer+0x100>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c22:	f043 0202 	orr.w	r2, r3, #2
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c3a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00f      	beq.n	8009c66 <SPI_CloseTransfer+0x12a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c4c:	f043 0201 	orr.w	r2, r3, #1
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	699a      	ldr	r2, [r3, #24]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c64:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00f      	beq.n	8009c90 <SPI_CloseTransfer+0x154>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c76:	f043 0208 	orr.w	r2, r3, #8
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699a      	ldr	r2, [r3, #24]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c8e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009ca0:	bf00      	nop
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	fffffc90 	.word	0xfffffc90

08009cb0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009cc0:	e010      	b.n	8009ce4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cc2:	f7f9 f9b7 	bl	8003034 <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d803      	bhi.n	8009cda <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd8:	d102      	bne.n	8009ce0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e00f      	b.n	8009d04 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695a      	ldr	r2, [r3, #20]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4013      	ands	r3, r2
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	bf0c      	ite	eq
 8009cf4:	2301      	moveq	r3, #1
 8009cf6:	2300      	movne	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d0df      	beq.n	8009cc2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d18:	095b      	lsrs	r3, r3, #5
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	3301      	adds	r3, #1
 8009d24:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	3307      	adds	r3, #7
 8009d2a:	08db      	lsrs	r3, r3, #3
 8009d2c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	fb02 f303 	mul.w	r3, r2, r3
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b082      	sub	sp, #8
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e049      	b.n	8009de8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d106      	bne.n	8009d6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7f8 fc93 	bl	8002694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2202      	movs	r2, #2
 8009d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4610      	mov	r0, r2
 8009d82:	f000 fdff 	bl	800a984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d001      	beq.n	8009e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e054      	b.n	8009eb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f042 0201 	orr.w	r2, r2, #1
 8009e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a26      	ldr	r2, [pc, #152]	@ (8009ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d022      	beq.n	8009e70 <HAL_TIM_Base_Start_IT+0x80>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e32:	d01d      	beq.n	8009e70 <HAL_TIM_Base_Start_IT+0x80>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a22      	ldr	r2, [pc, #136]	@ (8009ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d018      	beq.n	8009e70 <HAL_TIM_Base_Start_IT+0x80>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a21      	ldr	r2, [pc, #132]	@ (8009ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d013      	beq.n	8009e70 <HAL_TIM_Base_Start_IT+0x80>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8009ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00e      	beq.n	8009e70 <HAL_TIM_Base_Start_IT+0x80>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a1e      	ldr	r2, [pc, #120]	@ (8009ed0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d009      	beq.n	8009e70 <HAL_TIM_Base_Start_IT+0x80>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d004      	beq.n	8009e70 <HAL_TIM_Base_Start_IT+0x80>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ed8 <HAL_TIM_Base_Start_IT+0xe8>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d115      	bne.n	8009e9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	4b19      	ldr	r3, [pc, #100]	@ (8009edc <HAL_TIM_Base_Start_IT+0xec>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b06      	cmp	r3, #6
 8009e80:	d015      	beq.n	8009eae <HAL_TIM_Base_Start_IT+0xbe>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e88:	d011      	beq.n	8009eae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f042 0201 	orr.w	r2, r2, #1
 8009e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e9a:	e008      	b.n	8009eae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f042 0201 	orr.w	r2, r2, #1
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	e000      	b.n	8009eb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	40010000 	.word	0x40010000
 8009ec4:	40000400 	.word	0x40000400
 8009ec8:	40000800 	.word	0x40000800
 8009ecc:	40000c00 	.word	0x40000c00
 8009ed0:	40010400 	.word	0x40010400
 8009ed4:	40001800 	.word	0x40001800
 8009ed8:	40014000 	.word	0x40014000
 8009edc:	00010007 	.word	0x00010007

08009ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e049      	b.n	8009f86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d106      	bne.n	8009f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7f8 fb58 	bl	80025bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	f000 fd30 	bl	800a984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
	...

08009f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <HAL_TIM_PWM_Start+0x24>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	bf14      	ite	ne
 8009fac:	2301      	movne	r3, #1
 8009fae:	2300      	moveq	r3, #0
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	e03c      	b.n	800a02e <HAL_TIM_PWM_Start+0x9e>
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	d109      	bne.n	8009fce <HAL_TIM_PWM_Start+0x3e>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	bf14      	ite	ne
 8009fc6:	2301      	movne	r3, #1
 8009fc8:	2300      	moveq	r3, #0
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	e02f      	b.n	800a02e <HAL_TIM_PWM_Start+0x9e>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b08      	cmp	r3, #8
 8009fd2:	d109      	bne.n	8009fe8 <HAL_TIM_PWM_Start+0x58>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	bf14      	ite	ne
 8009fe0:	2301      	movne	r3, #1
 8009fe2:	2300      	moveq	r3, #0
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	e022      	b.n	800a02e <HAL_TIM_PWM_Start+0x9e>
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2b0c      	cmp	r3, #12
 8009fec:	d109      	bne.n	800a002 <HAL_TIM_PWM_Start+0x72>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	bf14      	ite	ne
 8009ffa:	2301      	movne	r3, #1
 8009ffc:	2300      	moveq	r3, #0
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	e015      	b.n	800a02e <HAL_TIM_PWM_Start+0x9e>
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b10      	cmp	r3, #16
 800a006:	d109      	bne.n	800a01c <HAL_TIM_PWM_Start+0x8c>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b01      	cmp	r3, #1
 800a012:	bf14      	ite	ne
 800a014:	2301      	movne	r3, #1
 800a016:	2300      	moveq	r3, #0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	e008      	b.n	800a02e <HAL_TIM_PWM_Start+0x9e>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b01      	cmp	r3, #1
 800a026:	bf14      	ite	ne
 800a028:	2301      	movne	r3, #1
 800a02a:	2300      	moveq	r3, #0
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e0a1      	b.n	800a17a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d104      	bne.n	800a046 <HAL_TIM_PWM_Start+0xb6>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2202      	movs	r2, #2
 800a040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a044:	e023      	b.n	800a08e <HAL_TIM_PWM_Start+0xfe>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b04      	cmp	r3, #4
 800a04a:	d104      	bne.n	800a056 <HAL_TIM_PWM_Start+0xc6>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2202      	movs	r2, #2
 800a050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a054:	e01b      	b.n	800a08e <HAL_TIM_PWM_Start+0xfe>
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b08      	cmp	r3, #8
 800a05a:	d104      	bne.n	800a066 <HAL_TIM_PWM_Start+0xd6>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2202      	movs	r2, #2
 800a060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a064:	e013      	b.n	800a08e <HAL_TIM_PWM_Start+0xfe>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2b0c      	cmp	r3, #12
 800a06a:	d104      	bne.n	800a076 <HAL_TIM_PWM_Start+0xe6>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2202      	movs	r2, #2
 800a070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a074:	e00b      	b.n	800a08e <HAL_TIM_PWM_Start+0xfe>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b10      	cmp	r3, #16
 800a07a:	d104      	bne.n	800a086 <HAL_TIM_PWM_Start+0xf6>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a084:	e003      	b.n	800a08e <HAL_TIM_PWM_Start+0xfe>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2202      	movs	r2, #2
 800a08a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2201      	movs	r2, #1
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	4618      	mov	r0, r3
 800a098:	f001 f88e 	bl	800b1b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a38      	ldr	r2, [pc, #224]	@ (800a184 <HAL_TIM_PWM_Start+0x1f4>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d013      	beq.n	800a0ce <HAL_TIM_PWM_Start+0x13e>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a37      	ldr	r2, [pc, #220]	@ (800a188 <HAL_TIM_PWM_Start+0x1f8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d00e      	beq.n	800a0ce <HAL_TIM_PWM_Start+0x13e>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a35      	ldr	r2, [pc, #212]	@ (800a18c <HAL_TIM_PWM_Start+0x1fc>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d009      	beq.n	800a0ce <HAL_TIM_PWM_Start+0x13e>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a34      	ldr	r2, [pc, #208]	@ (800a190 <HAL_TIM_PWM_Start+0x200>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d004      	beq.n	800a0ce <HAL_TIM_PWM_Start+0x13e>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a32      	ldr	r2, [pc, #200]	@ (800a194 <HAL_TIM_PWM_Start+0x204>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d101      	bne.n	800a0d2 <HAL_TIM_PWM_Start+0x142>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e000      	b.n	800a0d4 <HAL_TIM_PWM_Start+0x144>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d007      	beq.n	800a0e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a25      	ldr	r2, [pc, #148]	@ (800a184 <HAL_TIM_PWM_Start+0x1f4>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d022      	beq.n	800a138 <HAL_TIM_PWM_Start+0x1a8>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0fa:	d01d      	beq.n	800a138 <HAL_TIM_PWM_Start+0x1a8>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a25      	ldr	r2, [pc, #148]	@ (800a198 <HAL_TIM_PWM_Start+0x208>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d018      	beq.n	800a138 <HAL_TIM_PWM_Start+0x1a8>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a24      	ldr	r2, [pc, #144]	@ (800a19c <HAL_TIM_PWM_Start+0x20c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d013      	beq.n	800a138 <HAL_TIM_PWM_Start+0x1a8>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a22      	ldr	r2, [pc, #136]	@ (800a1a0 <HAL_TIM_PWM_Start+0x210>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00e      	beq.n	800a138 <HAL_TIM_PWM_Start+0x1a8>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a1a      	ldr	r2, [pc, #104]	@ (800a188 <HAL_TIM_PWM_Start+0x1f8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d009      	beq.n	800a138 <HAL_TIM_PWM_Start+0x1a8>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a1e      	ldr	r2, [pc, #120]	@ (800a1a4 <HAL_TIM_PWM_Start+0x214>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d004      	beq.n	800a138 <HAL_TIM_PWM_Start+0x1a8>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a16      	ldr	r2, [pc, #88]	@ (800a18c <HAL_TIM_PWM_Start+0x1fc>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d115      	bne.n	800a164 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a8 <HAL_TIM_PWM_Start+0x218>)
 800a140:	4013      	ands	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b06      	cmp	r3, #6
 800a148:	d015      	beq.n	800a176 <HAL_TIM_PWM_Start+0x1e6>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a150:	d011      	beq.n	800a176 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f042 0201 	orr.w	r2, r2, #1
 800a160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a162:	e008      	b.n	800a176 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0201 	orr.w	r2, r2, #1
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	e000      	b.n	800a178 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	40010000 	.word	0x40010000
 800a188:	40010400 	.word	0x40010400
 800a18c:	40014000 	.word	0x40014000
 800a190:	40014400 	.word	0x40014400
 800a194:	40014800 	.word	0x40014800
 800a198:	40000400 	.word	0x40000400
 800a19c:	40000800 	.word	0x40000800
 800a1a0:	40000c00 	.word	0x40000c00
 800a1a4:	40001800 	.word	0x40001800
 800a1a8:	00010007 	.word	0x00010007

0800a1ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e08f      	b.n	800a2e0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d106      	bne.n	800a1da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7f8 fae1 	bl	800279c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6899      	ldr	r1, [r3, #8]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	4b3e      	ldr	r3, [pc, #248]	@ (800a2e8 <HAL_TIM_Encoder_Init+0x13c>)
 800a1ee:	400b      	ands	r3, r1
 800a1f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	f000 fbc1 	bl	800a984 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	4b31      	ldr	r3, [pc, #196]	@ (800a2ec <HAL_TIM_Encoder_Init+0x140>)
 800a228:	4013      	ands	r3, r2
 800a22a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	021b      	lsls	r3, r3, #8
 800a236:	4313      	orrs	r3, r2
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	4b2b      	ldr	r3, [pc, #172]	@ (800a2f0 <HAL_TIM_Encoder_Init+0x144>)
 800a242:	4013      	ands	r3, r2
 800a244:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4b2a      	ldr	r3, [pc, #168]	@ (800a2f4 <HAL_TIM_Encoder_Init+0x148>)
 800a24a:	4013      	ands	r3, r2
 800a24c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	021b      	lsls	r3, r3, #8
 800a258:	4313      	orrs	r3, r2
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	011a      	lsls	r2, r3, #4
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	031b      	lsls	r3, r3, #12
 800a26c:	4313      	orrs	r3, r2
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	4313      	orrs	r3, r2
 800a272:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a27a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a282:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	011b      	lsls	r3, r3, #4
 800a28e:	4313      	orrs	r3, r2
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	fffebff8 	.word	0xfffebff8
 800a2ec:	fffffcfc 	.word	0xfffffcfc
 800a2f0:	fffff3f3 	.word	0xfffff3f3
 800a2f4:	ffff0f0f 	.word	0xffff0f0f

0800a2f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d020      	beq.n	800a35c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d01b      	beq.n	800a35c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f06f 0202 	mvn.w	r2, #2
 800a32c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	f003 0303 	and.w	r3, r3, #3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fb00 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 800a348:	e005      	b.n	800a356 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 faf2 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fb03 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f003 0304 	and.w	r3, r3, #4
 800a362:	2b00      	cmp	r3, #0
 800a364:	d020      	beq.n	800a3a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d01b      	beq.n	800a3a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f06f 0204 	mvn.w	r2, #4
 800a378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2202      	movs	r2, #2
 800a37e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fada 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 800a394:	e005      	b.n	800a3a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 facc 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fadd 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f003 0308 	and.w	r3, r3, #8
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d020      	beq.n	800a3f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f003 0308 	and.w	r3, r3, #8
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d01b      	beq.n	800a3f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f06f 0208 	mvn.w	r2, #8
 800a3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2204      	movs	r2, #4
 800a3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fab4 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 800a3e0:	e005      	b.n	800a3ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 faa6 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fab7 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	f003 0310 	and.w	r3, r3, #16
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d020      	beq.n	800a440 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f003 0310 	and.w	r3, r3, #16
 800a404:	2b00      	cmp	r3, #0
 800a406:	d01b      	beq.n	800a440 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f06f 0210 	mvn.w	r2, #16
 800a410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2208      	movs	r2, #8
 800a416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fa8e 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 800a42c:	e005      	b.n	800a43a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fa80 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fa91 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f003 0301 	and.w	r3, r3, #1
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00c      	beq.n	800a464 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d007      	beq.n	800a464 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f06f 0201 	mvn.w	r2, #1
 800a45c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fa5e 	bl	800a920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d104      	bne.n	800a478 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00c      	beq.n	800a492 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d007      	beq.n	800a492 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a48a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 ffcf 	bl	800b430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00c      	beq.n	800a4b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d007      	beq.n	800a4b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 ffc7 	bl	800b444 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00c      	beq.n	800a4da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d007      	beq.n	800a4da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a4d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fa4b 	bl	800a970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	f003 0320 	and.w	r3, r3, #32
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00c      	beq.n	800a4fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f003 0320 	and.w	r3, r3, #32
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d007      	beq.n	800a4fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f06f 0220 	mvn.w	r2, #32
 800a4f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 ff8f 	bl	800b41c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4fe:	bf00      	nop
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a522:	2302      	movs	r3, #2
 800a524:	e0ff      	b.n	800a726 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b14      	cmp	r3, #20
 800a532:	f200 80f0 	bhi.w	800a716 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a536:	a201      	add	r2, pc, #4	@ (adr r2, 800a53c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a591 	.word	0x0800a591
 800a540:	0800a717 	.word	0x0800a717
 800a544:	0800a717 	.word	0x0800a717
 800a548:	0800a717 	.word	0x0800a717
 800a54c:	0800a5d1 	.word	0x0800a5d1
 800a550:	0800a717 	.word	0x0800a717
 800a554:	0800a717 	.word	0x0800a717
 800a558:	0800a717 	.word	0x0800a717
 800a55c:	0800a613 	.word	0x0800a613
 800a560:	0800a717 	.word	0x0800a717
 800a564:	0800a717 	.word	0x0800a717
 800a568:	0800a717 	.word	0x0800a717
 800a56c:	0800a653 	.word	0x0800a653
 800a570:	0800a717 	.word	0x0800a717
 800a574:	0800a717 	.word	0x0800a717
 800a578:	0800a717 	.word	0x0800a717
 800a57c:	0800a695 	.word	0x0800a695
 800a580:	0800a717 	.word	0x0800a717
 800a584:	0800a717 	.word	0x0800a717
 800a588:	0800a717 	.word	0x0800a717
 800a58c:	0800a6d5 	.word	0x0800a6d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fa9a 	bl	800aad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699a      	ldr	r2, [r3, #24]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 0208 	orr.w	r2, r2, #8
 800a5aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	699a      	ldr	r2, [r3, #24]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f022 0204 	bic.w	r2, r2, #4
 800a5ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6999      	ldr	r1, [r3, #24]
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	691a      	ldr	r2, [r3, #16]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	619a      	str	r2, [r3, #24]
      break;
 800a5ce:	e0a5      	b.n	800a71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68b9      	ldr	r1, [r7, #8]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fb0a 	bl	800abf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	699a      	ldr	r2, [r3, #24]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	699a      	ldr	r2, [r3, #24]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6999      	ldr	r1, [r3, #24]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	021a      	lsls	r2, r3, #8
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	430a      	orrs	r2, r1
 800a60e:	619a      	str	r2, [r3, #24]
      break;
 800a610:	e084      	b.n	800a71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68b9      	ldr	r1, [r7, #8]
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fb73 	bl	800ad04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69da      	ldr	r2, [r3, #28]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f042 0208 	orr.w	r2, r2, #8
 800a62c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69da      	ldr	r2, [r3, #28]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 0204 	bic.w	r2, r2, #4
 800a63c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	69d9      	ldr	r1, [r3, #28]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	61da      	str	r2, [r3, #28]
      break;
 800a650:	e064      	b.n	800a71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68b9      	ldr	r1, [r7, #8]
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fbdb 	bl	800ae14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69da      	ldr	r2, [r3, #28]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a66c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69da      	ldr	r2, [r3, #28]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a67c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69d9      	ldr	r1, [r3, #28]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	021a      	lsls	r2, r3, #8
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	61da      	str	r2, [r3, #28]
      break;
 800a692:	e043      	b.n	800a71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 fc24 	bl	800aee8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0208 	orr.w	r2, r2, #8
 800a6ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0204 	bic.w	r2, r2, #4
 800a6be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	691a      	ldr	r2, [r3, #16]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a6d2:	e023      	b.n	800a71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fc68 	bl	800afb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	021a      	lsls	r2, r3, #8
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a714:	e002      	b.n	800a71c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	75fb      	strb	r3, [r7, #23]
      break;
 800a71a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a724:	7dfb      	ldrb	r3, [r7, #23]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop

0800a730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a744:	2b01      	cmp	r3, #1
 800a746:	d101      	bne.n	800a74c <HAL_TIM_ConfigClockSource+0x1c>
 800a748:	2302      	movs	r3, #2
 800a74a:	e0dc      	b.n	800a906 <HAL_TIM_ConfigClockSource+0x1d6>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2202      	movs	r2, #2
 800a758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	4b6a      	ldr	r3, [pc, #424]	@ (800a910 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a768:	4013      	ands	r3, r2
 800a76a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a64      	ldr	r2, [pc, #400]	@ (800a914 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	f000 80a9 	beq.w	800a8da <HAL_TIM_ConfigClockSource+0x1aa>
 800a788:	4a62      	ldr	r2, [pc, #392]	@ (800a914 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	f200 80ae 	bhi.w	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a790:	4a61      	ldr	r2, [pc, #388]	@ (800a918 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a792:	4293      	cmp	r3, r2
 800a794:	f000 80a1 	beq.w	800a8da <HAL_TIM_ConfigClockSource+0x1aa>
 800a798:	4a5f      	ldr	r2, [pc, #380]	@ (800a918 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	f200 80a6 	bhi.w	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a7a0:	4a5e      	ldr	r2, [pc, #376]	@ (800a91c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	f000 8099 	beq.w	800a8da <HAL_TIM_ConfigClockSource+0x1aa>
 800a7a8:	4a5c      	ldr	r2, [pc, #368]	@ (800a91c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	f200 809e 	bhi.w	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a7b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a7b4:	f000 8091 	beq.w	800a8da <HAL_TIM_ConfigClockSource+0x1aa>
 800a7b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a7bc:	f200 8096 	bhi.w	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a7c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7c4:	f000 8089 	beq.w	800a8da <HAL_TIM_ConfigClockSource+0x1aa>
 800a7c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7cc:	f200 808e 	bhi.w	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a7d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7d4:	d03e      	beq.n	800a854 <HAL_TIM_ConfigClockSource+0x124>
 800a7d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7da:	f200 8087 	bhi.w	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a7de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7e2:	f000 8086 	beq.w	800a8f2 <HAL_TIM_ConfigClockSource+0x1c2>
 800a7e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7ea:	d87f      	bhi.n	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a7ec:	2b70      	cmp	r3, #112	@ 0x70
 800a7ee:	d01a      	beq.n	800a826 <HAL_TIM_ConfigClockSource+0xf6>
 800a7f0:	2b70      	cmp	r3, #112	@ 0x70
 800a7f2:	d87b      	bhi.n	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a7f4:	2b60      	cmp	r3, #96	@ 0x60
 800a7f6:	d050      	beq.n	800a89a <HAL_TIM_ConfigClockSource+0x16a>
 800a7f8:	2b60      	cmp	r3, #96	@ 0x60
 800a7fa:	d877      	bhi.n	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a7fc:	2b50      	cmp	r3, #80	@ 0x50
 800a7fe:	d03c      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x14a>
 800a800:	2b50      	cmp	r3, #80	@ 0x50
 800a802:	d873      	bhi.n	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a804:	2b40      	cmp	r3, #64	@ 0x40
 800a806:	d058      	beq.n	800a8ba <HAL_TIM_ConfigClockSource+0x18a>
 800a808:	2b40      	cmp	r3, #64	@ 0x40
 800a80a:	d86f      	bhi.n	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a80c:	2b30      	cmp	r3, #48	@ 0x30
 800a80e:	d064      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x1aa>
 800a810:	2b30      	cmp	r3, #48	@ 0x30
 800a812:	d86b      	bhi.n	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a814:	2b20      	cmp	r3, #32
 800a816:	d060      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x1aa>
 800a818:	2b20      	cmp	r3, #32
 800a81a:	d867      	bhi.n	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d05c      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x1aa>
 800a820:	2b10      	cmp	r3, #16
 800a822:	d05a      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x1aa>
 800a824:	e062      	b.n	800a8ec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a836:	f000 fc9f 	bl	800b178 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	609a      	str	r2, [r3, #8]
      break;
 800a852:	e04f      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a864:	f000 fc88 	bl	800b178 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689a      	ldr	r2, [r3, #8]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a876:	609a      	str	r2, [r3, #8]
      break;
 800a878:	e03c      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a886:	461a      	mov	r2, r3
 800a888:	f000 fbf8 	bl	800b07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2150      	movs	r1, #80	@ 0x50
 800a892:	4618      	mov	r0, r3
 800a894:	f000 fc52 	bl	800b13c <TIM_ITRx_SetConfig>
      break;
 800a898:	e02c      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f000 fc17 	bl	800b0da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2160      	movs	r1, #96	@ 0x60
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 fc42 	bl	800b13c <TIM_ITRx_SetConfig>
      break;
 800a8b8:	e01c      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f000 fbd8 	bl	800b07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2140      	movs	r1, #64	@ 0x40
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 fc32 	bl	800b13c <TIM_ITRx_SetConfig>
      break;
 800a8d8:	e00c      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f000 fc29 	bl	800b13c <TIM_ITRx_SetConfig>
      break;
 800a8ea:	e003      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f0:	e000      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a8f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	ffceff88 	.word	0xffceff88
 800a914:	00100040 	.word	0x00100040
 800a918:	00100030 	.word	0x00100030
 800a91c:	00100020 	.word	0x00100020

0800a920 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a46      	ldr	r2, [pc, #280]	@ (800aab0 <TIM_Base_SetConfig+0x12c>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d013      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9a2:	d00f      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a43      	ldr	r2, [pc, #268]	@ (800aab4 <TIM_Base_SetConfig+0x130>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d00b      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a42      	ldr	r2, [pc, #264]	@ (800aab8 <TIM_Base_SetConfig+0x134>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d007      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a41      	ldr	r2, [pc, #260]	@ (800aabc <TIM_Base_SetConfig+0x138>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d003      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a40      	ldr	r2, [pc, #256]	@ (800aac0 <TIM_Base_SetConfig+0x13c>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d108      	bne.n	800a9d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a35      	ldr	r2, [pc, #212]	@ (800aab0 <TIM_Base_SetConfig+0x12c>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d01f      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e4:	d01b      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a32      	ldr	r2, [pc, #200]	@ (800aab4 <TIM_Base_SetConfig+0x130>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d017      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a31      	ldr	r2, [pc, #196]	@ (800aab8 <TIM_Base_SetConfig+0x134>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d013      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a30      	ldr	r2, [pc, #192]	@ (800aabc <TIM_Base_SetConfig+0x138>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00f      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a2f      	ldr	r2, [pc, #188]	@ (800aac0 <TIM_Base_SetConfig+0x13c>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00b      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a2e      	ldr	r2, [pc, #184]	@ (800aac4 <TIM_Base_SetConfig+0x140>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d007      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a2d      	ldr	r2, [pc, #180]	@ (800aac8 <TIM_Base_SetConfig+0x144>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a2c      	ldr	r2, [pc, #176]	@ (800aacc <TIM_Base_SetConfig+0x148>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d108      	bne.n	800aa30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a16      	ldr	r2, [pc, #88]	@ (800aab0 <TIM_Base_SetConfig+0x12c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d00f      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a18      	ldr	r2, [pc, #96]	@ (800aac0 <TIM_Base_SetConfig+0x13c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00b      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a17      	ldr	r2, [pc, #92]	@ (800aac4 <TIM_Base_SetConfig+0x140>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d007      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a16      	ldr	r2, [pc, #88]	@ (800aac8 <TIM_Base_SetConfig+0x144>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d003      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a15      	ldr	r2, [pc, #84]	@ (800aacc <TIM_Base_SetConfig+0x148>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d103      	bne.n	800aa84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	691a      	ldr	r2, [r3, #16]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d105      	bne.n	800aaa2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	f023 0201 	bic.w	r2, r3, #1
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	611a      	str	r2, [r3, #16]
  }
}
 800aaa2:	bf00      	nop
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	40010000 	.word	0x40010000
 800aab4:	40000400 	.word	0x40000400
 800aab8:	40000800 	.word	0x40000800
 800aabc:	40000c00 	.word	0x40000c00
 800aac0:	40010400 	.word	0x40010400
 800aac4:	40014000 	.word	0x40014000
 800aac8:	40014400 	.word	0x40014400
 800aacc:	40014800 	.word	0x40014800

0800aad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	f023 0201 	bic.w	r2, r3, #1
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	4b37      	ldr	r3, [pc, #220]	@ (800abd8 <TIM_OC1_SetConfig+0x108>)
 800aafc:	4013      	ands	r3, r2
 800aafe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f023 0303 	bic.w	r3, r3, #3
 800ab06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f023 0302 	bic.w	r3, r3, #2
 800ab18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a2d      	ldr	r2, [pc, #180]	@ (800abdc <TIM_OC1_SetConfig+0x10c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d00f      	beq.n	800ab4c <TIM_OC1_SetConfig+0x7c>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a2c      	ldr	r2, [pc, #176]	@ (800abe0 <TIM_OC1_SetConfig+0x110>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00b      	beq.n	800ab4c <TIM_OC1_SetConfig+0x7c>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a2b      	ldr	r2, [pc, #172]	@ (800abe4 <TIM_OC1_SetConfig+0x114>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d007      	beq.n	800ab4c <TIM_OC1_SetConfig+0x7c>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a2a      	ldr	r2, [pc, #168]	@ (800abe8 <TIM_OC1_SetConfig+0x118>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d003      	beq.n	800ab4c <TIM_OC1_SetConfig+0x7c>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a29      	ldr	r2, [pc, #164]	@ (800abec <TIM_OC1_SetConfig+0x11c>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d10c      	bne.n	800ab66 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f023 0308 	bic.w	r3, r3, #8
 800ab52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f023 0304 	bic.w	r3, r3, #4
 800ab64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a1c      	ldr	r2, [pc, #112]	@ (800abdc <TIM_OC1_SetConfig+0x10c>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d00f      	beq.n	800ab8e <TIM_OC1_SetConfig+0xbe>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a1b      	ldr	r2, [pc, #108]	@ (800abe0 <TIM_OC1_SetConfig+0x110>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d00b      	beq.n	800ab8e <TIM_OC1_SetConfig+0xbe>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a1a      	ldr	r2, [pc, #104]	@ (800abe4 <TIM_OC1_SetConfig+0x114>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d007      	beq.n	800ab8e <TIM_OC1_SetConfig+0xbe>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a19      	ldr	r2, [pc, #100]	@ (800abe8 <TIM_OC1_SetConfig+0x118>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d003      	beq.n	800ab8e <TIM_OC1_SetConfig+0xbe>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a18      	ldr	r2, [pc, #96]	@ (800abec <TIM_OC1_SetConfig+0x11c>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d111      	bne.n	800abb2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ab9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	4313      	orrs	r3, r2
 800abb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	621a      	str	r2, [r3, #32]
}
 800abcc:	bf00      	nop
 800abce:	371c      	adds	r7, #28
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	fffeff8f 	.word	0xfffeff8f
 800abdc:	40010000 	.word	0x40010000
 800abe0:	40010400 	.word	0x40010400
 800abe4:	40014000 	.word	0x40014000
 800abe8:	40014400 	.word	0x40014400
 800abec:	40014800 	.word	0x40014800

0800abf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	f023 0210 	bic.w	r2, r3, #16
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4b34      	ldr	r3, [pc, #208]	@ (800acec <TIM_OC2_SetConfig+0xfc>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f023 0320 	bic.w	r3, r3, #32
 800ac3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	011b      	lsls	r3, r3, #4
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a29      	ldr	r2, [pc, #164]	@ (800acf0 <TIM_OC2_SetConfig+0x100>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d003      	beq.n	800ac58 <TIM_OC2_SetConfig+0x68>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a28      	ldr	r2, [pc, #160]	@ (800acf4 <TIM_OC2_SetConfig+0x104>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d10d      	bne.n	800ac74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a1e      	ldr	r2, [pc, #120]	@ (800acf0 <TIM_OC2_SetConfig+0x100>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d00f      	beq.n	800ac9c <TIM_OC2_SetConfig+0xac>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a1d      	ldr	r2, [pc, #116]	@ (800acf4 <TIM_OC2_SetConfig+0x104>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d00b      	beq.n	800ac9c <TIM_OC2_SetConfig+0xac>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a1c      	ldr	r2, [pc, #112]	@ (800acf8 <TIM_OC2_SetConfig+0x108>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d007      	beq.n	800ac9c <TIM_OC2_SetConfig+0xac>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a1b      	ldr	r2, [pc, #108]	@ (800acfc <TIM_OC2_SetConfig+0x10c>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d003      	beq.n	800ac9c <TIM_OC2_SetConfig+0xac>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a1a      	ldr	r2, [pc, #104]	@ (800ad00 <TIM_OC2_SetConfig+0x110>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d113      	bne.n	800acc4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	695b      	ldr	r3, [r3, #20]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	621a      	str	r2, [r3, #32]
}
 800acde:	bf00      	nop
 800ace0:	371c      	adds	r7, #28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	feff8fff 	.word	0xfeff8fff
 800acf0:	40010000 	.word	0x40010000
 800acf4:	40010400 	.word	0x40010400
 800acf8:	40014000 	.word	0x40014000
 800acfc:	40014400 	.word	0x40014400
 800ad00:	40014800 	.word	0x40014800

0800ad04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	69db      	ldr	r3, [r3, #28]
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	4b33      	ldr	r3, [pc, #204]	@ (800adfc <TIM_OC3_SetConfig+0xf8>)
 800ad30:	4013      	ands	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 0303 	bic.w	r3, r3, #3
 800ad3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	021b      	lsls	r3, r3, #8
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a28      	ldr	r2, [pc, #160]	@ (800ae00 <TIM_OC3_SetConfig+0xfc>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d003      	beq.n	800ad6a <TIM_OC3_SetConfig+0x66>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a27      	ldr	r2, [pc, #156]	@ (800ae04 <TIM_OC3_SetConfig+0x100>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d10d      	bne.n	800ad86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a1d      	ldr	r2, [pc, #116]	@ (800ae00 <TIM_OC3_SetConfig+0xfc>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d00f      	beq.n	800adae <TIM_OC3_SetConfig+0xaa>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a1c      	ldr	r2, [pc, #112]	@ (800ae04 <TIM_OC3_SetConfig+0x100>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d00b      	beq.n	800adae <TIM_OC3_SetConfig+0xaa>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a1b      	ldr	r2, [pc, #108]	@ (800ae08 <TIM_OC3_SetConfig+0x104>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d007      	beq.n	800adae <TIM_OC3_SetConfig+0xaa>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a1a      	ldr	r2, [pc, #104]	@ (800ae0c <TIM_OC3_SetConfig+0x108>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d003      	beq.n	800adae <TIM_OC3_SetConfig+0xaa>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a19      	ldr	r2, [pc, #100]	@ (800ae10 <TIM_OC3_SetConfig+0x10c>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d113      	bne.n	800add6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800adbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	011b      	lsls	r3, r3, #4
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	011b      	lsls	r3, r3, #4
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	4313      	orrs	r3, r2
 800add4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	621a      	str	r2, [r3, #32]
}
 800adf0:	bf00      	nop
 800adf2:	371c      	adds	r7, #28
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	fffeff8f 	.word	0xfffeff8f
 800ae00:	40010000 	.word	0x40010000
 800ae04:	40010400 	.word	0x40010400
 800ae08:	40014000 	.word	0x40014000
 800ae0c:	40014400 	.word	0x40014400
 800ae10:	40014800 	.word	0x40014800

0800ae14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4b24      	ldr	r3, [pc, #144]	@ (800aed0 <TIM_OC4_SetConfig+0xbc>)
 800ae40:	4013      	ands	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	021b      	lsls	r3, r3, #8
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	031b      	lsls	r3, r3, #12
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a19      	ldr	r2, [pc, #100]	@ (800aed4 <TIM_OC4_SetConfig+0xc0>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d00f      	beq.n	800ae94 <TIM_OC4_SetConfig+0x80>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a18      	ldr	r2, [pc, #96]	@ (800aed8 <TIM_OC4_SetConfig+0xc4>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d00b      	beq.n	800ae94 <TIM_OC4_SetConfig+0x80>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a17      	ldr	r2, [pc, #92]	@ (800aedc <TIM_OC4_SetConfig+0xc8>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d007      	beq.n	800ae94 <TIM_OC4_SetConfig+0x80>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a16      	ldr	r2, [pc, #88]	@ (800aee0 <TIM_OC4_SetConfig+0xcc>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d003      	beq.n	800ae94 <TIM_OC4_SetConfig+0x80>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a15      	ldr	r2, [pc, #84]	@ (800aee4 <TIM_OC4_SetConfig+0xd0>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d109      	bne.n	800aea8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	019b      	lsls	r3, r3, #6
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	621a      	str	r2, [r3, #32]
}
 800aec2:	bf00      	nop
 800aec4:	371c      	adds	r7, #28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	feff8fff 	.word	0xfeff8fff
 800aed4:	40010000 	.word	0x40010000
 800aed8:	40010400 	.word	0x40010400
 800aedc:	40014000 	.word	0x40014000
 800aee0:	40014400 	.word	0x40014400
 800aee4:	40014800 	.word	0x40014800

0800aee8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4b21      	ldr	r3, [pc, #132]	@ (800af98 <TIM_OC5_SetConfig+0xb0>)
 800af14:	4013      	ands	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	4313      	orrs	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800af28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	041b      	lsls	r3, r3, #16
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	4313      	orrs	r3, r2
 800af34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a18      	ldr	r2, [pc, #96]	@ (800af9c <TIM_OC5_SetConfig+0xb4>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d00f      	beq.n	800af5e <TIM_OC5_SetConfig+0x76>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a17      	ldr	r2, [pc, #92]	@ (800afa0 <TIM_OC5_SetConfig+0xb8>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d00b      	beq.n	800af5e <TIM_OC5_SetConfig+0x76>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a16      	ldr	r2, [pc, #88]	@ (800afa4 <TIM_OC5_SetConfig+0xbc>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d007      	beq.n	800af5e <TIM_OC5_SetConfig+0x76>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a15      	ldr	r2, [pc, #84]	@ (800afa8 <TIM_OC5_SetConfig+0xc0>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d003      	beq.n	800af5e <TIM_OC5_SetConfig+0x76>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a14      	ldr	r2, [pc, #80]	@ (800afac <TIM_OC5_SetConfig+0xc4>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d109      	bne.n	800af72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	021b      	lsls	r3, r3, #8
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	4313      	orrs	r3, r2
 800af70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	685a      	ldr	r2, [r3, #4]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	621a      	str	r2, [r3, #32]
}
 800af8c:	bf00      	nop
 800af8e:	371c      	adds	r7, #28
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	fffeff8f 	.word	0xfffeff8f
 800af9c:	40010000 	.word	0x40010000
 800afa0:	40010400 	.word	0x40010400
 800afa4:	40014000 	.word	0x40014000
 800afa8:	40014400 	.word	0x40014400
 800afac:	40014800 	.word	0x40014800

0800afb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b087      	sub	sp, #28
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a1b      	ldr	r3, [r3, #32]
 800afbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4b22      	ldr	r3, [pc, #136]	@ (800b064 <TIM_OC6_SetConfig+0xb4>)
 800afdc:	4013      	ands	r3, r2
 800afde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	021b      	lsls	r3, r3, #8
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4313      	orrs	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	051b      	lsls	r3, r3, #20
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	4313      	orrs	r3, r2
 800affe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a19      	ldr	r2, [pc, #100]	@ (800b068 <TIM_OC6_SetConfig+0xb8>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d00f      	beq.n	800b028 <TIM_OC6_SetConfig+0x78>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a18      	ldr	r2, [pc, #96]	@ (800b06c <TIM_OC6_SetConfig+0xbc>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00b      	beq.n	800b028 <TIM_OC6_SetConfig+0x78>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a17      	ldr	r2, [pc, #92]	@ (800b070 <TIM_OC6_SetConfig+0xc0>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d007      	beq.n	800b028 <TIM_OC6_SetConfig+0x78>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a16      	ldr	r2, [pc, #88]	@ (800b074 <TIM_OC6_SetConfig+0xc4>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d003      	beq.n	800b028 <TIM_OC6_SetConfig+0x78>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a15      	ldr	r2, [pc, #84]	@ (800b078 <TIM_OC6_SetConfig+0xc8>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d109      	bne.n	800b03c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b02e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	029b      	lsls	r3, r3, #10
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	4313      	orrs	r3, r2
 800b03a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	621a      	str	r2, [r3, #32]
}
 800b056:	bf00      	nop
 800b058:	371c      	adds	r7, #28
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	feff8fff 	.word	0xfeff8fff
 800b068:	40010000 	.word	0x40010000
 800b06c:	40010400 	.word	0x40010400
 800b070:	40014000 	.word	0x40014000
 800b074:	40014400 	.word	0x40014400
 800b078:	40014800 	.word	0x40014800

0800b07c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b087      	sub	sp, #28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	f023 0201 	bic.w	r2, r3, #1
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	011b      	lsls	r3, r3, #4
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f023 030a 	bic.w	r3, r3, #10
 800b0b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	621a      	str	r2, [r3, #32]
}
 800b0ce:	bf00      	nop
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b087      	sub	sp, #28
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	60f8      	str	r0, [r7, #12]
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
 800b0f0:	f023 0210 	bic.w	r2, r3, #16
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	031b      	lsls	r3, r3, #12
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b116:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	011b      	lsls	r3, r3, #4
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	4313      	orrs	r3, r2
 800b120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	621a      	str	r2, [r3, #32]
}
 800b12e:	bf00      	nop
 800b130:	371c      	adds	r7, #28
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
	...

0800b13c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	4b09      	ldr	r3, [pc, #36]	@ (800b174 <TIM_ITRx_SetConfig+0x38>)
 800b150:	4013      	ands	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	4313      	orrs	r3, r2
 800b15a:	f043 0307 	orr.w	r3, r3, #7
 800b15e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	609a      	str	r2, [r3, #8]
}
 800b166:	bf00      	nop
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	ffcfff8f 	.word	0xffcfff8f

0800b178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b178:	b480      	push	{r7}
 800b17a:	b087      	sub	sp, #28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	021a      	lsls	r2, r3, #8
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	431a      	orrs	r2, r3
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	697a      	ldr	r2, [r7, #20]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	609a      	str	r2, [r3, #8]
}
 800b1ac:	bf00      	nop
 800b1ae:	371c      	adds	r7, #28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f003 031f 	and.w	r3, r3, #31
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6a1a      	ldr	r2, [r3, #32]
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	43db      	mvns	r3, r3
 800b1da:	401a      	ands	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6a1a      	ldr	r2, [r3, #32]
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f003 031f 	and.w	r3, r3, #31
 800b1ea:	6879      	ldr	r1, [r7, #4]
 800b1ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	621a      	str	r2, [r3, #32]
}
 800b1f6:	bf00      	nop
 800b1f8:	371c      	adds	r7, #28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
	...

0800b204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b214:	2b01      	cmp	r3, #1
 800b216:	d101      	bne.n	800b21c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b218:	2302      	movs	r3, #2
 800b21a:	e06d      	b.n	800b2f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2202      	movs	r2, #2
 800b228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a30      	ldr	r2, [pc, #192]	@ (800b304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d004      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a2f      	ldr	r2, [pc, #188]	@ (800b308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d108      	bne.n	800b262 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b256:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	4313      	orrs	r3, r2
 800b260:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b268:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	4313      	orrs	r3, r2
 800b272:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a20      	ldr	r2, [pc, #128]	@ (800b304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d022      	beq.n	800b2cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b28e:	d01d      	beq.n	800b2cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a1d      	ldr	r2, [pc, #116]	@ (800b30c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d018      	beq.n	800b2cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a1c      	ldr	r2, [pc, #112]	@ (800b310 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d013      	beq.n	800b2cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a1a      	ldr	r2, [pc, #104]	@ (800b314 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d00e      	beq.n	800b2cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a15      	ldr	r2, [pc, #84]	@ (800b308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d009      	beq.n	800b2cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a16      	ldr	r2, [pc, #88]	@ (800b318 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d004      	beq.n	800b2cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a15      	ldr	r2, [pc, #84]	@ (800b31c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d10c      	bne.n	800b2e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68ba      	ldr	r2, [r7, #8]
 800b2e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	40010000 	.word	0x40010000
 800b308:	40010400 	.word	0x40010400
 800b30c:	40000400 	.word	0x40000400
 800b310:	40000800 	.word	0x40000800
 800b314:	40000c00 	.word	0x40000c00
 800b318:	40001800 	.word	0x40001800
 800b31c:	40014000 	.word	0x40014000

0800b320 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b334:	2b01      	cmp	r3, #1
 800b336:	d101      	bne.n	800b33c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b338:	2302      	movs	r3, #2
 800b33a:	e065      	b.n	800b408 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4313      	orrs	r3, r2
 800b37a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	4313      	orrs	r3, r2
 800b388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	695b      	ldr	r3, [r3, #20]
 800b394:	4313      	orrs	r3, r2
 800b396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	041b      	lsls	r3, r3, #16
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a16      	ldr	r2, [pc, #88]	@ (800b414 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d004      	beq.n	800b3ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a14      	ldr	r2, [pc, #80]	@ (800b418 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d115      	bne.n	800b3f6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d4:	051b      	lsls	r3, r3, #20
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	69db      	ldr	r3, [r3, #28]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	40010000 	.word	0x40010000
 800b418:	40010400 	.word	0x40010400

0800b41c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e042      	b.n	800b4f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b470:	2b00      	cmp	r3, #0
 800b472:	d106      	bne.n	800b482 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7f7 fbbd 	bl	8002bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2224      	movs	r2, #36	@ 0x24
 800b486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f022 0201 	bic.w	r2, r2, #1
 800b498:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f001 fa44 	bl	800c930 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fcd9 	bl	800be60 <UART_SetConfig>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d101      	bne.n	800b4b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e01b      	b.n	800b4f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b4c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	689a      	ldr	r2, [r3, #8]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b4d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f042 0201 	orr.w	r2, r2, #1
 800b4e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 fac3 	bl	800ca74 <UART_CheckIdleState>
 800b4ee:	4603      	mov	r3, r0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08a      	sub	sp, #40	@ 0x28
 800b4fc:	af02      	add	r7, sp, #8
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	4613      	mov	r3, r2
 800b506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d17b      	bne.n	800b60a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <HAL_UART_Transmit+0x26>
 800b518:	88fb      	ldrh	r3, [r7, #6]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e074      	b.n	800b60c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2221      	movs	r2, #33	@ 0x21
 800b52e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b532:	f7f7 fd7f 	bl	8003034 <HAL_GetTick>
 800b536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	88fa      	ldrh	r2, [r7, #6]
 800b53c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	88fa      	ldrh	r2, [r7, #6]
 800b544:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b550:	d108      	bne.n	800b564 <HAL_UART_Transmit+0x6c>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d104      	bne.n	800b564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b55a:	2300      	movs	r3, #0
 800b55c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	61bb      	str	r3, [r7, #24]
 800b562:	e003      	b.n	800b56c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b568:	2300      	movs	r3, #0
 800b56a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b56c:	e030      	b.n	800b5d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	2200      	movs	r2, #0
 800b576:	2180      	movs	r1, #128	@ 0x80
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f001 fb25 	bl	800cbc8 <UART_WaitOnFlagUntilTimeout>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d005      	beq.n	800b590 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2220      	movs	r2, #32
 800b588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e03d      	b.n	800b60c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10b      	bne.n	800b5ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	461a      	mov	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	3302      	adds	r3, #2
 800b5aa:	61bb      	str	r3, [r7, #24]
 800b5ac:	e007      	b.n	800b5be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1c8      	bne.n	800b56e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2140      	movs	r1, #64	@ 0x40
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f001 faee 	bl	800cbc8 <UART_WaitOnFlagUntilTimeout>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d005      	beq.n	800b5fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e006      	b.n	800b60c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2220      	movs	r2, #32
 800b602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	e000      	b.n	800b60c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b60a:	2302      	movs	r3, #2
  }
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b08a      	sub	sp, #40	@ 0x28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	4613      	mov	r3, r2
 800b620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d137      	bne.n	800b69c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d002      	beq.n	800b638 <HAL_UART_Receive_IT+0x24>
 800b632:	88fb      	ldrh	r3, [r7, #6]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	e030      	b.n	800b69e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2200      	movs	r2, #0
 800b640:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a18      	ldr	r2, [pc, #96]	@ (800b6a8 <HAL_UART_Receive_IT+0x94>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d01f      	beq.n	800b68c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d018      	beq.n	800b68c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	e853 3f00 	ldrex	r3, [r3]
 800b666:	613b      	str	r3, [r7, #16]
   return(result);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b66e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	461a      	mov	r2, r3
 800b676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b678:	623b      	str	r3, [r7, #32]
 800b67a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67c:	69f9      	ldr	r1, [r7, #28]
 800b67e:	6a3a      	ldr	r2, [r7, #32]
 800b680:	e841 2300 	strex	r3, r2, [r1]
 800b684:	61bb      	str	r3, [r7, #24]
   return(result);
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e6      	bne.n	800b65a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b68c:	88fb      	ldrh	r3, [r7, #6]
 800b68e:	461a      	mov	r2, r3
 800b690:	68b9      	ldr	r1, [r7, #8]
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f001 fb06 	bl	800cca4 <UART_Start_Receive_IT>
 800b698:	4603      	mov	r3, r0
 800b69a:	e000      	b.n	800b69e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b69c:	2302      	movs	r3, #2
  }
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3728      	adds	r7, #40	@ 0x28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	58000c00 	.word	0x58000c00

0800b6ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b0ba      	sub	sp, #232	@ 0xe8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b6d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b6d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b6da:	4013      	ands	r3, r2
 800b6dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b6e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d11b      	bne.n	800b720 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6ec:	f003 0320 	and.w	r3, r3, #32
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d015      	beq.n	800b720 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6f8:	f003 0320 	and.w	r3, r3, #32
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d105      	bne.n	800b70c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d009      	beq.n	800b720 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 8377 	beq.w	800be04 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	4798      	blx	r3
      }
      return;
 800b71e:	e371      	b.n	800be04 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b724:	2b00      	cmp	r3, #0
 800b726:	f000 8123 	beq.w	800b970 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b72a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b72e:	4b8d      	ldr	r3, [pc, #564]	@ (800b964 <HAL_UART_IRQHandler+0x2b8>)
 800b730:	4013      	ands	r3, r2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d106      	bne.n	800b744 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b736:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b73a:	4b8b      	ldr	r3, [pc, #556]	@ (800b968 <HAL_UART_IRQHandler+0x2bc>)
 800b73c:	4013      	ands	r3, r2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 8116 	beq.w	800b970 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d011      	beq.n	800b774 <HAL_UART_IRQHandler+0xc8>
 800b750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00b      	beq.n	800b774 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2201      	movs	r2, #1
 800b762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b76a:	f043 0201 	orr.w	r2, r3, #1
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b778:	f003 0302 	and.w	r3, r3, #2
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d011      	beq.n	800b7a4 <HAL_UART_IRQHandler+0xf8>
 800b780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00b      	beq.n	800b7a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2202      	movs	r2, #2
 800b792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b79a:	f043 0204 	orr.w	r2, r3, #4
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7a8:	f003 0304 	and.w	r3, r3, #4
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d011      	beq.n	800b7d4 <HAL_UART_IRQHandler+0x128>
 800b7b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00b      	beq.n	800b7d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2204      	movs	r2, #4
 800b7c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ca:	f043 0202 	orr.w	r2, r3, #2
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7d8:	f003 0308 	and.w	r3, r3, #8
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d017      	beq.n	800b810 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7e4:	f003 0320 	and.w	r3, r3, #32
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d105      	bne.n	800b7f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b7ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b7f0:	4b5c      	ldr	r3, [pc, #368]	@ (800b964 <HAL_UART_IRQHandler+0x2b8>)
 800b7f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00b      	beq.n	800b810 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2208      	movs	r2, #8
 800b7fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b806:	f043 0208 	orr.w	r2, r3, #8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d012      	beq.n	800b842 <HAL_UART_IRQHandler+0x196>
 800b81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b820:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00c      	beq.n	800b842 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b838:	f043 0220 	orr.w	r2, r3, #32
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f000 82dd 	beq.w	800be08 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b852:	f003 0320 	and.w	r3, r3, #32
 800b856:	2b00      	cmp	r3, #0
 800b858:	d013      	beq.n	800b882 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b85a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b85e:	f003 0320 	and.w	r3, r3, #32
 800b862:	2b00      	cmp	r3, #0
 800b864:	d105      	bne.n	800b872 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b86a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d007      	beq.n	800b882 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b888:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b896:	2b40      	cmp	r3, #64	@ 0x40
 800b898:	d005      	beq.n	800b8a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b89a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b89e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d054      	beq.n	800b950 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f001 fb1e 	bl	800cee8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8b6:	2b40      	cmp	r3, #64	@ 0x40
 800b8b8:	d146      	bne.n	800b948 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3308      	adds	r3, #8
 800b8c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b8d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b8e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b8ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b8f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b8f6:	e841 2300 	strex	r3, r2, [r1]
 800b8fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b8fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1d9      	bne.n	800b8ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d017      	beq.n	800b940 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b916:	4a15      	ldr	r2, [pc, #84]	@ (800b96c <HAL_UART_IRQHandler+0x2c0>)
 800b918:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b920:	4618      	mov	r0, r3
 800b922:	f7f9 fa69 	bl	8004df8 <HAL_DMA_Abort_IT>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d019      	beq.n	800b960 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b93a:	4610      	mov	r0, r2
 800b93c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b93e:	e00f      	b.n	800b960 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fa77 	bl	800be34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b946:	e00b      	b.n	800b960 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fa73 	bl	800be34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b94e:	e007      	b.n	800b960 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fa6f 	bl	800be34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b95e:	e253      	b.n	800be08 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b960:	bf00      	nop
    return;
 800b962:	e251      	b.n	800be08 <HAL_UART_IRQHandler+0x75c>
 800b964:	10000001 	.word	0x10000001
 800b968:	04000120 	.word	0x04000120
 800b96c:	0800cfb5 	.word	0x0800cfb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b974:	2b01      	cmp	r3, #1
 800b976:	f040 81e7 	bne.w	800bd48 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b97e:	f003 0310 	and.w	r3, r3, #16
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 81e0 	beq.w	800bd48 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b98c:	f003 0310 	and.w	r3, r3, #16
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 81d9 	beq.w	800bd48 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2210      	movs	r2, #16
 800b99c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9a8:	2b40      	cmp	r3, #64	@ 0x40
 800b9aa:	f040 8151 	bne.w	800bc50 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a96      	ldr	r2, [pc, #600]	@ (800bc10 <HAL_UART_IRQHandler+0x564>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d068      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a93      	ldr	r2, [pc, #588]	@ (800bc14 <HAL_UART_IRQHandler+0x568>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d061      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a91      	ldr	r2, [pc, #580]	@ (800bc18 <HAL_UART_IRQHandler+0x56c>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d05a      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a8e      	ldr	r2, [pc, #568]	@ (800bc1c <HAL_UART_IRQHandler+0x570>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d053      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a8c      	ldr	r2, [pc, #560]	@ (800bc20 <HAL_UART_IRQHandler+0x574>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d04c      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a89      	ldr	r2, [pc, #548]	@ (800bc24 <HAL_UART_IRQHandler+0x578>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d045      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a87      	ldr	r2, [pc, #540]	@ (800bc28 <HAL_UART_IRQHandler+0x57c>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d03e      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a84      	ldr	r2, [pc, #528]	@ (800bc2c <HAL_UART_IRQHandler+0x580>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d037      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a82      	ldr	r2, [pc, #520]	@ (800bc30 <HAL_UART_IRQHandler+0x584>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d030      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a7f      	ldr	r2, [pc, #508]	@ (800bc34 <HAL_UART_IRQHandler+0x588>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d029      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a7d      	ldr	r2, [pc, #500]	@ (800bc38 <HAL_UART_IRQHandler+0x58c>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d022      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a7a      	ldr	r2, [pc, #488]	@ (800bc3c <HAL_UART_IRQHandler+0x590>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d01b      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a78      	ldr	r2, [pc, #480]	@ (800bc40 <HAL_UART_IRQHandler+0x594>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d014      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a75      	ldr	r2, [pc, #468]	@ (800bc44 <HAL_UART_IRQHandler+0x598>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d00d      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a73      	ldr	r2, [pc, #460]	@ (800bc48 <HAL_UART_IRQHandler+0x59c>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d006      	beq.n	800ba8e <HAL_UART_IRQHandler+0x3e2>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a70      	ldr	r2, [pc, #448]	@ (800bc4c <HAL_UART_IRQHandler+0x5a0>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d106      	bne.n	800ba9c <HAL_UART_IRQHandler+0x3f0>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	e005      	b.n	800baa8 <HAL_UART_IRQHandler+0x3fc>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800baac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 81ab 	beq.w	800be0c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800babc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bac0:	429a      	cmp	r2, r3
 800bac2:	f080 81a3 	bcs.w	800be0c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bacc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bad6:	69db      	ldr	r3, [r3, #28]
 800bad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800badc:	f000 8087 	beq.w	800bbee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800baec:	e853 3f00 	ldrex	r3, [r3]
 800baf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800baf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800baf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bafc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	461a      	mov	r2, r3
 800bb06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bb0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bb16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bb1a:	e841 2300 	strex	r3, r2, [r1]
 800bb1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bb22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1da      	bne.n	800bae0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3308      	adds	r3, #8
 800bb30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb34:	e853 3f00 	ldrex	r3, [r3]
 800bb38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bb3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb3c:	f023 0301 	bic.w	r3, r3, #1
 800bb40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3308      	adds	r3, #8
 800bb4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bb4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bb52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bb56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bb5a:	e841 2300 	strex	r3, r2, [r1]
 800bb5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bb60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1e1      	bne.n	800bb2a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3308      	adds	r3, #8
 800bb6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb70:	e853 3f00 	ldrex	r3, [r3]
 800bb74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bb76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3308      	adds	r3, #8
 800bb86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bb8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bb8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bb90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bb98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e3      	bne.n	800bb66 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2220      	movs	r2, #32
 800bba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbb4:	e853 3f00 	ldrex	r3, [r3]
 800bbb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bbba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbbc:	f023 0310 	bic.w	r3, r3, #16
 800bbc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bbd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbd6:	e841 2300 	strex	r3, r2, [r1]
 800bbda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bbdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1e4      	bne.n	800bbac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7f8 fde7 	bl	80047bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f91d 	bl	800be48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc0e:	e0fd      	b.n	800be0c <HAL_UART_IRQHandler+0x760>
 800bc10:	40020010 	.word	0x40020010
 800bc14:	40020028 	.word	0x40020028
 800bc18:	40020040 	.word	0x40020040
 800bc1c:	40020058 	.word	0x40020058
 800bc20:	40020070 	.word	0x40020070
 800bc24:	40020088 	.word	0x40020088
 800bc28:	400200a0 	.word	0x400200a0
 800bc2c:	400200b8 	.word	0x400200b8
 800bc30:	40020410 	.word	0x40020410
 800bc34:	40020428 	.word	0x40020428
 800bc38:	40020440 	.word	0x40020440
 800bc3c:	40020458 	.word	0x40020458
 800bc40:	40020470 	.word	0x40020470
 800bc44:	40020488 	.word	0x40020488
 800bc48:	400204a0 	.word	0x400204a0
 800bc4c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 80cf 	beq.w	800be10 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bc72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 80ca 	beq.w	800be10 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc84:	e853 3f00 	ldrex	r3, [r3]
 800bc88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc9e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bca0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bca4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bca6:	e841 2300 	strex	r3, r2, [r1]
 800bcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bcac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1e4      	bne.n	800bc7c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbc:	e853 3f00 	ldrex	r3, [r3]
 800bcc0:	623b      	str	r3, [r7, #32]
   return(result);
 800bcc2:	6a3a      	ldr	r2, [r7, #32]
 800bcc4:	4b55      	ldr	r3, [pc, #340]	@ (800be1c <HAL_UART_IRQHandler+0x770>)
 800bcc6:	4013      	ands	r3, r2
 800bcc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bcd6:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcde:	e841 2300 	strex	r3, r2, [r1]
 800bce2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e3      	bne.n	800bcb2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f023 0310 	bic.w	r3, r3, #16
 800bd12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd20:	61fb      	str	r3, [r7, #28]
 800bd22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd24:	69b9      	ldr	r1, [r7, #24]
 800bd26:	69fa      	ldr	r2, [r7, #28]
 800bd28:	e841 2300 	strex	r3, r2, [r1]
 800bd2c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e4      	bne.n	800bcfe <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2202      	movs	r2, #2
 800bd38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd3e:	4619      	mov	r1, r3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f881 	bl	800be48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd46:	e063      	b.n	800be10 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00e      	beq.n	800bd72 <HAL_UART_IRQHandler+0x6c6>
 800bd54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d008      	beq.n	800bd72 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bd68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f001 fe80 	bl	800da70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd70:	e051      	b.n	800be16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bd72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d014      	beq.n	800bda8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bd7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d105      	bne.n	800bd96 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d008      	beq.n	800bda8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d03a      	beq.n	800be14 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	4798      	blx	r3
    }
    return;
 800bda6:	e035      	b.n	800be14 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bda8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d009      	beq.n	800bdc8 <HAL_UART_IRQHandler+0x71c>
 800bdb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f001 f90d 	bl	800cfe0 <UART_EndTransmit_IT>
    return;
 800bdc6:	e026      	b.n	800be16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bdc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d009      	beq.n	800bde8 <HAL_UART_IRQHandler+0x73c>
 800bdd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d003      	beq.n	800bde8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f001 fe59 	bl	800da98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bde6:	e016      	b.n	800be16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bde8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d010      	beq.n	800be16 <HAL_UART_IRQHandler+0x76a>
 800bdf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	da0c      	bge.n	800be16 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f001 fe41 	bl	800da84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be02:	e008      	b.n	800be16 <HAL_UART_IRQHandler+0x76a>
      return;
 800be04:	bf00      	nop
 800be06:	e006      	b.n	800be16 <HAL_UART_IRQHandler+0x76a>
    return;
 800be08:	bf00      	nop
 800be0a:	e004      	b.n	800be16 <HAL_UART_IRQHandler+0x76a>
      return;
 800be0c:	bf00      	nop
 800be0e:	e002      	b.n	800be16 <HAL_UART_IRQHandler+0x76a>
      return;
 800be10:	bf00      	nop
 800be12:	e000      	b.n	800be16 <HAL_UART_IRQHandler+0x76a>
    return;
 800be14:	bf00      	nop
  }
}
 800be16:	37e8      	adds	r7, #232	@ 0xe8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	effffffe 	.word	0xeffffffe

0800be20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be54:	bf00      	nop
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be64:	b092      	sub	sp, #72	@ 0x48
 800be66:	af00      	add	r7, sp, #0
 800be68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	689a      	ldr	r2, [r3, #8]
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	431a      	orrs	r2, r3
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	431a      	orrs	r2, r3
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	69db      	ldr	r3, [r3, #28]
 800be84:	4313      	orrs	r3, r2
 800be86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	4bbe      	ldr	r3, [pc, #760]	@ (800c188 <UART_SetConfig+0x328>)
 800be90:	4013      	ands	r3, r2
 800be92:	697a      	ldr	r2, [r7, #20]
 800be94:	6812      	ldr	r2, [r2, #0]
 800be96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be98:	430b      	orrs	r3, r1
 800be9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	68da      	ldr	r2, [r3, #12]
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	430a      	orrs	r2, r1
 800beb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4ab3      	ldr	r2, [pc, #716]	@ (800c18c <UART_SetConfig+0x32c>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d004      	beq.n	800becc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bec8:	4313      	orrs	r3, r2
 800beca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	689a      	ldr	r2, [r3, #8]
 800bed2:	4baf      	ldr	r3, [pc, #700]	@ (800c190 <UART_SetConfig+0x330>)
 800bed4:	4013      	ands	r3, r2
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	6812      	ldr	r2, [r2, #0]
 800beda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bedc:	430b      	orrs	r3, r1
 800bede:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee6:	f023 010f 	bic.w	r1, r3, #15
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4aa6      	ldr	r2, [pc, #664]	@ (800c194 <UART_SetConfig+0x334>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d177      	bne.n	800bff0 <UART_SetConfig+0x190>
 800bf00:	4ba5      	ldr	r3, [pc, #660]	@ (800c198 <UART_SetConfig+0x338>)
 800bf02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf08:	2b28      	cmp	r3, #40	@ 0x28
 800bf0a:	d86d      	bhi.n	800bfe8 <UART_SetConfig+0x188>
 800bf0c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf14 <UART_SetConfig+0xb4>)
 800bf0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf12:	bf00      	nop
 800bf14:	0800bfb9 	.word	0x0800bfb9
 800bf18:	0800bfe9 	.word	0x0800bfe9
 800bf1c:	0800bfe9 	.word	0x0800bfe9
 800bf20:	0800bfe9 	.word	0x0800bfe9
 800bf24:	0800bfe9 	.word	0x0800bfe9
 800bf28:	0800bfe9 	.word	0x0800bfe9
 800bf2c:	0800bfe9 	.word	0x0800bfe9
 800bf30:	0800bfe9 	.word	0x0800bfe9
 800bf34:	0800bfc1 	.word	0x0800bfc1
 800bf38:	0800bfe9 	.word	0x0800bfe9
 800bf3c:	0800bfe9 	.word	0x0800bfe9
 800bf40:	0800bfe9 	.word	0x0800bfe9
 800bf44:	0800bfe9 	.word	0x0800bfe9
 800bf48:	0800bfe9 	.word	0x0800bfe9
 800bf4c:	0800bfe9 	.word	0x0800bfe9
 800bf50:	0800bfe9 	.word	0x0800bfe9
 800bf54:	0800bfc9 	.word	0x0800bfc9
 800bf58:	0800bfe9 	.word	0x0800bfe9
 800bf5c:	0800bfe9 	.word	0x0800bfe9
 800bf60:	0800bfe9 	.word	0x0800bfe9
 800bf64:	0800bfe9 	.word	0x0800bfe9
 800bf68:	0800bfe9 	.word	0x0800bfe9
 800bf6c:	0800bfe9 	.word	0x0800bfe9
 800bf70:	0800bfe9 	.word	0x0800bfe9
 800bf74:	0800bfd1 	.word	0x0800bfd1
 800bf78:	0800bfe9 	.word	0x0800bfe9
 800bf7c:	0800bfe9 	.word	0x0800bfe9
 800bf80:	0800bfe9 	.word	0x0800bfe9
 800bf84:	0800bfe9 	.word	0x0800bfe9
 800bf88:	0800bfe9 	.word	0x0800bfe9
 800bf8c:	0800bfe9 	.word	0x0800bfe9
 800bf90:	0800bfe9 	.word	0x0800bfe9
 800bf94:	0800bfd9 	.word	0x0800bfd9
 800bf98:	0800bfe9 	.word	0x0800bfe9
 800bf9c:	0800bfe9 	.word	0x0800bfe9
 800bfa0:	0800bfe9 	.word	0x0800bfe9
 800bfa4:	0800bfe9 	.word	0x0800bfe9
 800bfa8:	0800bfe9 	.word	0x0800bfe9
 800bfac:	0800bfe9 	.word	0x0800bfe9
 800bfb0:	0800bfe9 	.word	0x0800bfe9
 800bfb4:	0800bfe1 	.word	0x0800bfe1
 800bfb8:	2301      	movs	r3, #1
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfbe:	e222      	b.n	800c406 <UART_SetConfig+0x5a6>
 800bfc0:	2304      	movs	r3, #4
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfc6:	e21e      	b.n	800c406 <UART_SetConfig+0x5a6>
 800bfc8:	2308      	movs	r3, #8
 800bfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfce:	e21a      	b.n	800c406 <UART_SetConfig+0x5a6>
 800bfd0:	2310      	movs	r3, #16
 800bfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfd6:	e216      	b.n	800c406 <UART_SetConfig+0x5a6>
 800bfd8:	2320      	movs	r3, #32
 800bfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfde:	e212      	b.n	800c406 <UART_SetConfig+0x5a6>
 800bfe0:	2340      	movs	r3, #64	@ 0x40
 800bfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfe6:	e20e      	b.n	800c406 <UART_SetConfig+0x5a6>
 800bfe8:	2380      	movs	r3, #128	@ 0x80
 800bfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfee:	e20a      	b.n	800c406 <UART_SetConfig+0x5a6>
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a69      	ldr	r2, [pc, #420]	@ (800c19c <UART_SetConfig+0x33c>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d130      	bne.n	800c05c <UART_SetConfig+0x1fc>
 800bffa:	4b67      	ldr	r3, [pc, #412]	@ (800c198 <UART_SetConfig+0x338>)
 800bffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bffe:	f003 0307 	and.w	r3, r3, #7
 800c002:	2b05      	cmp	r3, #5
 800c004:	d826      	bhi.n	800c054 <UART_SetConfig+0x1f4>
 800c006:	a201      	add	r2, pc, #4	@ (adr r2, 800c00c <UART_SetConfig+0x1ac>)
 800c008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00c:	0800c025 	.word	0x0800c025
 800c010:	0800c02d 	.word	0x0800c02d
 800c014:	0800c035 	.word	0x0800c035
 800c018:	0800c03d 	.word	0x0800c03d
 800c01c:	0800c045 	.word	0x0800c045
 800c020:	0800c04d 	.word	0x0800c04d
 800c024:	2300      	movs	r3, #0
 800c026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c02a:	e1ec      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c02c:	2304      	movs	r3, #4
 800c02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c032:	e1e8      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c034:	2308      	movs	r3, #8
 800c036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c03a:	e1e4      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c03c:	2310      	movs	r3, #16
 800c03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c042:	e1e0      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c044:	2320      	movs	r3, #32
 800c046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c04a:	e1dc      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c04c:	2340      	movs	r3, #64	@ 0x40
 800c04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c052:	e1d8      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c054:	2380      	movs	r3, #128	@ 0x80
 800c056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c05a:	e1d4      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a4f      	ldr	r2, [pc, #316]	@ (800c1a0 <UART_SetConfig+0x340>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d130      	bne.n	800c0c8 <UART_SetConfig+0x268>
 800c066:	4b4c      	ldr	r3, [pc, #304]	@ (800c198 <UART_SetConfig+0x338>)
 800c068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c06a:	f003 0307 	and.w	r3, r3, #7
 800c06e:	2b05      	cmp	r3, #5
 800c070:	d826      	bhi.n	800c0c0 <UART_SetConfig+0x260>
 800c072:	a201      	add	r2, pc, #4	@ (adr r2, 800c078 <UART_SetConfig+0x218>)
 800c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c078:	0800c091 	.word	0x0800c091
 800c07c:	0800c099 	.word	0x0800c099
 800c080:	0800c0a1 	.word	0x0800c0a1
 800c084:	0800c0a9 	.word	0x0800c0a9
 800c088:	0800c0b1 	.word	0x0800c0b1
 800c08c:	0800c0b9 	.word	0x0800c0b9
 800c090:	2300      	movs	r3, #0
 800c092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c096:	e1b6      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c098:	2304      	movs	r3, #4
 800c09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c09e:	e1b2      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0a6:	e1ae      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c0a8:	2310      	movs	r3, #16
 800c0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ae:	e1aa      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c0b0:	2320      	movs	r3, #32
 800c0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0b6:	e1a6      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c0b8:	2340      	movs	r3, #64	@ 0x40
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0be:	e1a2      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c0c0:	2380      	movs	r3, #128	@ 0x80
 800c0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0c6:	e19e      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a35      	ldr	r2, [pc, #212]	@ (800c1a4 <UART_SetConfig+0x344>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d130      	bne.n	800c134 <UART_SetConfig+0x2d4>
 800c0d2:	4b31      	ldr	r3, [pc, #196]	@ (800c198 <UART_SetConfig+0x338>)
 800c0d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	2b05      	cmp	r3, #5
 800c0dc:	d826      	bhi.n	800c12c <UART_SetConfig+0x2cc>
 800c0de:	a201      	add	r2, pc, #4	@ (adr r2, 800c0e4 <UART_SetConfig+0x284>)
 800c0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e4:	0800c0fd 	.word	0x0800c0fd
 800c0e8:	0800c105 	.word	0x0800c105
 800c0ec:	0800c10d 	.word	0x0800c10d
 800c0f0:	0800c115 	.word	0x0800c115
 800c0f4:	0800c11d 	.word	0x0800c11d
 800c0f8:	0800c125 	.word	0x0800c125
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c102:	e180      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c104:	2304      	movs	r3, #4
 800c106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c10a:	e17c      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c10c:	2308      	movs	r3, #8
 800c10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c112:	e178      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c114:	2310      	movs	r3, #16
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c11a:	e174      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c11c:	2320      	movs	r3, #32
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c122:	e170      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c124:	2340      	movs	r3, #64	@ 0x40
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12a:	e16c      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c12c:	2380      	movs	r3, #128	@ 0x80
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c132:	e168      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a1b      	ldr	r2, [pc, #108]	@ (800c1a8 <UART_SetConfig+0x348>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d142      	bne.n	800c1c4 <UART_SetConfig+0x364>
 800c13e:	4b16      	ldr	r3, [pc, #88]	@ (800c198 <UART_SetConfig+0x338>)
 800c140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	2b05      	cmp	r3, #5
 800c148:	d838      	bhi.n	800c1bc <UART_SetConfig+0x35c>
 800c14a:	a201      	add	r2, pc, #4	@ (adr r2, 800c150 <UART_SetConfig+0x2f0>)
 800c14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c150:	0800c169 	.word	0x0800c169
 800c154:	0800c171 	.word	0x0800c171
 800c158:	0800c179 	.word	0x0800c179
 800c15c:	0800c181 	.word	0x0800c181
 800c160:	0800c1ad 	.word	0x0800c1ad
 800c164:	0800c1b5 	.word	0x0800c1b5
 800c168:	2300      	movs	r3, #0
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16e:	e14a      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c170:	2304      	movs	r3, #4
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c176:	e146      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c178:	2308      	movs	r3, #8
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c17e:	e142      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c180:	2310      	movs	r3, #16
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c186:	e13e      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c188:	cfff69f3 	.word	0xcfff69f3
 800c18c:	58000c00 	.word	0x58000c00
 800c190:	11fff4ff 	.word	0x11fff4ff
 800c194:	40011000 	.word	0x40011000
 800c198:	58024400 	.word	0x58024400
 800c19c:	40004400 	.word	0x40004400
 800c1a0:	40004800 	.word	0x40004800
 800c1a4:	40004c00 	.word	0x40004c00
 800c1a8:	40005000 	.word	0x40005000
 800c1ac:	2320      	movs	r3, #32
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b2:	e128      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c1b4:	2340      	movs	r3, #64	@ 0x40
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ba:	e124      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c1bc:	2380      	movs	r3, #128	@ 0x80
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c2:	e120      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4acb      	ldr	r2, [pc, #812]	@ (800c4f8 <UART_SetConfig+0x698>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d176      	bne.n	800c2bc <UART_SetConfig+0x45c>
 800c1ce:	4bcb      	ldr	r3, [pc, #812]	@ (800c4fc <UART_SetConfig+0x69c>)
 800c1d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1d6:	2b28      	cmp	r3, #40	@ 0x28
 800c1d8:	d86c      	bhi.n	800c2b4 <UART_SetConfig+0x454>
 800c1da:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e0 <UART_SetConfig+0x380>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c285 	.word	0x0800c285
 800c1e4:	0800c2b5 	.word	0x0800c2b5
 800c1e8:	0800c2b5 	.word	0x0800c2b5
 800c1ec:	0800c2b5 	.word	0x0800c2b5
 800c1f0:	0800c2b5 	.word	0x0800c2b5
 800c1f4:	0800c2b5 	.word	0x0800c2b5
 800c1f8:	0800c2b5 	.word	0x0800c2b5
 800c1fc:	0800c2b5 	.word	0x0800c2b5
 800c200:	0800c28d 	.word	0x0800c28d
 800c204:	0800c2b5 	.word	0x0800c2b5
 800c208:	0800c2b5 	.word	0x0800c2b5
 800c20c:	0800c2b5 	.word	0x0800c2b5
 800c210:	0800c2b5 	.word	0x0800c2b5
 800c214:	0800c2b5 	.word	0x0800c2b5
 800c218:	0800c2b5 	.word	0x0800c2b5
 800c21c:	0800c2b5 	.word	0x0800c2b5
 800c220:	0800c295 	.word	0x0800c295
 800c224:	0800c2b5 	.word	0x0800c2b5
 800c228:	0800c2b5 	.word	0x0800c2b5
 800c22c:	0800c2b5 	.word	0x0800c2b5
 800c230:	0800c2b5 	.word	0x0800c2b5
 800c234:	0800c2b5 	.word	0x0800c2b5
 800c238:	0800c2b5 	.word	0x0800c2b5
 800c23c:	0800c2b5 	.word	0x0800c2b5
 800c240:	0800c29d 	.word	0x0800c29d
 800c244:	0800c2b5 	.word	0x0800c2b5
 800c248:	0800c2b5 	.word	0x0800c2b5
 800c24c:	0800c2b5 	.word	0x0800c2b5
 800c250:	0800c2b5 	.word	0x0800c2b5
 800c254:	0800c2b5 	.word	0x0800c2b5
 800c258:	0800c2b5 	.word	0x0800c2b5
 800c25c:	0800c2b5 	.word	0x0800c2b5
 800c260:	0800c2a5 	.word	0x0800c2a5
 800c264:	0800c2b5 	.word	0x0800c2b5
 800c268:	0800c2b5 	.word	0x0800c2b5
 800c26c:	0800c2b5 	.word	0x0800c2b5
 800c270:	0800c2b5 	.word	0x0800c2b5
 800c274:	0800c2b5 	.word	0x0800c2b5
 800c278:	0800c2b5 	.word	0x0800c2b5
 800c27c:	0800c2b5 	.word	0x0800c2b5
 800c280:	0800c2ad 	.word	0x0800c2ad
 800c284:	2301      	movs	r3, #1
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28a:	e0bc      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c28c:	2304      	movs	r3, #4
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c292:	e0b8      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c294:	2308      	movs	r3, #8
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29a:	e0b4      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c29c:	2310      	movs	r3, #16
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2a2:	e0b0      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c2a4:	2320      	movs	r3, #32
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2aa:	e0ac      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c2ac:	2340      	movs	r3, #64	@ 0x40
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e0a8      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c2b4:	2380      	movs	r3, #128	@ 0x80
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e0a4      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a8f      	ldr	r2, [pc, #572]	@ (800c500 <UART_SetConfig+0x6a0>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d130      	bne.n	800c328 <UART_SetConfig+0x4c8>
 800c2c6:	4b8d      	ldr	r3, [pc, #564]	@ (800c4fc <UART_SetConfig+0x69c>)
 800c2c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2ca:	f003 0307 	and.w	r3, r3, #7
 800c2ce:	2b05      	cmp	r3, #5
 800c2d0:	d826      	bhi.n	800c320 <UART_SetConfig+0x4c0>
 800c2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d8 <UART_SetConfig+0x478>)
 800c2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d8:	0800c2f1 	.word	0x0800c2f1
 800c2dc:	0800c2f9 	.word	0x0800c2f9
 800c2e0:	0800c301 	.word	0x0800c301
 800c2e4:	0800c309 	.word	0x0800c309
 800c2e8:	0800c311 	.word	0x0800c311
 800c2ec:	0800c319 	.word	0x0800c319
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f6:	e086      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c2f8:	2304      	movs	r3, #4
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2fe:	e082      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c300:	2308      	movs	r3, #8
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c306:	e07e      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c308:	2310      	movs	r3, #16
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c30e:	e07a      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c310:	2320      	movs	r3, #32
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e076      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c318:	2340      	movs	r3, #64	@ 0x40
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e072      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c320:	2380      	movs	r3, #128	@ 0x80
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e06e      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a75      	ldr	r2, [pc, #468]	@ (800c504 <UART_SetConfig+0x6a4>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d130      	bne.n	800c394 <UART_SetConfig+0x534>
 800c332:	4b72      	ldr	r3, [pc, #456]	@ (800c4fc <UART_SetConfig+0x69c>)
 800c334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c336:	f003 0307 	and.w	r3, r3, #7
 800c33a:	2b05      	cmp	r3, #5
 800c33c:	d826      	bhi.n	800c38c <UART_SetConfig+0x52c>
 800c33e:	a201      	add	r2, pc, #4	@ (adr r2, 800c344 <UART_SetConfig+0x4e4>)
 800c340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c344:	0800c35d 	.word	0x0800c35d
 800c348:	0800c365 	.word	0x0800c365
 800c34c:	0800c36d 	.word	0x0800c36d
 800c350:	0800c375 	.word	0x0800c375
 800c354:	0800c37d 	.word	0x0800c37d
 800c358:	0800c385 	.word	0x0800c385
 800c35c:	2300      	movs	r3, #0
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c362:	e050      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c364:	2304      	movs	r3, #4
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c36a:	e04c      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c36c:	2308      	movs	r3, #8
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c372:	e048      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c374:	2310      	movs	r3, #16
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37a:	e044      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c37c:	2320      	movs	r3, #32
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e040      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c384:	2340      	movs	r3, #64	@ 0x40
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38a:	e03c      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c38c:	2380      	movs	r3, #128	@ 0x80
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e038      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a5b      	ldr	r2, [pc, #364]	@ (800c508 <UART_SetConfig+0x6a8>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d130      	bne.n	800c400 <UART_SetConfig+0x5a0>
 800c39e:	4b57      	ldr	r3, [pc, #348]	@ (800c4fc <UART_SetConfig+0x69c>)
 800c3a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3a2:	f003 0307 	and.w	r3, r3, #7
 800c3a6:	2b05      	cmp	r3, #5
 800c3a8:	d826      	bhi.n	800c3f8 <UART_SetConfig+0x598>
 800c3aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c3b0 <UART_SetConfig+0x550>)
 800c3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b0:	0800c3c9 	.word	0x0800c3c9
 800c3b4:	0800c3d1 	.word	0x0800c3d1
 800c3b8:	0800c3d9 	.word	0x0800c3d9
 800c3bc:	0800c3e1 	.word	0x0800c3e1
 800c3c0:	0800c3e9 	.word	0x0800c3e9
 800c3c4:	0800c3f1 	.word	0x0800c3f1
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ce:	e01a      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c3d0:	2304      	movs	r3, #4
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d6:	e016      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c3d8:	2308      	movs	r3, #8
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3de:	e012      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c3e0:	2310      	movs	r3, #16
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e6:	e00e      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c3e8:	2320      	movs	r3, #32
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ee:	e00a      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c3f0:	2340      	movs	r3, #64	@ 0x40
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e006      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c3f8:	2380      	movs	r3, #128	@ 0x80
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e002      	b.n	800c406 <UART_SetConfig+0x5a6>
 800c400:	2380      	movs	r3, #128	@ 0x80
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a3f      	ldr	r2, [pc, #252]	@ (800c508 <UART_SetConfig+0x6a8>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	f040 80f8 	bne.w	800c602 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c412:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c416:	2b20      	cmp	r3, #32
 800c418:	dc46      	bgt.n	800c4a8 <UART_SetConfig+0x648>
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	f2c0 8082 	blt.w	800c524 <UART_SetConfig+0x6c4>
 800c420:	3b02      	subs	r3, #2
 800c422:	2b1e      	cmp	r3, #30
 800c424:	d87e      	bhi.n	800c524 <UART_SetConfig+0x6c4>
 800c426:	a201      	add	r2, pc, #4	@ (adr r2, 800c42c <UART_SetConfig+0x5cc>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c4af 	.word	0x0800c4af
 800c430:	0800c525 	.word	0x0800c525
 800c434:	0800c4b7 	.word	0x0800c4b7
 800c438:	0800c525 	.word	0x0800c525
 800c43c:	0800c525 	.word	0x0800c525
 800c440:	0800c525 	.word	0x0800c525
 800c444:	0800c4c7 	.word	0x0800c4c7
 800c448:	0800c525 	.word	0x0800c525
 800c44c:	0800c525 	.word	0x0800c525
 800c450:	0800c525 	.word	0x0800c525
 800c454:	0800c525 	.word	0x0800c525
 800c458:	0800c525 	.word	0x0800c525
 800c45c:	0800c525 	.word	0x0800c525
 800c460:	0800c525 	.word	0x0800c525
 800c464:	0800c4d7 	.word	0x0800c4d7
 800c468:	0800c525 	.word	0x0800c525
 800c46c:	0800c525 	.word	0x0800c525
 800c470:	0800c525 	.word	0x0800c525
 800c474:	0800c525 	.word	0x0800c525
 800c478:	0800c525 	.word	0x0800c525
 800c47c:	0800c525 	.word	0x0800c525
 800c480:	0800c525 	.word	0x0800c525
 800c484:	0800c525 	.word	0x0800c525
 800c488:	0800c525 	.word	0x0800c525
 800c48c:	0800c525 	.word	0x0800c525
 800c490:	0800c525 	.word	0x0800c525
 800c494:	0800c525 	.word	0x0800c525
 800c498:	0800c525 	.word	0x0800c525
 800c49c:	0800c525 	.word	0x0800c525
 800c4a0:	0800c525 	.word	0x0800c525
 800c4a4:	0800c517 	.word	0x0800c517
 800c4a8:	2b40      	cmp	r3, #64	@ 0x40
 800c4aa:	d037      	beq.n	800c51c <UART_SetConfig+0x6bc>
 800c4ac:	e03a      	b.n	800c524 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c4ae:	f7fc f8c5 	bl	800863c <HAL_RCCEx_GetD3PCLK1Freq>
 800c4b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c4b4:	e03c      	b.n	800c530 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fc f8d4 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4c4:	e034      	b.n	800c530 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4c6:	f107 0318 	add.w	r3, r7, #24
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fc fa20 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4d4:	e02c      	b.n	800c530 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4d6:	4b09      	ldr	r3, [pc, #36]	@ (800c4fc <UART_SetConfig+0x69c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d016      	beq.n	800c510 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4e2:	4b06      	ldr	r3, [pc, #24]	@ (800c4fc <UART_SetConfig+0x69c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	08db      	lsrs	r3, r3, #3
 800c4e8:	f003 0303 	and.w	r3, r3, #3
 800c4ec:	4a07      	ldr	r2, [pc, #28]	@ (800c50c <UART_SetConfig+0x6ac>)
 800c4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4f4:	e01c      	b.n	800c530 <UART_SetConfig+0x6d0>
 800c4f6:	bf00      	nop
 800c4f8:	40011400 	.word	0x40011400
 800c4fc:	58024400 	.word	0x58024400
 800c500:	40007800 	.word	0x40007800
 800c504:	40007c00 	.word	0x40007c00
 800c508:	58000c00 	.word	0x58000c00
 800c50c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c510:	4b9d      	ldr	r3, [pc, #628]	@ (800c788 <UART_SetConfig+0x928>)
 800c512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c514:	e00c      	b.n	800c530 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c516:	4b9d      	ldr	r3, [pc, #628]	@ (800c78c <UART_SetConfig+0x92c>)
 800c518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c51a:	e009      	b.n	800c530 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c51c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c522:	e005      	b.n	800c530 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c528:	2301      	movs	r3, #1
 800c52a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c52e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c532:	2b00      	cmp	r3, #0
 800c534:	f000 81de 	beq.w	800c8f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c53c:	4a94      	ldr	r2, [pc, #592]	@ (800c790 <UART_SetConfig+0x930>)
 800c53e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c542:	461a      	mov	r2, r3
 800c544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c546:	fbb3 f3f2 	udiv	r3, r3, r2
 800c54a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	685a      	ldr	r2, [r3, #4]
 800c550:	4613      	mov	r3, r2
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	4413      	add	r3, r2
 800c556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c558:	429a      	cmp	r2, r3
 800c55a:	d305      	bcc.n	800c568 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c564:	429a      	cmp	r2, r3
 800c566:	d903      	bls.n	800c570 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c56e:	e1c1      	b.n	800c8f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c572:	2200      	movs	r2, #0
 800c574:	60bb      	str	r3, [r7, #8]
 800c576:	60fa      	str	r2, [r7, #12]
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c57c:	4a84      	ldr	r2, [pc, #528]	@ (800c790 <UART_SetConfig+0x930>)
 800c57e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c582:	b29b      	uxth	r3, r3
 800c584:	2200      	movs	r2, #0
 800c586:	603b      	str	r3, [r7, #0]
 800c588:	607a      	str	r2, [r7, #4]
 800c58a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c58e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c592:	f7f4 f8b9 	bl	8000708 <__aeabi_uldivmod>
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	4610      	mov	r0, r2
 800c59c:	4619      	mov	r1, r3
 800c59e:	f04f 0200 	mov.w	r2, #0
 800c5a2:	f04f 0300 	mov.w	r3, #0
 800c5a6:	020b      	lsls	r3, r1, #8
 800c5a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5ac:	0202      	lsls	r2, r0, #8
 800c5ae:	6979      	ldr	r1, [r7, #20]
 800c5b0:	6849      	ldr	r1, [r1, #4]
 800c5b2:	0849      	lsrs	r1, r1, #1
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	eb12 0804 	adds.w	r8, r2, r4
 800c5be:	eb43 0905 	adc.w	r9, r3, r5
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	469a      	mov	sl, r3
 800c5ca:	4693      	mov	fp, r2
 800c5cc:	4652      	mov	r2, sl
 800c5ce:	465b      	mov	r3, fp
 800c5d0:	4640      	mov	r0, r8
 800c5d2:	4649      	mov	r1, r9
 800c5d4:	f7f4 f898 	bl	8000708 <__aeabi_uldivmod>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4613      	mov	r3, r2
 800c5de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5e6:	d308      	bcc.n	800c5fa <UART_SetConfig+0x79a>
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5ee:	d204      	bcs.n	800c5fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5f6:	60da      	str	r2, [r3, #12]
 800c5f8:	e17c      	b.n	800c8f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c600:	e178      	b.n	800c8f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c60a:	f040 80c5 	bne.w	800c798 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c60e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c612:	2b20      	cmp	r3, #32
 800c614:	dc48      	bgt.n	800c6a8 <UART_SetConfig+0x848>
 800c616:	2b00      	cmp	r3, #0
 800c618:	db7b      	blt.n	800c712 <UART_SetConfig+0x8b2>
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d879      	bhi.n	800c712 <UART_SetConfig+0x8b2>
 800c61e:	a201      	add	r2, pc, #4	@ (adr r2, 800c624 <UART_SetConfig+0x7c4>)
 800c620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c624:	0800c6af 	.word	0x0800c6af
 800c628:	0800c6b7 	.word	0x0800c6b7
 800c62c:	0800c713 	.word	0x0800c713
 800c630:	0800c713 	.word	0x0800c713
 800c634:	0800c6bf 	.word	0x0800c6bf
 800c638:	0800c713 	.word	0x0800c713
 800c63c:	0800c713 	.word	0x0800c713
 800c640:	0800c713 	.word	0x0800c713
 800c644:	0800c6cf 	.word	0x0800c6cf
 800c648:	0800c713 	.word	0x0800c713
 800c64c:	0800c713 	.word	0x0800c713
 800c650:	0800c713 	.word	0x0800c713
 800c654:	0800c713 	.word	0x0800c713
 800c658:	0800c713 	.word	0x0800c713
 800c65c:	0800c713 	.word	0x0800c713
 800c660:	0800c713 	.word	0x0800c713
 800c664:	0800c6df 	.word	0x0800c6df
 800c668:	0800c713 	.word	0x0800c713
 800c66c:	0800c713 	.word	0x0800c713
 800c670:	0800c713 	.word	0x0800c713
 800c674:	0800c713 	.word	0x0800c713
 800c678:	0800c713 	.word	0x0800c713
 800c67c:	0800c713 	.word	0x0800c713
 800c680:	0800c713 	.word	0x0800c713
 800c684:	0800c713 	.word	0x0800c713
 800c688:	0800c713 	.word	0x0800c713
 800c68c:	0800c713 	.word	0x0800c713
 800c690:	0800c713 	.word	0x0800c713
 800c694:	0800c713 	.word	0x0800c713
 800c698:	0800c713 	.word	0x0800c713
 800c69c:	0800c713 	.word	0x0800c713
 800c6a0:	0800c713 	.word	0x0800c713
 800c6a4:	0800c705 	.word	0x0800c705
 800c6a8:	2b40      	cmp	r3, #64	@ 0x40
 800c6aa:	d02e      	beq.n	800c70a <UART_SetConfig+0x8aa>
 800c6ac:	e031      	b.n	800c712 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6ae:	f7fa f80f 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 800c6b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6b4:	e033      	b.n	800c71e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6b6:	f7fa f821 	bl	80066fc <HAL_RCC_GetPCLK2Freq>
 800c6ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6bc:	e02f      	b.n	800c71e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fb ffd0 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6cc:	e027      	b.n	800c71e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ce:	f107 0318 	add.w	r3, r7, #24
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fc f91c 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6dc:	e01f      	b.n	800c71e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6de:	4b2d      	ldr	r3, [pc, #180]	@ (800c794 <UART_SetConfig+0x934>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f003 0320 	and.w	r3, r3, #32
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d009      	beq.n	800c6fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6ea:	4b2a      	ldr	r3, [pc, #168]	@ (800c794 <UART_SetConfig+0x934>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	08db      	lsrs	r3, r3, #3
 800c6f0:	f003 0303 	and.w	r3, r3, #3
 800c6f4:	4a24      	ldr	r2, [pc, #144]	@ (800c788 <UART_SetConfig+0x928>)
 800c6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6fc:	e00f      	b.n	800c71e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c6fe:	4b22      	ldr	r3, [pc, #136]	@ (800c788 <UART_SetConfig+0x928>)
 800c700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c702:	e00c      	b.n	800c71e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c704:	4b21      	ldr	r3, [pc, #132]	@ (800c78c <UART_SetConfig+0x92c>)
 800c706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c708:	e009      	b.n	800c71e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c70a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c710:	e005      	b.n	800c71e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c712:	2300      	movs	r3, #0
 800c714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c71c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 80e7 	beq.w	800c8f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72a:	4a19      	ldr	r2, [pc, #100]	@ (800c790 <UART_SetConfig+0x930>)
 800c72c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c730:	461a      	mov	r2, r3
 800c732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c734:	fbb3 f3f2 	udiv	r3, r3, r2
 800c738:	005a      	lsls	r2, r3, #1
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	085b      	lsrs	r3, r3, #1
 800c740:	441a      	add	r2, r3
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	fbb2 f3f3 	udiv	r3, r2, r3
 800c74a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74e:	2b0f      	cmp	r3, #15
 800c750:	d916      	bls.n	800c780 <UART_SetConfig+0x920>
 800c752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c758:	d212      	bcs.n	800c780 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	f023 030f 	bic.w	r3, r3, #15
 800c762:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c766:	085b      	lsrs	r3, r3, #1
 800c768:	b29b      	uxth	r3, r3
 800c76a:	f003 0307 	and.w	r3, r3, #7
 800c76e:	b29a      	uxth	r2, r3
 800c770:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c772:	4313      	orrs	r3, r2
 800c774:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c77c:	60da      	str	r2, [r3, #12]
 800c77e:	e0b9      	b.n	800c8f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c786:	e0b5      	b.n	800c8f4 <UART_SetConfig+0xa94>
 800c788:	03d09000 	.word	0x03d09000
 800c78c:	003d0900 	.word	0x003d0900
 800c790:	08012a9c 	.word	0x08012a9c
 800c794:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c798:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c79c:	2b20      	cmp	r3, #32
 800c79e:	dc49      	bgt.n	800c834 <UART_SetConfig+0x9d4>
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	db7c      	blt.n	800c89e <UART_SetConfig+0xa3e>
 800c7a4:	2b20      	cmp	r3, #32
 800c7a6:	d87a      	bhi.n	800c89e <UART_SetConfig+0xa3e>
 800c7a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b0 <UART_SetConfig+0x950>)
 800c7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ae:	bf00      	nop
 800c7b0:	0800c83b 	.word	0x0800c83b
 800c7b4:	0800c843 	.word	0x0800c843
 800c7b8:	0800c89f 	.word	0x0800c89f
 800c7bc:	0800c89f 	.word	0x0800c89f
 800c7c0:	0800c84b 	.word	0x0800c84b
 800c7c4:	0800c89f 	.word	0x0800c89f
 800c7c8:	0800c89f 	.word	0x0800c89f
 800c7cc:	0800c89f 	.word	0x0800c89f
 800c7d0:	0800c85b 	.word	0x0800c85b
 800c7d4:	0800c89f 	.word	0x0800c89f
 800c7d8:	0800c89f 	.word	0x0800c89f
 800c7dc:	0800c89f 	.word	0x0800c89f
 800c7e0:	0800c89f 	.word	0x0800c89f
 800c7e4:	0800c89f 	.word	0x0800c89f
 800c7e8:	0800c89f 	.word	0x0800c89f
 800c7ec:	0800c89f 	.word	0x0800c89f
 800c7f0:	0800c86b 	.word	0x0800c86b
 800c7f4:	0800c89f 	.word	0x0800c89f
 800c7f8:	0800c89f 	.word	0x0800c89f
 800c7fc:	0800c89f 	.word	0x0800c89f
 800c800:	0800c89f 	.word	0x0800c89f
 800c804:	0800c89f 	.word	0x0800c89f
 800c808:	0800c89f 	.word	0x0800c89f
 800c80c:	0800c89f 	.word	0x0800c89f
 800c810:	0800c89f 	.word	0x0800c89f
 800c814:	0800c89f 	.word	0x0800c89f
 800c818:	0800c89f 	.word	0x0800c89f
 800c81c:	0800c89f 	.word	0x0800c89f
 800c820:	0800c89f 	.word	0x0800c89f
 800c824:	0800c89f 	.word	0x0800c89f
 800c828:	0800c89f 	.word	0x0800c89f
 800c82c:	0800c89f 	.word	0x0800c89f
 800c830:	0800c891 	.word	0x0800c891
 800c834:	2b40      	cmp	r3, #64	@ 0x40
 800c836:	d02e      	beq.n	800c896 <UART_SetConfig+0xa36>
 800c838:	e031      	b.n	800c89e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c83a:	f7f9 ff49 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 800c83e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c840:	e033      	b.n	800c8aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c842:	f7f9 ff5b 	bl	80066fc <HAL_RCC_GetPCLK2Freq>
 800c846:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c848:	e02f      	b.n	800c8aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c84a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fb ff0a 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c858:	e027      	b.n	800c8aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85a:	f107 0318 	add.w	r3, r7, #24
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fc f856 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c868:	e01f      	b.n	800c8aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c86a:	4b2d      	ldr	r3, [pc, #180]	@ (800c920 <UART_SetConfig+0xac0>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f003 0320 	and.w	r3, r3, #32
 800c872:	2b00      	cmp	r3, #0
 800c874:	d009      	beq.n	800c88a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c876:	4b2a      	ldr	r3, [pc, #168]	@ (800c920 <UART_SetConfig+0xac0>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	08db      	lsrs	r3, r3, #3
 800c87c:	f003 0303 	and.w	r3, r3, #3
 800c880:	4a28      	ldr	r2, [pc, #160]	@ (800c924 <UART_SetConfig+0xac4>)
 800c882:	fa22 f303 	lsr.w	r3, r2, r3
 800c886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c888:	e00f      	b.n	800c8aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c88a:	4b26      	ldr	r3, [pc, #152]	@ (800c924 <UART_SetConfig+0xac4>)
 800c88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c88e:	e00c      	b.n	800c8aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c890:	4b25      	ldr	r3, [pc, #148]	@ (800c928 <UART_SetConfig+0xac8>)
 800c892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c894:	e009      	b.n	800c8aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c89c:	e005      	b.n	800c8aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c8a8:	bf00      	nop
    }

    if (pclk != 0U)
 800c8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d021      	beq.n	800c8f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b4:	4a1d      	ldr	r2, [pc, #116]	@ (800c92c <UART_SetConfig+0xacc>)
 800c8b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8be:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	085b      	lsrs	r3, r3, #1
 800c8c8:	441a      	add	r2, r3
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d6:	2b0f      	cmp	r3, #15
 800c8d8:	d909      	bls.n	800c8ee <UART_SetConfig+0xa8e>
 800c8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8e0:	d205      	bcs.n	800c8ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	60da      	str	r2, [r3, #12]
 800c8ec:	e002      	b.n	800c8f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2200      	movs	r2, #0
 800c908:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	2200      	movs	r2, #0
 800c90e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c910:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c914:	4618      	mov	r0, r3
 800c916:	3748      	adds	r7, #72	@ 0x48
 800c918:	46bd      	mov	sp, r7
 800c91a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c91e:	bf00      	nop
 800c920:	58024400 	.word	0x58024400
 800c924:	03d09000 	.word	0x03d09000
 800c928:	003d0900 	.word	0x003d0900
 800c92c:	08012a9c 	.word	0x08012a9c

0800c930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c93c:	f003 0308 	and.w	r3, r3, #8
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00a      	beq.n	800c95a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	430a      	orrs	r2, r1
 800c958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00a      	beq.n	800c97c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	430a      	orrs	r2, r1
 800c97a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c980:	f003 0302 	and.w	r3, r3, #2
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00a      	beq.n	800c99e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	430a      	orrs	r2, r1
 800c99c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9a2:	f003 0304 	and.w	r3, r3, #4
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00a      	beq.n	800c9c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	430a      	orrs	r2, r1
 800c9be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c4:	f003 0310 	and.w	r3, r3, #16
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00a      	beq.n	800c9e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	430a      	orrs	r2, r1
 800c9e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9e6:	f003 0320 	and.w	r3, r3, #32
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00a      	beq.n	800ca04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	430a      	orrs	r2, r1
 800ca02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01a      	beq.n	800ca46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	430a      	orrs	r2, r1
 800ca24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca2e:	d10a      	bne.n	800ca46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	430a      	orrs	r2, r1
 800ca44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00a      	beq.n	800ca68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	430a      	orrs	r2, r1
 800ca66:	605a      	str	r2, [r3, #4]
  }
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b098      	sub	sp, #96	@ 0x60
 800ca78:	af02      	add	r7, sp, #8
 800ca7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca84:	f7f6 fad6 	bl	8003034 <HAL_GetTick>
 800ca88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 0308 	and.w	r3, r3, #8
 800ca94:	2b08      	cmp	r3, #8
 800ca96:	d12f      	bne.n	800caf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caa0:	2200      	movs	r2, #0
 800caa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f88e 	bl	800cbc8 <UART_WaitOnFlagUntilTimeout>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d022      	beq.n	800caf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caba:	e853 3f00 	ldrex	r3, [r3]
 800cabe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cac6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	461a      	mov	r2, r3
 800cace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cad0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cad2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cad8:	e841 2300 	strex	r3, r2, [r1]
 800cadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1e6      	bne.n	800cab2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2220      	movs	r2, #32
 800cae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800caf4:	2303      	movs	r3, #3
 800caf6:	e063      	b.n	800cbc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 0304 	and.w	r3, r3, #4
 800cb02:	2b04      	cmp	r3, #4
 800cb04:	d149      	bne.n	800cb9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f857 	bl	800cbc8 <UART_WaitOnFlagUntilTimeout>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d03c      	beq.n	800cb9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb28:	e853 3f00 	ldrex	r3, [r3]
 800cb2c:	623b      	str	r3, [r7, #32]
   return(result);
 800cb2e:	6a3b      	ldr	r3, [r7, #32]
 800cb30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb46:	e841 2300 	strex	r3, r2, [r1]
 800cb4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1e6      	bne.n	800cb20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	3308      	adds	r3, #8
 800cb58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	e853 3f00 	ldrex	r3, [r3]
 800cb60:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f023 0301 	bic.w	r3, r3, #1
 800cb68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	3308      	adds	r3, #8
 800cb70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb72:	61fa      	str	r2, [r7, #28]
 800cb74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb76:	69b9      	ldr	r1, [r7, #24]
 800cb78:	69fa      	ldr	r2, [r7, #28]
 800cb7a:	e841 2300 	strex	r3, r2, [r1]
 800cb7e:	617b      	str	r3, [r7, #20]
   return(result);
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1e5      	bne.n	800cb52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2220      	movs	r2, #32
 800cb8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e012      	b.n	800cbc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2220      	movs	r2, #32
 800cb9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2220      	movs	r2, #32
 800cba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3758      	adds	r7, #88	@ 0x58
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	603b      	str	r3, [r7, #0]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbd8:	e04f      	b.n	800cc7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe0:	d04b      	beq.n	800cc7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbe2:	f7f6 fa27 	bl	8003034 <HAL_GetTick>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	69ba      	ldr	r2, [r7, #24]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d302      	bcc.n	800cbf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e04e      	b.n	800cc9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0304 	and.w	r3, r3, #4
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d037      	beq.n	800cc7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	2b80      	cmp	r3, #128	@ 0x80
 800cc0e:	d034      	beq.n	800cc7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b40      	cmp	r3, #64	@ 0x40
 800cc14:	d031      	beq.n	800cc7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	69db      	ldr	r3, [r3, #28]
 800cc1c:	f003 0308 	and.w	r3, r3, #8
 800cc20:	2b08      	cmp	r3, #8
 800cc22:	d110      	bne.n	800cc46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2208      	movs	r2, #8
 800cc2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f000 f95b 	bl	800cee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2208      	movs	r2, #8
 800cc36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e029      	b.n	800cc9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	69db      	ldr	r3, [r3, #28]
 800cc4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc54:	d111      	bne.n	800cc7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 f941 	bl	800cee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2220      	movs	r2, #32
 800cc6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e00f      	b.n	800cc9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	69da      	ldr	r2, [r3, #28]
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	4013      	ands	r3, r2
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	bf0c      	ite	eq
 800cc8a:	2301      	moveq	r3, #1
 800cc8c:	2300      	movne	r3, #0
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	461a      	mov	r2, r3
 800cc92:	79fb      	ldrb	r3, [r7, #7]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d0a0      	beq.n	800cbda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
	...

0800cca4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b0a3      	sub	sp, #140	@ 0x8c
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	88fa      	ldrh	r2, [r7, #6]
 800ccbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	88fa      	ldrh	r2, [r7, #6]
 800ccc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccd6:	d10e      	bne.n	800ccf6 <UART_Start_Receive_IT+0x52>
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d105      	bne.n	800ccec <UART_Start_Receive_IT+0x48>
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cce6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ccea:	e02d      	b.n	800cd48 <UART_Start_Receive_IT+0xa4>
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	22ff      	movs	r2, #255	@ 0xff
 800ccf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ccf4:	e028      	b.n	800cd48 <UART_Start_Receive_IT+0xa4>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10d      	bne.n	800cd1a <UART_Start_Receive_IT+0x76>
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d104      	bne.n	800cd10 <UART_Start_Receive_IT+0x6c>
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	22ff      	movs	r2, #255	@ 0xff
 800cd0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd0e:	e01b      	b.n	800cd48 <UART_Start_Receive_IT+0xa4>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	227f      	movs	r2, #127	@ 0x7f
 800cd14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd18:	e016      	b.n	800cd48 <UART_Start_Receive_IT+0xa4>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd22:	d10d      	bne.n	800cd40 <UART_Start_Receive_IT+0x9c>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d104      	bne.n	800cd36 <UART_Start_Receive_IT+0x92>
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	227f      	movs	r2, #127	@ 0x7f
 800cd30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd34:	e008      	b.n	800cd48 <UART_Start_Receive_IT+0xa4>
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	223f      	movs	r2, #63	@ 0x3f
 800cd3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd3e:	e003      	b.n	800cd48 <UART_Start_Receive_IT+0xa4>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2222      	movs	r2, #34	@ 0x22
 800cd54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd62:	e853 3f00 	ldrex	r3, [r3]
 800cd66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cd68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd6a:	f043 0301 	orr.w	r3, r3, #1
 800cd6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3308      	adds	r3, #8
 800cd78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cd7c:	673a      	str	r2, [r7, #112]	@ 0x70
 800cd7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd80:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cd82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cd84:	e841 2300 	strex	r3, r2, [r1]
 800cd88:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800cd8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d1e3      	bne.n	800cd58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd98:	d14f      	bne.n	800ce3a <UART_Start_Receive_IT+0x196>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cda0:	88fa      	ldrh	r2, [r7, #6]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d349      	bcc.n	800ce3a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdae:	d107      	bne.n	800cdc0 <UART_Start_Receive_IT+0x11c>
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d103      	bne.n	800cdc0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	4a47      	ldr	r2, [pc, #284]	@ (800ced8 <UART_Start_Receive_IT+0x234>)
 800cdbc:	675a      	str	r2, [r3, #116]	@ 0x74
 800cdbe:	e002      	b.n	800cdc6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	4a46      	ldr	r2, [pc, #280]	@ (800cedc <UART_Start_Receive_IT+0x238>)
 800cdc4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d01a      	beq.n	800ce04 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdd6:	e853 3f00 	ldrex	r3, [r3]
 800cdda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cde2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	461a      	mov	r2, r3
 800cdec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cdf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cdf2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cdf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cdf8:	e841 2300 	strex	r3, r2, [r1]
 800cdfc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800cdfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1e4      	bne.n	800cdce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3308      	adds	r3, #8
 800ce0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce0e:	e853 3f00 	ldrex	r3, [r3]
 800ce12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	3308      	adds	r3, #8
 800ce22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ce24:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ce26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce2c:	e841 2300 	strex	r3, r2, [r1]
 800ce30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ce32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1e5      	bne.n	800ce04 <UART_Start_Receive_IT+0x160>
 800ce38:	e046      	b.n	800cec8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce42:	d107      	bne.n	800ce54 <UART_Start_Receive_IT+0x1b0>
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d103      	bne.n	800ce54 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4a24      	ldr	r2, [pc, #144]	@ (800cee0 <UART_Start_Receive_IT+0x23c>)
 800ce50:	675a      	str	r2, [r3, #116]	@ 0x74
 800ce52:	e002      	b.n	800ce5a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4a23      	ldr	r2, [pc, #140]	@ (800cee4 <UART_Start_Receive_IT+0x240>)
 800ce58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d019      	beq.n	800ce96 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6a:	e853 3f00 	ldrex	r3, [r3]
 800ce6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce72:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ce76:	677b      	str	r3, [r7, #116]	@ 0x74
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ce80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce82:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ce86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce88:	e841 2300 	strex	r3, r2, [r1]
 800ce8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ce8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1e6      	bne.n	800ce62 <UART_Start_Receive_IT+0x1be>
 800ce94:	e018      	b.n	800cec8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	e853 3f00 	ldrex	r3, [r3]
 800cea2:	613b      	str	r3, [r7, #16]
   return(result);
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	f043 0320 	orr.w	r3, r3, #32
 800ceaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ceb4:	623b      	str	r3, [r7, #32]
 800ceb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb8:	69f9      	ldr	r1, [r7, #28]
 800ceba:	6a3a      	ldr	r2, [r7, #32]
 800cebc:	e841 2300 	strex	r3, r2, [r1]
 800cec0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1e6      	bne.n	800ce96 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cec8:	2300      	movs	r3, #0
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	378c      	adds	r7, #140	@ 0x8c
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	0800d709 	.word	0x0800d709
 800cedc:	0800d3a9 	.word	0x0800d3a9
 800cee0:	0800d1f1 	.word	0x0800d1f1
 800cee4:	0800d039 	.word	0x0800d039

0800cee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b095      	sub	sp, #84	@ 0x54
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cef8:	e853 3f00 	ldrex	r3, [r3]
 800cefc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf16:	e841 2300 	strex	r3, r2, [r1]
 800cf1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1e6      	bne.n	800cef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	3308      	adds	r3, #8
 800cf28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	e853 3f00 	ldrex	r3, [r3]
 800cf30:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf32:	69fa      	ldr	r2, [r7, #28]
 800cf34:	4b1e      	ldr	r3, [pc, #120]	@ (800cfb0 <UART_EndRxTransfer+0xc8>)
 800cf36:	4013      	ands	r3, r2
 800cf38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	3308      	adds	r3, #8
 800cf40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf4a:	e841 2300 	strex	r3, r2, [r1]
 800cf4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1e5      	bne.n	800cf22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d118      	bne.n	800cf90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	e853 3f00 	ldrex	r3, [r3]
 800cf6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	f023 0310 	bic.w	r3, r3, #16
 800cf72:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf7c:	61bb      	str	r3, [r7, #24]
 800cf7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf80:	6979      	ldr	r1, [r7, #20]
 800cf82:	69ba      	ldr	r2, [r7, #24]
 800cf84:	e841 2300 	strex	r3, r2, [r1]
 800cf88:	613b      	str	r3, [r7, #16]
   return(result);
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1e6      	bne.n	800cf5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2220      	movs	r2, #32
 800cf94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cfa4:	bf00      	nop
 800cfa6:	3754      	adds	r7, #84	@ 0x54
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr
 800cfb0:	effffffe 	.word	0xeffffffe

0800cfb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f7fe ff2e 	bl	800be34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfd8:	bf00      	nop
 800cfda:	3710      	adds	r7, #16
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b088      	sub	sp, #32
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	e853 3f00 	ldrex	r3, [r3]
 800cff4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cffc:	61fb      	str	r3, [r7, #28]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	461a      	mov	r2, r3
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	61bb      	str	r3, [r7, #24]
 800d008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00a:	6979      	ldr	r1, [r7, #20]
 800d00c:	69ba      	ldr	r2, [r7, #24]
 800d00e:	e841 2300 	strex	r3, r2, [r1]
 800d012:	613b      	str	r3, [r7, #16]
   return(result);
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1e6      	bne.n	800cfe8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2220      	movs	r2, #32
 800d01e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7fe fef9 	bl	800be20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d02e:	bf00      	nop
 800d030:	3720      	adds	r7, #32
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
	...

0800d038 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b09c      	sub	sp, #112	@ 0x70
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d046:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d050:	2b22      	cmp	r3, #34	@ 0x22
 800d052:	f040 80be 	bne.w	800d1d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d05c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d060:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d064:	b2d9      	uxtb	r1, r3
 800d066:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d070:	400a      	ands	r2, r1
 800d072:	b2d2      	uxtb	r2, r2
 800d074:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d07a:	1c5a      	adds	r2, r3, #1
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d086:	b29b      	uxth	r3, r3
 800d088:	3b01      	subs	r3, #1
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d098:	b29b      	uxth	r3, r3
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f040 80a1 	bne.w	800d1e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0a8:	e853 3f00 	ldrex	r3, [r3]
 800d0ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d0ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d0b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d0c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d0c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0c6:	e841 2300 	strex	r3, r2, [r1]
 800d0ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d0cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1e6      	bne.n	800d0a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3308      	adds	r3, #8
 800d0d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0dc:	e853 3f00 	ldrex	r3, [r3]
 800d0e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0e4:	f023 0301 	bic.w	r3, r3, #1
 800d0e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	3308      	adds	r3, #8
 800d0f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d0f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800d0f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d0f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0fa:	e841 2300 	strex	r3, r2, [r1]
 800d0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1e5      	bne.n	800d0d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2220      	movs	r2, #32
 800d10a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a33      	ldr	r2, [pc, #204]	@ (800d1ec <UART_RxISR_8BIT+0x1b4>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d01f      	beq.n	800d164 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d018      	beq.n	800d164 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13a:	e853 3f00 	ldrex	r3, [r3]
 800d13e:	623b      	str	r3, [r7, #32]
   return(result);
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d146:	663b      	str	r3, [r7, #96]	@ 0x60
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	461a      	mov	r2, r3
 800d14e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d150:	633b      	str	r3, [r7, #48]	@ 0x30
 800d152:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d154:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d158:	e841 2300 	strex	r3, r2, [r1]
 800d15c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1e6      	bne.n	800d132 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d12e      	bne.n	800d1ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	e853 3f00 	ldrex	r3, [r3]
 800d17e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f023 0310 	bic.w	r3, r3, #16
 800d186:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	461a      	mov	r2, r3
 800d18e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d190:	61fb      	str	r3, [r7, #28]
 800d192:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d194:	69b9      	ldr	r1, [r7, #24]
 800d196:	69fa      	ldr	r2, [r7, #28]
 800d198:	e841 2300 	strex	r3, r2, [r1]
 800d19c:	617b      	str	r3, [r7, #20]
   return(result);
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1e6      	bne.n	800d172 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	69db      	ldr	r3, [r3, #28]
 800d1aa:	f003 0310 	and.w	r3, r3, #16
 800d1ae:	2b10      	cmp	r3, #16
 800d1b0:	d103      	bne.n	800d1ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2210      	movs	r2, #16
 800d1b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7fe fe40 	bl	800be48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d1c8:	e00b      	b.n	800d1e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7f4 f950 	bl	8001470 <HAL_UART_RxCpltCallback>
}
 800d1d0:	e007      	b.n	800d1e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	699a      	ldr	r2, [r3, #24]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f042 0208 	orr.w	r2, r2, #8
 800d1e0:	619a      	str	r2, [r3, #24]
}
 800d1e2:	bf00      	nop
 800d1e4:	3770      	adds	r7, #112	@ 0x70
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	58000c00 	.word	0x58000c00

0800d1f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b09c      	sub	sp, #112	@ 0x70
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d1fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d208:	2b22      	cmp	r3, #34	@ 0x22
 800d20a:	f040 80be 	bne.w	800d38a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d214:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d21c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d21e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d226:	4013      	ands	r3, r2
 800d228:	b29a      	uxth	r2, r3
 800d22a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d22c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d232:	1c9a      	adds	r2, r3, #2
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d23e:	b29b      	uxth	r3, r3
 800d240:	3b01      	subs	r3, #1
 800d242:	b29a      	uxth	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d250:	b29b      	uxth	r3, r3
 800d252:	2b00      	cmp	r3, #0
 800d254:	f040 80a1 	bne.w	800d39a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d260:	e853 3f00 	ldrex	r3, [r3]
 800d264:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d26c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d276:	657b      	str	r3, [r7, #84]	@ 0x54
 800d278:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d27c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d27e:	e841 2300 	strex	r3, r2, [r1]
 800d282:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1e6      	bne.n	800d258 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3308      	adds	r3, #8
 800d290:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d294:	e853 3f00 	ldrex	r3, [r3]
 800d298:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29c:	f023 0301 	bic.w	r3, r3, #1
 800d2a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d2aa:	643a      	str	r2, [r7, #64]	@ 0x40
 800d2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d2b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d2b2:	e841 2300 	strex	r3, r2, [r1]
 800d2b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1e5      	bne.n	800d28a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2220      	movs	r2, #32
 800d2c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a33      	ldr	r2, [pc, #204]	@ (800d3a4 <UART_RxISR_16BIT+0x1b4>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d01f      	beq.n	800d31c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d018      	beq.n	800d31c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	e853 3f00 	ldrex	r3, [r3]
 800d2f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d2fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	461a      	mov	r2, r3
 800d306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d30a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d30e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d310:	e841 2300 	strex	r3, r2, [r1]
 800d314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1e6      	bne.n	800d2ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d320:	2b01      	cmp	r3, #1
 800d322:	d12e      	bne.n	800d382 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	e853 3f00 	ldrex	r3, [r3]
 800d336:	60bb      	str	r3, [r7, #8]
   return(result);
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	f023 0310 	bic.w	r3, r3, #16
 800d33e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	461a      	mov	r2, r3
 800d346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d348:	61bb      	str	r3, [r7, #24]
 800d34a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34c:	6979      	ldr	r1, [r7, #20]
 800d34e:	69ba      	ldr	r2, [r7, #24]
 800d350:	e841 2300 	strex	r3, r2, [r1]
 800d354:	613b      	str	r3, [r7, #16]
   return(result);
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1e6      	bne.n	800d32a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	69db      	ldr	r3, [r3, #28]
 800d362:	f003 0310 	and.w	r3, r3, #16
 800d366:	2b10      	cmp	r3, #16
 800d368:	d103      	bne.n	800d372 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2210      	movs	r2, #16
 800d370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d378:	4619      	mov	r1, r3
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7fe fd64 	bl	800be48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d380:	e00b      	b.n	800d39a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7f4 f874 	bl	8001470 <HAL_UART_RxCpltCallback>
}
 800d388:	e007      	b.n	800d39a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	699a      	ldr	r2, [r3, #24]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f042 0208 	orr.w	r2, r2, #8
 800d398:	619a      	str	r2, [r3, #24]
}
 800d39a:	bf00      	nop
 800d39c:	3770      	adds	r7, #112	@ 0x70
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	58000c00 	.word	0x58000c00

0800d3a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b0ac      	sub	sp, #176	@ 0xb0
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d3b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	69db      	ldr	r3, [r3, #28]
 800d3c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3de:	2b22      	cmp	r3, #34	@ 0x22
 800d3e0:	f040 8180 	bne.w	800d6e4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d3ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d3ee:	e123      	b.n	800d638 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d3fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d3fe:	b2d9      	uxtb	r1, r3
 800d400:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d404:	b2da      	uxtb	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d40a:	400a      	ands	r2, r1
 800d40c:	b2d2      	uxtb	r2, r2
 800d40e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d414:	1c5a      	adds	r2, r3, #1
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d420:	b29b      	uxth	r3, r3
 800d422:	3b01      	subs	r3, #1
 800d424:	b29a      	uxth	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	69db      	ldr	r3, [r3, #28]
 800d432:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d43a:	f003 0307 	and.w	r3, r3, #7
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d053      	beq.n	800d4ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d011      	beq.n	800d472 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d44e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00b      	beq.n	800d472 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2201      	movs	r2, #1
 800d460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d468:	f043 0201 	orr.w	r2, r3, #1
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d476:	f003 0302 	and.w	r3, r3, #2
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d011      	beq.n	800d4a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d47e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d482:	f003 0301 	and.w	r3, r3, #1
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00b      	beq.n	800d4a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2202      	movs	r2, #2
 800d490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d498:	f043 0204 	orr.w	r2, r3, #4
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4a6:	f003 0304 	and.w	r3, r3, #4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d011      	beq.n	800d4d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d4ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00b      	beq.n	800d4d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2204      	movs	r2, #4
 800d4c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4c8:	f043 0202 	orr.w	r2, r3, #2
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d006      	beq.n	800d4ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7fe fca9 	bl	800be34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f040 80a0 	bne.w	800d638 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d500:	e853 3f00 	ldrex	r3, [r3]
 800d504:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d50c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	461a      	mov	r2, r3
 800d516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d51a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d51c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d520:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e4      	bne.n	800d4f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	3308      	adds	r3, #8
 800d534:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d538:	e853 3f00 	ldrex	r3, [r3]
 800d53c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d53e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d540:	4b6e      	ldr	r3, [pc, #440]	@ (800d6fc <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d542:	4013      	ands	r3, r2
 800d544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	3308      	adds	r3, #8
 800d54e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d552:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d554:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d556:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d558:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d55a:	e841 2300 	strex	r3, r2, [r1]
 800d55e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d560:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1e3      	bne.n	800d52e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2220      	movs	r2, #32
 800d56a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a60      	ldr	r2, [pc, #384]	@ (800d700 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d021      	beq.n	800d5c8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d01a      	beq.n	800d5c8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d59a:	e853 3f00 	ldrex	r3, [r3]
 800d59e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d5a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d5a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d5b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800d5b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d5ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5bc:	e841 2300 	strex	r3, r2, [r1]
 800d5c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d5c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1e4      	bne.n	800d592 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d130      	bne.n	800d632 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5de:	e853 3f00 	ldrex	r3, [r3]
 800d5e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e6:	f023 0310 	bic.w	r3, r3, #16
 800d5ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d600:	e841 2300 	strex	r3, r2, [r1]
 800d604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1e4      	bne.n	800d5d6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	69db      	ldr	r3, [r3, #28]
 800d612:	f003 0310 	and.w	r3, r3, #16
 800d616:	2b10      	cmp	r3, #16
 800d618:	d103      	bne.n	800d622 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2210      	movs	r2, #16
 800d620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d628:	4619      	mov	r1, r3
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7fe fc0c 	bl	800be48 <HAL_UARTEx_RxEventCallback>
 800d630:	e002      	b.n	800d638 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f7f3 ff1c 	bl	8001470 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d638:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d006      	beq.n	800d64e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d644:	f003 0320 	and.w	r3, r3, #32
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f47f aed1 	bne.w	800d3f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d654:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d658:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d049      	beq.n	800d6f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d666:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d242      	bcs.n	800d6f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	3308      	adds	r3, #8
 800d674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	e853 3f00 	ldrex	r3, [r3]
 800d67c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3308      	adds	r3, #8
 800d68e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d694:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d696:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d69a:	e841 2300 	strex	r3, r2, [r1]
 800d69e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1e3      	bne.n	800d66e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a16      	ldr	r2, [pc, #88]	@ (800d704 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d6aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	e853 3f00 	ldrex	r3, [r3]
 800d6b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	f043 0320 	orr.w	r3, r3, #32
 800d6c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d6ce:	61bb      	str	r3, [r7, #24]
 800d6d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d2:	6979      	ldr	r1, [r7, #20]
 800d6d4:	69ba      	ldr	r2, [r7, #24]
 800d6d6:	e841 2300 	strex	r3, r2, [r1]
 800d6da:	613b      	str	r3, [r7, #16]
   return(result);
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1e4      	bne.n	800d6ac <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d6e2:	e007      	b.n	800d6f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	699a      	ldr	r2, [r3, #24]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f042 0208 	orr.w	r2, r2, #8
 800d6f2:	619a      	str	r2, [r3, #24]
}
 800d6f4:	bf00      	nop
 800d6f6:	37b0      	adds	r7, #176	@ 0xb0
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	effffffe 	.word	0xeffffffe
 800d700:	58000c00 	.word	0x58000c00
 800d704:	0800d039 	.word	0x0800d039

0800d708 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b0ae      	sub	sp, #184	@ 0xb8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d716:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	69db      	ldr	r3, [r3, #28]
 800d720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d73e:	2b22      	cmp	r3, #34	@ 0x22
 800d740:	f040 8184 	bne.w	800da4c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d74a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d74e:	e127      	b.n	800d9a0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d756:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d75e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d762:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d766:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d76a:	4013      	ands	r3, r2
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d772:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d778:	1c9a      	adds	r2, r3, #2
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d784:	b29b      	uxth	r3, r3
 800d786:	3b01      	subs	r3, #1
 800d788:	b29a      	uxth	r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	69db      	ldr	r3, [r3, #28]
 800d796:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d79a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d79e:	f003 0307 	and.w	r3, r3, #7
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d053      	beq.n	800d84e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d7aa:	f003 0301 	and.w	r3, r3, #1
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d011      	beq.n	800d7d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d7b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00b      	beq.n	800d7d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7cc:	f043 0201 	orr.w	r2, r3, #1
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d7da:	f003 0302 	and.w	r3, r3, #2
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d011      	beq.n	800d806 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d7e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d7e6:	f003 0301 	and.w	r3, r3, #1
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00b      	beq.n	800d806 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7fc:	f043 0204 	orr.w	r2, r3, #4
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d80a:	f003 0304 	and.w	r3, r3, #4
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d011      	beq.n	800d836 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00b      	beq.n	800d836 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2204      	movs	r2, #4
 800d824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d82c:	f043 0202 	orr.w	r2, r3, #2
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d006      	beq.n	800d84e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7fe faf7 	bl	800be34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d854:	b29b      	uxth	r3, r3
 800d856:	2b00      	cmp	r3, #0
 800d858:	f040 80a2 	bne.w	800d9a0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d864:	e853 3f00 	ldrex	r3, [r3]
 800d868:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d86a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d86c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	461a      	mov	r2, r3
 800d87a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d87e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d882:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d884:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d886:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d88a:	e841 2300 	strex	r3, r2, [r1]
 800d88e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d890:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1e2      	bne.n	800d85c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3308      	adds	r3, #8
 800d89c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8a0:	e853 3f00 	ldrex	r3, [r3]
 800d8a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d8a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d8a8:	4b6e      	ldr	r3, [pc, #440]	@ (800da64 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d8aa:	4013      	ands	r3, r2
 800d8ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3308      	adds	r3, #8
 800d8b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d8ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d8bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d8c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d8c2:	e841 2300 	strex	r3, r2, [r1]
 800d8c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d8c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1e3      	bne.n	800d896 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2220      	movs	r2, #32
 800d8d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a60      	ldr	r2, [pc, #384]	@ (800da68 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d021      	beq.n	800d930 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d01a      	beq.n	800d930 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d902:	e853 3f00 	ldrex	r3, [r3]
 800d906:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d90a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d90e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d91c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d91e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d922:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d924:	e841 2300 	strex	r3, r2, [r1]
 800d928:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d92a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1e4      	bne.n	800d8fa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d934:	2b01      	cmp	r3, #1
 800d936:	d130      	bne.n	800d99a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d946:	e853 3f00 	ldrex	r3, [r3]
 800d94a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94e:	f023 0310 	bic.w	r3, r3, #16
 800d952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	461a      	mov	r2, r3
 800d95c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d960:	647b      	str	r3, [r7, #68]	@ 0x44
 800d962:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d964:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d968:	e841 2300 	strex	r3, r2, [r1]
 800d96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1e4      	bne.n	800d93e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	69db      	ldr	r3, [r3, #28]
 800d97a:	f003 0310 	and.w	r3, r3, #16
 800d97e:	2b10      	cmp	r3, #16
 800d980:	d103      	bne.n	800d98a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2210      	movs	r2, #16
 800d988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d990:	4619      	mov	r1, r3
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7fe fa58 	bl	800be48 <HAL_UARTEx_RxEventCallback>
 800d998:	e002      	b.n	800d9a0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7f3 fd68 	bl	8001470 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d9a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d006      	beq.n	800d9b6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d9a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d9ac:	f003 0320 	and.w	r3, r3, #32
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f47f aecd 	bne.w	800d750 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d9bc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d9c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d049      	beq.n	800da5c <UART_RxISR_16BIT_FIFOEN+0x354>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d9ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d242      	bcs.n	800da5c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3308      	adds	r3, #8
 800d9dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e0:	e853 3f00 	ldrex	r3, [r3]
 800d9e4:	623b      	str	r3, [r7, #32]
   return(result);
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d9ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3308      	adds	r3, #8
 800d9f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d9fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800d9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da02:	e841 2300 	strex	r3, r2, [r1]
 800da06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d1e3      	bne.n	800d9d6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4a16      	ldr	r2, [pc, #88]	@ (800da6c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800da12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	e853 3f00 	ldrex	r3, [r3]
 800da20:	60fb      	str	r3, [r7, #12]
   return(result);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f043 0320 	orr.w	r3, r3, #32
 800da28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da36:	61fb      	str	r3, [r7, #28]
 800da38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3a:	69b9      	ldr	r1, [r7, #24]
 800da3c:	69fa      	ldr	r2, [r7, #28]
 800da3e:	e841 2300 	strex	r3, r2, [r1]
 800da42:	617b      	str	r3, [r7, #20]
   return(result);
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1e4      	bne.n	800da14 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800da4a:	e007      	b.n	800da5c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	699a      	ldr	r2, [r3, #24]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f042 0208 	orr.w	r2, r2, #8
 800da5a:	619a      	str	r2, [r3, #24]
}
 800da5c:	bf00      	nop
 800da5e:	37b8      	adds	r7, #184	@ 0xb8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	effffffe 	.word	0xeffffffe
 800da68:	58000c00 	.word	0x58000c00
 800da6c:	0800d1f1 	.word	0x0800d1f1

0800da70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800da8c:	bf00      	nop
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800daa0:	bf00      	nop
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d101      	bne.n	800dac2 <HAL_UARTEx_DisableFifoMode+0x16>
 800dabe:	2302      	movs	r3, #2
 800dac0:	e027      	b.n	800db12 <HAL_UARTEx_DisableFifoMode+0x66>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2224      	movs	r2, #36	@ 0x24
 800dace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f022 0201 	bic.w	r2, r2, #1
 800dae8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800daf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2220      	movs	r2, #32
 800db04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b084      	sub	sp, #16
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d101      	bne.n	800db36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800db32:	2302      	movs	r3, #2
 800db34:	e02d      	b.n	800db92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2224      	movs	r2, #36	@ 0x24
 800db42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f022 0201 	bic.w	r2, r2, #1
 800db5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	430a      	orrs	r2, r1
 800db70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f850 	bl	800dc18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2220      	movs	r2, #32
 800db84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b084      	sub	sp, #16
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
 800dba2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d101      	bne.n	800dbb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dbae:	2302      	movs	r3, #2
 800dbb0:	e02d      	b.n	800dc0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2224      	movs	r2, #36	@ 0x24
 800dbbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f022 0201 	bic.w	r2, r2, #1
 800dbd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	683a      	ldr	r2, [r7, #0]
 800dbea:	430a      	orrs	r2, r1
 800dbec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f812 	bl	800dc18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b085      	sub	sp, #20
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d108      	bne.n	800dc3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2201      	movs	r2, #1
 800dc34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dc38:	e031      	b.n	800dc9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dc3a:	2310      	movs	r3, #16
 800dc3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dc3e:	2310      	movs	r3, #16
 800dc40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	0e5b      	lsrs	r3, r3, #25
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	f003 0307 	and.w	r3, r3, #7
 800dc50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	0f5b      	lsrs	r3, r3, #29
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	f003 0307 	and.w	r3, r3, #7
 800dc60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
 800dc64:	7b3a      	ldrb	r2, [r7, #12]
 800dc66:	4911      	ldr	r1, [pc, #68]	@ (800dcac <UARTEx_SetNbDataToProcess+0x94>)
 800dc68:	5c8a      	ldrb	r2, [r1, r2]
 800dc6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dc6e:	7b3a      	ldrb	r2, [r7, #12]
 800dc70:	490f      	ldr	r1, [pc, #60]	@ (800dcb0 <UARTEx_SetNbDataToProcess+0x98>)
 800dc72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc74:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	7b7a      	ldrb	r2, [r7, #13]
 800dc84:	4909      	ldr	r1, [pc, #36]	@ (800dcac <UARTEx_SetNbDataToProcess+0x94>)
 800dc86:	5c8a      	ldrb	r2, [r1, r2]
 800dc88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dc8c:	7b7a      	ldrb	r2, [r7, #13]
 800dc8e:	4908      	ldr	r1, [pc, #32]	@ (800dcb0 <UARTEx_SetNbDataToProcess+0x98>)
 800dc90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc92:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dc9e:	bf00      	nop
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	08012ab4 	.word	0x08012ab4
 800dcb0:	08012abc 	.word	0x08012abc

0800dcb4 <__cvt>:
 800dcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcb6:	ed2d 8b02 	vpush	{d8}
 800dcba:	eeb0 8b40 	vmov.f64	d8, d0
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	4617      	mov	r7, r2
 800dcc2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800dcc4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dcc6:	ee18 2a90 	vmov	r2, s17
 800dcca:	f025 0520 	bic.w	r5, r5, #32
 800dcce:	2a00      	cmp	r2, #0
 800dcd0:	bfb6      	itet	lt
 800dcd2:	222d      	movlt	r2, #45	@ 0x2d
 800dcd4:	2200      	movge	r2, #0
 800dcd6:	eeb1 8b40 	vneglt.f64	d8, d0
 800dcda:	2d46      	cmp	r5, #70	@ 0x46
 800dcdc:	460c      	mov	r4, r1
 800dcde:	701a      	strb	r2, [r3, #0]
 800dce0:	d004      	beq.n	800dcec <__cvt+0x38>
 800dce2:	2d45      	cmp	r5, #69	@ 0x45
 800dce4:	d100      	bne.n	800dce8 <__cvt+0x34>
 800dce6:	3401      	adds	r4, #1
 800dce8:	2102      	movs	r1, #2
 800dcea:	e000      	b.n	800dcee <__cvt+0x3a>
 800dcec:	2103      	movs	r1, #3
 800dcee:	ab03      	add	r3, sp, #12
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	ab02      	add	r3, sp, #8
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	4622      	mov	r2, r4
 800dcf8:	4633      	mov	r3, r6
 800dcfa:	eeb0 0b48 	vmov.f64	d0, d8
 800dcfe:	f001 f88b 	bl	800ee18 <_dtoa_r>
 800dd02:	2d47      	cmp	r5, #71	@ 0x47
 800dd04:	d114      	bne.n	800dd30 <__cvt+0x7c>
 800dd06:	07fb      	lsls	r3, r7, #31
 800dd08:	d50a      	bpl.n	800dd20 <__cvt+0x6c>
 800dd0a:	1902      	adds	r2, r0, r4
 800dd0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd14:	bf08      	it	eq
 800dd16:	9203      	streq	r2, [sp, #12]
 800dd18:	2130      	movs	r1, #48	@ 0x30
 800dd1a:	9b03      	ldr	r3, [sp, #12]
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d319      	bcc.n	800dd54 <__cvt+0xa0>
 800dd20:	9b03      	ldr	r3, [sp, #12]
 800dd22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd24:	1a1b      	subs	r3, r3, r0
 800dd26:	6013      	str	r3, [r2, #0]
 800dd28:	b005      	add	sp, #20
 800dd2a:	ecbd 8b02 	vpop	{d8}
 800dd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd30:	2d46      	cmp	r5, #70	@ 0x46
 800dd32:	eb00 0204 	add.w	r2, r0, r4
 800dd36:	d1e9      	bne.n	800dd0c <__cvt+0x58>
 800dd38:	7803      	ldrb	r3, [r0, #0]
 800dd3a:	2b30      	cmp	r3, #48	@ 0x30
 800dd3c:	d107      	bne.n	800dd4e <__cvt+0x9a>
 800dd3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd46:	bf1c      	itt	ne
 800dd48:	f1c4 0401 	rsbne	r4, r4, #1
 800dd4c:	6034      	strne	r4, [r6, #0]
 800dd4e:	6833      	ldr	r3, [r6, #0]
 800dd50:	441a      	add	r2, r3
 800dd52:	e7db      	b.n	800dd0c <__cvt+0x58>
 800dd54:	1c5c      	adds	r4, r3, #1
 800dd56:	9403      	str	r4, [sp, #12]
 800dd58:	7019      	strb	r1, [r3, #0]
 800dd5a:	e7de      	b.n	800dd1a <__cvt+0x66>

0800dd5c <__exponent>:
 800dd5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd5e:	2900      	cmp	r1, #0
 800dd60:	bfba      	itte	lt
 800dd62:	4249      	neglt	r1, r1
 800dd64:	232d      	movlt	r3, #45	@ 0x2d
 800dd66:	232b      	movge	r3, #43	@ 0x2b
 800dd68:	2909      	cmp	r1, #9
 800dd6a:	7002      	strb	r2, [r0, #0]
 800dd6c:	7043      	strb	r3, [r0, #1]
 800dd6e:	dd29      	ble.n	800ddc4 <__exponent+0x68>
 800dd70:	f10d 0307 	add.w	r3, sp, #7
 800dd74:	461d      	mov	r5, r3
 800dd76:	270a      	movs	r7, #10
 800dd78:	461a      	mov	r2, r3
 800dd7a:	fbb1 f6f7 	udiv	r6, r1, r7
 800dd7e:	fb07 1416 	mls	r4, r7, r6, r1
 800dd82:	3430      	adds	r4, #48	@ 0x30
 800dd84:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dd88:	460c      	mov	r4, r1
 800dd8a:	2c63      	cmp	r4, #99	@ 0x63
 800dd8c:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd90:	4631      	mov	r1, r6
 800dd92:	dcf1      	bgt.n	800dd78 <__exponent+0x1c>
 800dd94:	3130      	adds	r1, #48	@ 0x30
 800dd96:	1e94      	subs	r4, r2, #2
 800dd98:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dd9c:	1c41      	adds	r1, r0, #1
 800dd9e:	4623      	mov	r3, r4
 800dda0:	42ab      	cmp	r3, r5
 800dda2:	d30a      	bcc.n	800ddba <__exponent+0x5e>
 800dda4:	f10d 0309 	add.w	r3, sp, #9
 800dda8:	1a9b      	subs	r3, r3, r2
 800ddaa:	42ac      	cmp	r4, r5
 800ddac:	bf88      	it	hi
 800ddae:	2300      	movhi	r3, #0
 800ddb0:	3302      	adds	r3, #2
 800ddb2:	4403      	add	r3, r0
 800ddb4:	1a18      	subs	r0, r3, r0
 800ddb6:	b003      	add	sp, #12
 800ddb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddba:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ddbe:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ddc2:	e7ed      	b.n	800dda0 <__exponent+0x44>
 800ddc4:	2330      	movs	r3, #48	@ 0x30
 800ddc6:	3130      	adds	r1, #48	@ 0x30
 800ddc8:	7083      	strb	r3, [r0, #2]
 800ddca:	70c1      	strb	r1, [r0, #3]
 800ddcc:	1d03      	adds	r3, r0, #4
 800ddce:	e7f1      	b.n	800ddb4 <__exponent+0x58>

0800ddd0 <_printf_float>:
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	b08d      	sub	sp, #52	@ 0x34
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dddc:	4616      	mov	r6, r2
 800ddde:	461f      	mov	r7, r3
 800dde0:	4605      	mov	r5, r0
 800dde2:	f000 ff11 	bl	800ec08 <_localeconv_r>
 800dde6:	f8d0 b000 	ldr.w	fp, [r0]
 800ddea:	4658      	mov	r0, fp
 800ddec:	f7f2 fac8 	bl	8000380 <strlen>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddf4:	f8d8 3000 	ldr.w	r3, [r8]
 800ddf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ddfc:	6822      	ldr	r2, [r4, #0]
 800ddfe:	9005      	str	r0, [sp, #20]
 800de00:	3307      	adds	r3, #7
 800de02:	f023 0307 	bic.w	r3, r3, #7
 800de06:	f103 0108 	add.w	r1, r3, #8
 800de0a:	f8c8 1000 	str.w	r1, [r8]
 800de0e:	ed93 0b00 	vldr	d0, [r3]
 800de12:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e070 <_printf_float+0x2a0>
 800de16:	eeb0 7bc0 	vabs.f64	d7, d0
 800de1a:	eeb4 7b46 	vcmp.f64	d7, d6
 800de1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de22:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800de26:	dd24      	ble.n	800de72 <_printf_float+0xa2>
 800de28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800de2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de30:	d502      	bpl.n	800de38 <_printf_float+0x68>
 800de32:	232d      	movs	r3, #45	@ 0x2d
 800de34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de38:	498f      	ldr	r1, [pc, #572]	@ (800e078 <_printf_float+0x2a8>)
 800de3a:	4b90      	ldr	r3, [pc, #576]	@ (800e07c <_printf_float+0x2ac>)
 800de3c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800de40:	bf8c      	ite	hi
 800de42:	4688      	movhi	r8, r1
 800de44:	4698      	movls	r8, r3
 800de46:	f022 0204 	bic.w	r2, r2, #4
 800de4a:	2303      	movs	r3, #3
 800de4c:	6123      	str	r3, [r4, #16]
 800de4e:	6022      	str	r2, [r4, #0]
 800de50:	f04f 0a00 	mov.w	sl, #0
 800de54:	9700      	str	r7, [sp, #0]
 800de56:	4633      	mov	r3, r6
 800de58:	aa0b      	add	r2, sp, #44	@ 0x2c
 800de5a:	4621      	mov	r1, r4
 800de5c:	4628      	mov	r0, r5
 800de5e:	f000 f9d1 	bl	800e204 <_printf_common>
 800de62:	3001      	adds	r0, #1
 800de64:	f040 8089 	bne.w	800df7a <_printf_float+0x1aa>
 800de68:	f04f 30ff 	mov.w	r0, #4294967295
 800de6c:	b00d      	add	sp, #52	@ 0x34
 800de6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de72:	eeb4 0b40 	vcmp.f64	d0, d0
 800de76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7a:	d709      	bvc.n	800de90 <_printf_float+0xc0>
 800de7c:	ee10 3a90 	vmov	r3, s1
 800de80:	2b00      	cmp	r3, #0
 800de82:	bfbc      	itt	lt
 800de84:	232d      	movlt	r3, #45	@ 0x2d
 800de86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800de8a:	497d      	ldr	r1, [pc, #500]	@ (800e080 <_printf_float+0x2b0>)
 800de8c:	4b7d      	ldr	r3, [pc, #500]	@ (800e084 <_printf_float+0x2b4>)
 800de8e:	e7d5      	b.n	800de3c <_printf_float+0x6c>
 800de90:	6863      	ldr	r3, [r4, #4]
 800de92:	1c59      	adds	r1, r3, #1
 800de94:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800de98:	d139      	bne.n	800df0e <_printf_float+0x13e>
 800de9a:	2306      	movs	r3, #6
 800de9c:	6063      	str	r3, [r4, #4]
 800de9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dea2:	2300      	movs	r3, #0
 800dea4:	6022      	str	r2, [r4, #0]
 800dea6:	9303      	str	r3, [sp, #12]
 800dea8:	ab0a      	add	r3, sp, #40	@ 0x28
 800deaa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800deae:	ab09      	add	r3, sp, #36	@ 0x24
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	6861      	ldr	r1, [r4, #4]
 800deb4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800deb8:	4628      	mov	r0, r5
 800deba:	f7ff fefb 	bl	800dcb4 <__cvt>
 800debe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dec2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dec4:	4680      	mov	r8, r0
 800dec6:	d129      	bne.n	800df1c <_printf_float+0x14c>
 800dec8:	1cc8      	adds	r0, r1, #3
 800deca:	db02      	blt.n	800ded2 <_printf_float+0x102>
 800decc:	6863      	ldr	r3, [r4, #4]
 800dece:	4299      	cmp	r1, r3
 800ded0:	dd41      	ble.n	800df56 <_printf_float+0x186>
 800ded2:	f1a9 0902 	sub.w	r9, r9, #2
 800ded6:	fa5f f989 	uxtb.w	r9, r9
 800deda:	3901      	subs	r1, #1
 800dedc:	464a      	mov	r2, r9
 800dede:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dee2:	9109      	str	r1, [sp, #36]	@ 0x24
 800dee4:	f7ff ff3a 	bl	800dd5c <__exponent>
 800dee8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800deea:	1813      	adds	r3, r2, r0
 800deec:	2a01      	cmp	r2, #1
 800deee:	4682      	mov	sl, r0
 800def0:	6123      	str	r3, [r4, #16]
 800def2:	dc02      	bgt.n	800defa <_printf_float+0x12a>
 800def4:	6822      	ldr	r2, [r4, #0]
 800def6:	07d2      	lsls	r2, r2, #31
 800def8:	d501      	bpl.n	800defe <_printf_float+0x12e>
 800defa:	3301      	adds	r3, #1
 800defc:	6123      	str	r3, [r4, #16]
 800defe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0a6      	beq.n	800de54 <_printf_float+0x84>
 800df06:	232d      	movs	r3, #45	@ 0x2d
 800df08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df0c:	e7a2      	b.n	800de54 <_printf_float+0x84>
 800df0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800df12:	d1c4      	bne.n	800de9e <_printf_float+0xce>
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1c2      	bne.n	800de9e <_printf_float+0xce>
 800df18:	2301      	movs	r3, #1
 800df1a:	e7bf      	b.n	800de9c <_printf_float+0xcc>
 800df1c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800df20:	d9db      	bls.n	800deda <_printf_float+0x10a>
 800df22:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800df26:	d118      	bne.n	800df5a <_printf_float+0x18a>
 800df28:	2900      	cmp	r1, #0
 800df2a:	6863      	ldr	r3, [r4, #4]
 800df2c:	dd0b      	ble.n	800df46 <_printf_float+0x176>
 800df2e:	6121      	str	r1, [r4, #16]
 800df30:	b913      	cbnz	r3, 800df38 <_printf_float+0x168>
 800df32:	6822      	ldr	r2, [r4, #0]
 800df34:	07d0      	lsls	r0, r2, #31
 800df36:	d502      	bpl.n	800df3e <_printf_float+0x16e>
 800df38:	3301      	adds	r3, #1
 800df3a:	440b      	add	r3, r1
 800df3c:	6123      	str	r3, [r4, #16]
 800df3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800df40:	f04f 0a00 	mov.w	sl, #0
 800df44:	e7db      	b.n	800defe <_printf_float+0x12e>
 800df46:	b913      	cbnz	r3, 800df4e <_printf_float+0x17e>
 800df48:	6822      	ldr	r2, [r4, #0]
 800df4a:	07d2      	lsls	r2, r2, #31
 800df4c:	d501      	bpl.n	800df52 <_printf_float+0x182>
 800df4e:	3302      	adds	r3, #2
 800df50:	e7f4      	b.n	800df3c <_printf_float+0x16c>
 800df52:	2301      	movs	r3, #1
 800df54:	e7f2      	b.n	800df3c <_printf_float+0x16c>
 800df56:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800df5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df5c:	4299      	cmp	r1, r3
 800df5e:	db05      	blt.n	800df6c <_printf_float+0x19c>
 800df60:	6823      	ldr	r3, [r4, #0]
 800df62:	6121      	str	r1, [r4, #16]
 800df64:	07d8      	lsls	r0, r3, #31
 800df66:	d5ea      	bpl.n	800df3e <_printf_float+0x16e>
 800df68:	1c4b      	adds	r3, r1, #1
 800df6a:	e7e7      	b.n	800df3c <_printf_float+0x16c>
 800df6c:	2900      	cmp	r1, #0
 800df6e:	bfd4      	ite	le
 800df70:	f1c1 0202 	rsble	r2, r1, #2
 800df74:	2201      	movgt	r2, #1
 800df76:	4413      	add	r3, r2
 800df78:	e7e0      	b.n	800df3c <_printf_float+0x16c>
 800df7a:	6823      	ldr	r3, [r4, #0]
 800df7c:	055a      	lsls	r2, r3, #21
 800df7e:	d407      	bmi.n	800df90 <_printf_float+0x1c0>
 800df80:	6923      	ldr	r3, [r4, #16]
 800df82:	4642      	mov	r2, r8
 800df84:	4631      	mov	r1, r6
 800df86:	4628      	mov	r0, r5
 800df88:	47b8      	blx	r7
 800df8a:	3001      	adds	r0, #1
 800df8c:	d12a      	bne.n	800dfe4 <_printf_float+0x214>
 800df8e:	e76b      	b.n	800de68 <_printf_float+0x98>
 800df90:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800df94:	f240 80e0 	bls.w	800e158 <_printf_float+0x388>
 800df98:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800df9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa4:	d133      	bne.n	800e00e <_printf_float+0x23e>
 800dfa6:	4a38      	ldr	r2, [pc, #224]	@ (800e088 <_printf_float+0x2b8>)
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	4631      	mov	r1, r6
 800dfac:	4628      	mov	r0, r5
 800dfae:	47b8      	blx	r7
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	f43f af59 	beq.w	800de68 <_printf_float+0x98>
 800dfb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dfba:	4543      	cmp	r3, r8
 800dfbc:	db02      	blt.n	800dfc4 <_printf_float+0x1f4>
 800dfbe:	6823      	ldr	r3, [r4, #0]
 800dfc0:	07d8      	lsls	r0, r3, #31
 800dfc2:	d50f      	bpl.n	800dfe4 <_printf_float+0x214>
 800dfc4:	9b05      	ldr	r3, [sp, #20]
 800dfc6:	465a      	mov	r2, fp
 800dfc8:	4631      	mov	r1, r6
 800dfca:	4628      	mov	r0, r5
 800dfcc:	47b8      	blx	r7
 800dfce:	3001      	adds	r0, #1
 800dfd0:	f43f af4a 	beq.w	800de68 <_printf_float+0x98>
 800dfd4:	f04f 0900 	mov.w	r9, #0
 800dfd8:	f108 38ff 	add.w	r8, r8, #4294967295
 800dfdc:	f104 0a1a 	add.w	sl, r4, #26
 800dfe0:	45c8      	cmp	r8, r9
 800dfe2:	dc09      	bgt.n	800dff8 <_printf_float+0x228>
 800dfe4:	6823      	ldr	r3, [r4, #0]
 800dfe6:	079b      	lsls	r3, r3, #30
 800dfe8:	f100 8107 	bmi.w	800e1fa <_printf_float+0x42a>
 800dfec:	68e0      	ldr	r0, [r4, #12]
 800dfee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dff0:	4298      	cmp	r0, r3
 800dff2:	bfb8      	it	lt
 800dff4:	4618      	movlt	r0, r3
 800dff6:	e739      	b.n	800de6c <_printf_float+0x9c>
 800dff8:	2301      	movs	r3, #1
 800dffa:	4652      	mov	r2, sl
 800dffc:	4631      	mov	r1, r6
 800dffe:	4628      	mov	r0, r5
 800e000:	47b8      	blx	r7
 800e002:	3001      	adds	r0, #1
 800e004:	f43f af30 	beq.w	800de68 <_printf_float+0x98>
 800e008:	f109 0901 	add.w	r9, r9, #1
 800e00c:	e7e8      	b.n	800dfe0 <_printf_float+0x210>
 800e00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e010:	2b00      	cmp	r3, #0
 800e012:	dc3b      	bgt.n	800e08c <_printf_float+0x2bc>
 800e014:	4a1c      	ldr	r2, [pc, #112]	@ (800e088 <_printf_float+0x2b8>)
 800e016:	2301      	movs	r3, #1
 800e018:	4631      	mov	r1, r6
 800e01a:	4628      	mov	r0, r5
 800e01c:	47b8      	blx	r7
 800e01e:	3001      	adds	r0, #1
 800e020:	f43f af22 	beq.w	800de68 <_printf_float+0x98>
 800e024:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e028:	ea59 0303 	orrs.w	r3, r9, r3
 800e02c:	d102      	bne.n	800e034 <_printf_float+0x264>
 800e02e:	6823      	ldr	r3, [r4, #0]
 800e030:	07d9      	lsls	r1, r3, #31
 800e032:	d5d7      	bpl.n	800dfe4 <_printf_float+0x214>
 800e034:	9b05      	ldr	r3, [sp, #20]
 800e036:	465a      	mov	r2, fp
 800e038:	4631      	mov	r1, r6
 800e03a:	4628      	mov	r0, r5
 800e03c:	47b8      	blx	r7
 800e03e:	3001      	adds	r0, #1
 800e040:	f43f af12 	beq.w	800de68 <_printf_float+0x98>
 800e044:	f04f 0a00 	mov.w	sl, #0
 800e048:	f104 0b1a 	add.w	fp, r4, #26
 800e04c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e04e:	425b      	negs	r3, r3
 800e050:	4553      	cmp	r3, sl
 800e052:	dc01      	bgt.n	800e058 <_printf_float+0x288>
 800e054:	464b      	mov	r3, r9
 800e056:	e794      	b.n	800df82 <_printf_float+0x1b2>
 800e058:	2301      	movs	r3, #1
 800e05a:	465a      	mov	r2, fp
 800e05c:	4631      	mov	r1, r6
 800e05e:	4628      	mov	r0, r5
 800e060:	47b8      	blx	r7
 800e062:	3001      	adds	r0, #1
 800e064:	f43f af00 	beq.w	800de68 <_printf_float+0x98>
 800e068:	f10a 0a01 	add.w	sl, sl, #1
 800e06c:	e7ee      	b.n	800e04c <_printf_float+0x27c>
 800e06e:	bf00      	nop
 800e070:	ffffffff 	.word	0xffffffff
 800e074:	7fefffff 	.word	0x7fefffff
 800e078:	08012ac8 	.word	0x08012ac8
 800e07c:	08012ac4 	.word	0x08012ac4
 800e080:	08012ad0 	.word	0x08012ad0
 800e084:	08012acc 	.word	0x08012acc
 800e088:	08012c0a 	.word	0x08012c0a
 800e08c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e08e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e092:	4553      	cmp	r3, sl
 800e094:	bfa8      	it	ge
 800e096:	4653      	movge	r3, sl
 800e098:	2b00      	cmp	r3, #0
 800e09a:	4699      	mov	r9, r3
 800e09c:	dc37      	bgt.n	800e10e <_printf_float+0x33e>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	9307      	str	r3, [sp, #28]
 800e0a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0a6:	f104 021a 	add.w	r2, r4, #26
 800e0aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e0ac:	9907      	ldr	r1, [sp, #28]
 800e0ae:	9306      	str	r3, [sp, #24]
 800e0b0:	eba3 0309 	sub.w	r3, r3, r9
 800e0b4:	428b      	cmp	r3, r1
 800e0b6:	dc31      	bgt.n	800e11c <_printf_float+0x34c>
 800e0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ba:	459a      	cmp	sl, r3
 800e0bc:	dc3b      	bgt.n	800e136 <_printf_float+0x366>
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	07da      	lsls	r2, r3, #31
 800e0c2:	d438      	bmi.n	800e136 <_printf_float+0x366>
 800e0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0c6:	ebaa 0903 	sub.w	r9, sl, r3
 800e0ca:	9b06      	ldr	r3, [sp, #24]
 800e0cc:	ebaa 0303 	sub.w	r3, sl, r3
 800e0d0:	4599      	cmp	r9, r3
 800e0d2:	bfa8      	it	ge
 800e0d4:	4699      	movge	r9, r3
 800e0d6:	f1b9 0f00 	cmp.w	r9, #0
 800e0da:	dc34      	bgt.n	800e146 <_printf_float+0x376>
 800e0dc:	f04f 0800 	mov.w	r8, #0
 800e0e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0e4:	f104 0b1a 	add.w	fp, r4, #26
 800e0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ea:	ebaa 0303 	sub.w	r3, sl, r3
 800e0ee:	eba3 0309 	sub.w	r3, r3, r9
 800e0f2:	4543      	cmp	r3, r8
 800e0f4:	f77f af76 	ble.w	800dfe4 <_printf_float+0x214>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	465a      	mov	r2, fp
 800e0fc:	4631      	mov	r1, r6
 800e0fe:	4628      	mov	r0, r5
 800e100:	47b8      	blx	r7
 800e102:	3001      	adds	r0, #1
 800e104:	f43f aeb0 	beq.w	800de68 <_printf_float+0x98>
 800e108:	f108 0801 	add.w	r8, r8, #1
 800e10c:	e7ec      	b.n	800e0e8 <_printf_float+0x318>
 800e10e:	4642      	mov	r2, r8
 800e110:	4631      	mov	r1, r6
 800e112:	4628      	mov	r0, r5
 800e114:	47b8      	blx	r7
 800e116:	3001      	adds	r0, #1
 800e118:	d1c1      	bne.n	800e09e <_printf_float+0x2ce>
 800e11a:	e6a5      	b.n	800de68 <_printf_float+0x98>
 800e11c:	2301      	movs	r3, #1
 800e11e:	4631      	mov	r1, r6
 800e120:	4628      	mov	r0, r5
 800e122:	9206      	str	r2, [sp, #24]
 800e124:	47b8      	blx	r7
 800e126:	3001      	adds	r0, #1
 800e128:	f43f ae9e 	beq.w	800de68 <_printf_float+0x98>
 800e12c:	9b07      	ldr	r3, [sp, #28]
 800e12e:	9a06      	ldr	r2, [sp, #24]
 800e130:	3301      	adds	r3, #1
 800e132:	9307      	str	r3, [sp, #28]
 800e134:	e7b9      	b.n	800e0aa <_printf_float+0x2da>
 800e136:	9b05      	ldr	r3, [sp, #20]
 800e138:	465a      	mov	r2, fp
 800e13a:	4631      	mov	r1, r6
 800e13c:	4628      	mov	r0, r5
 800e13e:	47b8      	blx	r7
 800e140:	3001      	adds	r0, #1
 800e142:	d1bf      	bne.n	800e0c4 <_printf_float+0x2f4>
 800e144:	e690      	b.n	800de68 <_printf_float+0x98>
 800e146:	9a06      	ldr	r2, [sp, #24]
 800e148:	464b      	mov	r3, r9
 800e14a:	4442      	add	r2, r8
 800e14c:	4631      	mov	r1, r6
 800e14e:	4628      	mov	r0, r5
 800e150:	47b8      	blx	r7
 800e152:	3001      	adds	r0, #1
 800e154:	d1c2      	bne.n	800e0dc <_printf_float+0x30c>
 800e156:	e687      	b.n	800de68 <_printf_float+0x98>
 800e158:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e15c:	f1b9 0f01 	cmp.w	r9, #1
 800e160:	dc01      	bgt.n	800e166 <_printf_float+0x396>
 800e162:	07db      	lsls	r3, r3, #31
 800e164:	d536      	bpl.n	800e1d4 <_printf_float+0x404>
 800e166:	2301      	movs	r3, #1
 800e168:	4642      	mov	r2, r8
 800e16a:	4631      	mov	r1, r6
 800e16c:	4628      	mov	r0, r5
 800e16e:	47b8      	blx	r7
 800e170:	3001      	adds	r0, #1
 800e172:	f43f ae79 	beq.w	800de68 <_printf_float+0x98>
 800e176:	9b05      	ldr	r3, [sp, #20]
 800e178:	465a      	mov	r2, fp
 800e17a:	4631      	mov	r1, r6
 800e17c:	4628      	mov	r0, r5
 800e17e:	47b8      	blx	r7
 800e180:	3001      	adds	r0, #1
 800e182:	f43f ae71 	beq.w	800de68 <_printf_float+0x98>
 800e186:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e18a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e192:	f109 39ff 	add.w	r9, r9, #4294967295
 800e196:	d018      	beq.n	800e1ca <_printf_float+0x3fa>
 800e198:	464b      	mov	r3, r9
 800e19a:	f108 0201 	add.w	r2, r8, #1
 800e19e:	4631      	mov	r1, r6
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	47b8      	blx	r7
 800e1a4:	3001      	adds	r0, #1
 800e1a6:	d10c      	bne.n	800e1c2 <_printf_float+0x3f2>
 800e1a8:	e65e      	b.n	800de68 <_printf_float+0x98>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	465a      	mov	r2, fp
 800e1ae:	4631      	mov	r1, r6
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	47b8      	blx	r7
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	f43f ae57 	beq.w	800de68 <_printf_float+0x98>
 800e1ba:	f108 0801 	add.w	r8, r8, #1
 800e1be:	45c8      	cmp	r8, r9
 800e1c0:	dbf3      	blt.n	800e1aa <_printf_float+0x3da>
 800e1c2:	4653      	mov	r3, sl
 800e1c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e1c8:	e6dc      	b.n	800df84 <_printf_float+0x1b4>
 800e1ca:	f04f 0800 	mov.w	r8, #0
 800e1ce:	f104 0b1a 	add.w	fp, r4, #26
 800e1d2:	e7f4      	b.n	800e1be <_printf_float+0x3ee>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	4642      	mov	r2, r8
 800e1d8:	e7e1      	b.n	800e19e <_printf_float+0x3ce>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	464a      	mov	r2, r9
 800e1de:	4631      	mov	r1, r6
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	47b8      	blx	r7
 800e1e4:	3001      	adds	r0, #1
 800e1e6:	f43f ae3f 	beq.w	800de68 <_printf_float+0x98>
 800e1ea:	f108 0801 	add.w	r8, r8, #1
 800e1ee:	68e3      	ldr	r3, [r4, #12]
 800e1f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1f2:	1a5b      	subs	r3, r3, r1
 800e1f4:	4543      	cmp	r3, r8
 800e1f6:	dcf0      	bgt.n	800e1da <_printf_float+0x40a>
 800e1f8:	e6f8      	b.n	800dfec <_printf_float+0x21c>
 800e1fa:	f04f 0800 	mov.w	r8, #0
 800e1fe:	f104 0919 	add.w	r9, r4, #25
 800e202:	e7f4      	b.n	800e1ee <_printf_float+0x41e>

0800e204 <_printf_common>:
 800e204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e208:	4616      	mov	r6, r2
 800e20a:	4698      	mov	r8, r3
 800e20c:	688a      	ldr	r2, [r1, #8]
 800e20e:	690b      	ldr	r3, [r1, #16]
 800e210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e214:	4293      	cmp	r3, r2
 800e216:	bfb8      	it	lt
 800e218:	4613      	movlt	r3, r2
 800e21a:	6033      	str	r3, [r6, #0]
 800e21c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e220:	4607      	mov	r7, r0
 800e222:	460c      	mov	r4, r1
 800e224:	b10a      	cbz	r2, 800e22a <_printf_common+0x26>
 800e226:	3301      	adds	r3, #1
 800e228:	6033      	str	r3, [r6, #0]
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	0699      	lsls	r1, r3, #26
 800e22e:	bf42      	ittt	mi
 800e230:	6833      	ldrmi	r3, [r6, #0]
 800e232:	3302      	addmi	r3, #2
 800e234:	6033      	strmi	r3, [r6, #0]
 800e236:	6825      	ldr	r5, [r4, #0]
 800e238:	f015 0506 	ands.w	r5, r5, #6
 800e23c:	d106      	bne.n	800e24c <_printf_common+0x48>
 800e23e:	f104 0a19 	add.w	sl, r4, #25
 800e242:	68e3      	ldr	r3, [r4, #12]
 800e244:	6832      	ldr	r2, [r6, #0]
 800e246:	1a9b      	subs	r3, r3, r2
 800e248:	42ab      	cmp	r3, r5
 800e24a:	dc26      	bgt.n	800e29a <_printf_common+0x96>
 800e24c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e250:	6822      	ldr	r2, [r4, #0]
 800e252:	3b00      	subs	r3, #0
 800e254:	bf18      	it	ne
 800e256:	2301      	movne	r3, #1
 800e258:	0692      	lsls	r2, r2, #26
 800e25a:	d42b      	bmi.n	800e2b4 <_printf_common+0xb0>
 800e25c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e260:	4641      	mov	r1, r8
 800e262:	4638      	mov	r0, r7
 800e264:	47c8      	blx	r9
 800e266:	3001      	adds	r0, #1
 800e268:	d01e      	beq.n	800e2a8 <_printf_common+0xa4>
 800e26a:	6823      	ldr	r3, [r4, #0]
 800e26c:	6922      	ldr	r2, [r4, #16]
 800e26e:	f003 0306 	and.w	r3, r3, #6
 800e272:	2b04      	cmp	r3, #4
 800e274:	bf02      	ittt	eq
 800e276:	68e5      	ldreq	r5, [r4, #12]
 800e278:	6833      	ldreq	r3, [r6, #0]
 800e27a:	1aed      	subeq	r5, r5, r3
 800e27c:	68a3      	ldr	r3, [r4, #8]
 800e27e:	bf0c      	ite	eq
 800e280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e284:	2500      	movne	r5, #0
 800e286:	4293      	cmp	r3, r2
 800e288:	bfc4      	itt	gt
 800e28a:	1a9b      	subgt	r3, r3, r2
 800e28c:	18ed      	addgt	r5, r5, r3
 800e28e:	2600      	movs	r6, #0
 800e290:	341a      	adds	r4, #26
 800e292:	42b5      	cmp	r5, r6
 800e294:	d11a      	bne.n	800e2cc <_printf_common+0xc8>
 800e296:	2000      	movs	r0, #0
 800e298:	e008      	b.n	800e2ac <_printf_common+0xa8>
 800e29a:	2301      	movs	r3, #1
 800e29c:	4652      	mov	r2, sl
 800e29e:	4641      	mov	r1, r8
 800e2a0:	4638      	mov	r0, r7
 800e2a2:	47c8      	blx	r9
 800e2a4:	3001      	adds	r0, #1
 800e2a6:	d103      	bne.n	800e2b0 <_printf_common+0xac>
 800e2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2b0:	3501      	adds	r5, #1
 800e2b2:	e7c6      	b.n	800e242 <_printf_common+0x3e>
 800e2b4:	18e1      	adds	r1, r4, r3
 800e2b6:	1c5a      	adds	r2, r3, #1
 800e2b8:	2030      	movs	r0, #48	@ 0x30
 800e2ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e2be:	4422      	add	r2, r4
 800e2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e2c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e2c8:	3302      	adds	r3, #2
 800e2ca:	e7c7      	b.n	800e25c <_printf_common+0x58>
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	4622      	mov	r2, r4
 800e2d0:	4641      	mov	r1, r8
 800e2d2:	4638      	mov	r0, r7
 800e2d4:	47c8      	blx	r9
 800e2d6:	3001      	adds	r0, #1
 800e2d8:	d0e6      	beq.n	800e2a8 <_printf_common+0xa4>
 800e2da:	3601      	adds	r6, #1
 800e2dc:	e7d9      	b.n	800e292 <_printf_common+0x8e>
	...

0800e2e0 <_printf_i>:
 800e2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e4:	7e0f      	ldrb	r7, [r1, #24]
 800e2e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e2e8:	2f78      	cmp	r7, #120	@ 0x78
 800e2ea:	4691      	mov	r9, r2
 800e2ec:	4680      	mov	r8, r0
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	469a      	mov	sl, r3
 800e2f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e2f6:	d807      	bhi.n	800e308 <_printf_i+0x28>
 800e2f8:	2f62      	cmp	r7, #98	@ 0x62
 800e2fa:	d80a      	bhi.n	800e312 <_printf_i+0x32>
 800e2fc:	2f00      	cmp	r7, #0
 800e2fe:	f000 80d1 	beq.w	800e4a4 <_printf_i+0x1c4>
 800e302:	2f58      	cmp	r7, #88	@ 0x58
 800e304:	f000 80b8 	beq.w	800e478 <_printf_i+0x198>
 800e308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e30c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e310:	e03a      	b.n	800e388 <_printf_i+0xa8>
 800e312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e316:	2b15      	cmp	r3, #21
 800e318:	d8f6      	bhi.n	800e308 <_printf_i+0x28>
 800e31a:	a101      	add	r1, pc, #4	@ (adr r1, 800e320 <_printf_i+0x40>)
 800e31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e320:	0800e379 	.word	0x0800e379
 800e324:	0800e38d 	.word	0x0800e38d
 800e328:	0800e309 	.word	0x0800e309
 800e32c:	0800e309 	.word	0x0800e309
 800e330:	0800e309 	.word	0x0800e309
 800e334:	0800e309 	.word	0x0800e309
 800e338:	0800e38d 	.word	0x0800e38d
 800e33c:	0800e309 	.word	0x0800e309
 800e340:	0800e309 	.word	0x0800e309
 800e344:	0800e309 	.word	0x0800e309
 800e348:	0800e309 	.word	0x0800e309
 800e34c:	0800e48b 	.word	0x0800e48b
 800e350:	0800e3b7 	.word	0x0800e3b7
 800e354:	0800e445 	.word	0x0800e445
 800e358:	0800e309 	.word	0x0800e309
 800e35c:	0800e309 	.word	0x0800e309
 800e360:	0800e4ad 	.word	0x0800e4ad
 800e364:	0800e309 	.word	0x0800e309
 800e368:	0800e3b7 	.word	0x0800e3b7
 800e36c:	0800e309 	.word	0x0800e309
 800e370:	0800e309 	.word	0x0800e309
 800e374:	0800e44d 	.word	0x0800e44d
 800e378:	6833      	ldr	r3, [r6, #0]
 800e37a:	1d1a      	adds	r2, r3, #4
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	6032      	str	r2, [r6, #0]
 800e380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e388:	2301      	movs	r3, #1
 800e38a:	e09c      	b.n	800e4c6 <_printf_i+0x1e6>
 800e38c:	6833      	ldr	r3, [r6, #0]
 800e38e:	6820      	ldr	r0, [r4, #0]
 800e390:	1d19      	adds	r1, r3, #4
 800e392:	6031      	str	r1, [r6, #0]
 800e394:	0606      	lsls	r6, r0, #24
 800e396:	d501      	bpl.n	800e39c <_printf_i+0xbc>
 800e398:	681d      	ldr	r5, [r3, #0]
 800e39a:	e003      	b.n	800e3a4 <_printf_i+0xc4>
 800e39c:	0645      	lsls	r5, r0, #25
 800e39e:	d5fb      	bpl.n	800e398 <_printf_i+0xb8>
 800e3a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e3a4:	2d00      	cmp	r5, #0
 800e3a6:	da03      	bge.n	800e3b0 <_printf_i+0xd0>
 800e3a8:	232d      	movs	r3, #45	@ 0x2d
 800e3aa:	426d      	negs	r5, r5
 800e3ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3b0:	4858      	ldr	r0, [pc, #352]	@ (800e514 <_printf_i+0x234>)
 800e3b2:	230a      	movs	r3, #10
 800e3b4:	e011      	b.n	800e3da <_printf_i+0xfa>
 800e3b6:	6821      	ldr	r1, [r4, #0]
 800e3b8:	6833      	ldr	r3, [r6, #0]
 800e3ba:	0608      	lsls	r0, r1, #24
 800e3bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800e3c0:	d402      	bmi.n	800e3c8 <_printf_i+0xe8>
 800e3c2:	0649      	lsls	r1, r1, #25
 800e3c4:	bf48      	it	mi
 800e3c6:	b2ad      	uxthmi	r5, r5
 800e3c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e3ca:	4852      	ldr	r0, [pc, #328]	@ (800e514 <_printf_i+0x234>)
 800e3cc:	6033      	str	r3, [r6, #0]
 800e3ce:	bf14      	ite	ne
 800e3d0:	230a      	movne	r3, #10
 800e3d2:	2308      	moveq	r3, #8
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e3da:	6866      	ldr	r6, [r4, #4]
 800e3dc:	60a6      	str	r6, [r4, #8]
 800e3de:	2e00      	cmp	r6, #0
 800e3e0:	db05      	blt.n	800e3ee <_printf_i+0x10e>
 800e3e2:	6821      	ldr	r1, [r4, #0]
 800e3e4:	432e      	orrs	r6, r5
 800e3e6:	f021 0104 	bic.w	r1, r1, #4
 800e3ea:	6021      	str	r1, [r4, #0]
 800e3ec:	d04b      	beq.n	800e486 <_printf_i+0x1a6>
 800e3ee:	4616      	mov	r6, r2
 800e3f0:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3f4:	fb03 5711 	mls	r7, r3, r1, r5
 800e3f8:	5dc7      	ldrb	r7, [r0, r7]
 800e3fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3fe:	462f      	mov	r7, r5
 800e400:	42bb      	cmp	r3, r7
 800e402:	460d      	mov	r5, r1
 800e404:	d9f4      	bls.n	800e3f0 <_printf_i+0x110>
 800e406:	2b08      	cmp	r3, #8
 800e408:	d10b      	bne.n	800e422 <_printf_i+0x142>
 800e40a:	6823      	ldr	r3, [r4, #0]
 800e40c:	07df      	lsls	r7, r3, #31
 800e40e:	d508      	bpl.n	800e422 <_printf_i+0x142>
 800e410:	6923      	ldr	r3, [r4, #16]
 800e412:	6861      	ldr	r1, [r4, #4]
 800e414:	4299      	cmp	r1, r3
 800e416:	bfde      	ittt	le
 800e418:	2330      	movle	r3, #48	@ 0x30
 800e41a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e41e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e422:	1b92      	subs	r2, r2, r6
 800e424:	6122      	str	r2, [r4, #16]
 800e426:	f8cd a000 	str.w	sl, [sp]
 800e42a:	464b      	mov	r3, r9
 800e42c:	aa03      	add	r2, sp, #12
 800e42e:	4621      	mov	r1, r4
 800e430:	4640      	mov	r0, r8
 800e432:	f7ff fee7 	bl	800e204 <_printf_common>
 800e436:	3001      	adds	r0, #1
 800e438:	d14a      	bne.n	800e4d0 <_printf_i+0x1f0>
 800e43a:	f04f 30ff 	mov.w	r0, #4294967295
 800e43e:	b004      	add	sp, #16
 800e440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	f043 0320 	orr.w	r3, r3, #32
 800e44a:	6023      	str	r3, [r4, #0]
 800e44c:	4832      	ldr	r0, [pc, #200]	@ (800e518 <_printf_i+0x238>)
 800e44e:	2778      	movs	r7, #120	@ 0x78
 800e450:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e454:	6823      	ldr	r3, [r4, #0]
 800e456:	6831      	ldr	r1, [r6, #0]
 800e458:	061f      	lsls	r7, r3, #24
 800e45a:	f851 5b04 	ldr.w	r5, [r1], #4
 800e45e:	d402      	bmi.n	800e466 <_printf_i+0x186>
 800e460:	065f      	lsls	r7, r3, #25
 800e462:	bf48      	it	mi
 800e464:	b2ad      	uxthmi	r5, r5
 800e466:	6031      	str	r1, [r6, #0]
 800e468:	07d9      	lsls	r1, r3, #31
 800e46a:	bf44      	itt	mi
 800e46c:	f043 0320 	orrmi.w	r3, r3, #32
 800e470:	6023      	strmi	r3, [r4, #0]
 800e472:	b11d      	cbz	r5, 800e47c <_printf_i+0x19c>
 800e474:	2310      	movs	r3, #16
 800e476:	e7ad      	b.n	800e3d4 <_printf_i+0xf4>
 800e478:	4826      	ldr	r0, [pc, #152]	@ (800e514 <_printf_i+0x234>)
 800e47a:	e7e9      	b.n	800e450 <_printf_i+0x170>
 800e47c:	6823      	ldr	r3, [r4, #0]
 800e47e:	f023 0320 	bic.w	r3, r3, #32
 800e482:	6023      	str	r3, [r4, #0]
 800e484:	e7f6      	b.n	800e474 <_printf_i+0x194>
 800e486:	4616      	mov	r6, r2
 800e488:	e7bd      	b.n	800e406 <_printf_i+0x126>
 800e48a:	6833      	ldr	r3, [r6, #0]
 800e48c:	6825      	ldr	r5, [r4, #0]
 800e48e:	6961      	ldr	r1, [r4, #20]
 800e490:	1d18      	adds	r0, r3, #4
 800e492:	6030      	str	r0, [r6, #0]
 800e494:	062e      	lsls	r6, r5, #24
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	d501      	bpl.n	800e49e <_printf_i+0x1be>
 800e49a:	6019      	str	r1, [r3, #0]
 800e49c:	e002      	b.n	800e4a4 <_printf_i+0x1c4>
 800e49e:	0668      	lsls	r0, r5, #25
 800e4a0:	d5fb      	bpl.n	800e49a <_printf_i+0x1ba>
 800e4a2:	8019      	strh	r1, [r3, #0]
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	6123      	str	r3, [r4, #16]
 800e4a8:	4616      	mov	r6, r2
 800e4aa:	e7bc      	b.n	800e426 <_printf_i+0x146>
 800e4ac:	6833      	ldr	r3, [r6, #0]
 800e4ae:	1d1a      	adds	r2, r3, #4
 800e4b0:	6032      	str	r2, [r6, #0]
 800e4b2:	681e      	ldr	r6, [r3, #0]
 800e4b4:	6862      	ldr	r2, [r4, #4]
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f7f1 ff11 	bl	80002e0 <memchr>
 800e4be:	b108      	cbz	r0, 800e4c4 <_printf_i+0x1e4>
 800e4c0:	1b80      	subs	r0, r0, r6
 800e4c2:	6060      	str	r0, [r4, #4]
 800e4c4:	6863      	ldr	r3, [r4, #4]
 800e4c6:	6123      	str	r3, [r4, #16]
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4ce:	e7aa      	b.n	800e426 <_printf_i+0x146>
 800e4d0:	6923      	ldr	r3, [r4, #16]
 800e4d2:	4632      	mov	r2, r6
 800e4d4:	4649      	mov	r1, r9
 800e4d6:	4640      	mov	r0, r8
 800e4d8:	47d0      	blx	sl
 800e4da:	3001      	adds	r0, #1
 800e4dc:	d0ad      	beq.n	800e43a <_printf_i+0x15a>
 800e4de:	6823      	ldr	r3, [r4, #0]
 800e4e0:	079b      	lsls	r3, r3, #30
 800e4e2:	d413      	bmi.n	800e50c <_printf_i+0x22c>
 800e4e4:	68e0      	ldr	r0, [r4, #12]
 800e4e6:	9b03      	ldr	r3, [sp, #12]
 800e4e8:	4298      	cmp	r0, r3
 800e4ea:	bfb8      	it	lt
 800e4ec:	4618      	movlt	r0, r3
 800e4ee:	e7a6      	b.n	800e43e <_printf_i+0x15e>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	4632      	mov	r2, r6
 800e4f4:	4649      	mov	r1, r9
 800e4f6:	4640      	mov	r0, r8
 800e4f8:	47d0      	blx	sl
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	d09d      	beq.n	800e43a <_printf_i+0x15a>
 800e4fe:	3501      	adds	r5, #1
 800e500:	68e3      	ldr	r3, [r4, #12]
 800e502:	9903      	ldr	r1, [sp, #12]
 800e504:	1a5b      	subs	r3, r3, r1
 800e506:	42ab      	cmp	r3, r5
 800e508:	dcf2      	bgt.n	800e4f0 <_printf_i+0x210>
 800e50a:	e7eb      	b.n	800e4e4 <_printf_i+0x204>
 800e50c:	2500      	movs	r5, #0
 800e50e:	f104 0619 	add.w	r6, r4, #25
 800e512:	e7f5      	b.n	800e500 <_printf_i+0x220>
 800e514:	08012ad4 	.word	0x08012ad4
 800e518:	08012ae5 	.word	0x08012ae5

0800e51c <_scanf_float>:
 800e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e520:	b087      	sub	sp, #28
 800e522:	4691      	mov	r9, r2
 800e524:	9303      	str	r3, [sp, #12]
 800e526:	688b      	ldr	r3, [r1, #8]
 800e528:	1e5a      	subs	r2, r3, #1
 800e52a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e52e:	bf81      	itttt	hi
 800e530:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e534:	eb03 0b05 	addhi.w	fp, r3, r5
 800e538:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e53c:	608b      	strhi	r3, [r1, #8]
 800e53e:	680b      	ldr	r3, [r1, #0]
 800e540:	460a      	mov	r2, r1
 800e542:	f04f 0500 	mov.w	r5, #0
 800e546:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e54a:	f842 3b1c 	str.w	r3, [r2], #28
 800e54e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e552:	4680      	mov	r8, r0
 800e554:	460c      	mov	r4, r1
 800e556:	bf98      	it	ls
 800e558:	f04f 0b00 	movls.w	fp, #0
 800e55c:	9201      	str	r2, [sp, #4]
 800e55e:	4616      	mov	r6, r2
 800e560:	46aa      	mov	sl, r5
 800e562:	462f      	mov	r7, r5
 800e564:	9502      	str	r5, [sp, #8]
 800e566:	68a2      	ldr	r2, [r4, #8]
 800e568:	b15a      	cbz	r2, 800e582 <_scanf_float+0x66>
 800e56a:	f8d9 3000 	ldr.w	r3, [r9]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	2b4e      	cmp	r3, #78	@ 0x4e
 800e572:	d863      	bhi.n	800e63c <_scanf_float+0x120>
 800e574:	2b40      	cmp	r3, #64	@ 0x40
 800e576:	d83b      	bhi.n	800e5f0 <_scanf_float+0xd4>
 800e578:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e57c:	b2c8      	uxtb	r0, r1
 800e57e:	280e      	cmp	r0, #14
 800e580:	d939      	bls.n	800e5f6 <_scanf_float+0xda>
 800e582:	b11f      	cbz	r7, 800e58c <_scanf_float+0x70>
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e58a:	6023      	str	r3, [r4, #0]
 800e58c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e590:	f1ba 0f01 	cmp.w	sl, #1
 800e594:	f200 8114 	bhi.w	800e7c0 <_scanf_float+0x2a4>
 800e598:	9b01      	ldr	r3, [sp, #4]
 800e59a:	429e      	cmp	r6, r3
 800e59c:	f200 8105 	bhi.w	800e7aa <_scanf_float+0x28e>
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	b007      	add	sp, #28
 800e5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e5ac:	2a0d      	cmp	r2, #13
 800e5ae:	d8e8      	bhi.n	800e582 <_scanf_float+0x66>
 800e5b0:	a101      	add	r1, pc, #4	@ (adr r1, 800e5b8 <_scanf_float+0x9c>)
 800e5b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e5b6:	bf00      	nop
 800e5b8:	0800e701 	.word	0x0800e701
 800e5bc:	0800e583 	.word	0x0800e583
 800e5c0:	0800e583 	.word	0x0800e583
 800e5c4:	0800e583 	.word	0x0800e583
 800e5c8:	0800e75d 	.word	0x0800e75d
 800e5cc:	0800e737 	.word	0x0800e737
 800e5d0:	0800e583 	.word	0x0800e583
 800e5d4:	0800e583 	.word	0x0800e583
 800e5d8:	0800e70f 	.word	0x0800e70f
 800e5dc:	0800e583 	.word	0x0800e583
 800e5e0:	0800e583 	.word	0x0800e583
 800e5e4:	0800e583 	.word	0x0800e583
 800e5e8:	0800e583 	.word	0x0800e583
 800e5ec:	0800e6cb 	.word	0x0800e6cb
 800e5f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e5f4:	e7da      	b.n	800e5ac <_scanf_float+0x90>
 800e5f6:	290e      	cmp	r1, #14
 800e5f8:	d8c3      	bhi.n	800e582 <_scanf_float+0x66>
 800e5fa:	a001      	add	r0, pc, #4	@ (adr r0, 800e600 <_scanf_float+0xe4>)
 800e5fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e600:	0800e6bb 	.word	0x0800e6bb
 800e604:	0800e583 	.word	0x0800e583
 800e608:	0800e6bb 	.word	0x0800e6bb
 800e60c:	0800e74b 	.word	0x0800e74b
 800e610:	0800e583 	.word	0x0800e583
 800e614:	0800e65d 	.word	0x0800e65d
 800e618:	0800e6a1 	.word	0x0800e6a1
 800e61c:	0800e6a1 	.word	0x0800e6a1
 800e620:	0800e6a1 	.word	0x0800e6a1
 800e624:	0800e6a1 	.word	0x0800e6a1
 800e628:	0800e6a1 	.word	0x0800e6a1
 800e62c:	0800e6a1 	.word	0x0800e6a1
 800e630:	0800e6a1 	.word	0x0800e6a1
 800e634:	0800e6a1 	.word	0x0800e6a1
 800e638:	0800e6a1 	.word	0x0800e6a1
 800e63c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e63e:	d809      	bhi.n	800e654 <_scanf_float+0x138>
 800e640:	2b60      	cmp	r3, #96	@ 0x60
 800e642:	d8b1      	bhi.n	800e5a8 <_scanf_float+0x8c>
 800e644:	2b54      	cmp	r3, #84	@ 0x54
 800e646:	d07b      	beq.n	800e740 <_scanf_float+0x224>
 800e648:	2b59      	cmp	r3, #89	@ 0x59
 800e64a:	d19a      	bne.n	800e582 <_scanf_float+0x66>
 800e64c:	2d07      	cmp	r5, #7
 800e64e:	d198      	bne.n	800e582 <_scanf_float+0x66>
 800e650:	2508      	movs	r5, #8
 800e652:	e02f      	b.n	800e6b4 <_scanf_float+0x198>
 800e654:	2b74      	cmp	r3, #116	@ 0x74
 800e656:	d073      	beq.n	800e740 <_scanf_float+0x224>
 800e658:	2b79      	cmp	r3, #121	@ 0x79
 800e65a:	e7f6      	b.n	800e64a <_scanf_float+0x12e>
 800e65c:	6821      	ldr	r1, [r4, #0]
 800e65e:	05c8      	lsls	r0, r1, #23
 800e660:	d51e      	bpl.n	800e6a0 <_scanf_float+0x184>
 800e662:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e666:	6021      	str	r1, [r4, #0]
 800e668:	3701      	adds	r7, #1
 800e66a:	f1bb 0f00 	cmp.w	fp, #0
 800e66e:	d003      	beq.n	800e678 <_scanf_float+0x15c>
 800e670:	3201      	adds	r2, #1
 800e672:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e676:	60a2      	str	r2, [r4, #8]
 800e678:	68a3      	ldr	r3, [r4, #8]
 800e67a:	3b01      	subs	r3, #1
 800e67c:	60a3      	str	r3, [r4, #8]
 800e67e:	6923      	ldr	r3, [r4, #16]
 800e680:	3301      	adds	r3, #1
 800e682:	6123      	str	r3, [r4, #16]
 800e684:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e688:	3b01      	subs	r3, #1
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f8c9 3004 	str.w	r3, [r9, #4]
 800e690:	f340 8082 	ble.w	800e798 <_scanf_float+0x27c>
 800e694:	f8d9 3000 	ldr.w	r3, [r9]
 800e698:	3301      	adds	r3, #1
 800e69a:	f8c9 3000 	str.w	r3, [r9]
 800e69e:	e762      	b.n	800e566 <_scanf_float+0x4a>
 800e6a0:	eb1a 0105 	adds.w	r1, sl, r5
 800e6a4:	f47f af6d 	bne.w	800e582 <_scanf_float+0x66>
 800e6a8:	6822      	ldr	r2, [r4, #0]
 800e6aa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e6ae:	6022      	str	r2, [r4, #0]
 800e6b0:	460d      	mov	r5, r1
 800e6b2:	468a      	mov	sl, r1
 800e6b4:	f806 3b01 	strb.w	r3, [r6], #1
 800e6b8:	e7de      	b.n	800e678 <_scanf_float+0x15c>
 800e6ba:	6822      	ldr	r2, [r4, #0]
 800e6bc:	0610      	lsls	r0, r2, #24
 800e6be:	f57f af60 	bpl.w	800e582 <_scanf_float+0x66>
 800e6c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e6c6:	6022      	str	r2, [r4, #0]
 800e6c8:	e7f4      	b.n	800e6b4 <_scanf_float+0x198>
 800e6ca:	f1ba 0f00 	cmp.w	sl, #0
 800e6ce:	d10c      	bne.n	800e6ea <_scanf_float+0x1ce>
 800e6d0:	b977      	cbnz	r7, 800e6f0 <_scanf_float+0x1d4>
 800e6d2:	6822      	ldr	r2, [r4, #0]
 800e6d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e6d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e6dc:	d108      	bne.n	800e6f0 <_scanf_float+0x1d4>
 800e6de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e6e2:	6022      	str	r2, [r4, #0]
 800e6e4:	f04f 0a01 	mov.w	sl, #1
 800e6e8:	e7e4      	b.n	800e6b4 <_scanf_float+0x198>
 800e6ea:	f1ba 0f02 	cmp.w	sl, #2
 800e6ee:	d050      	beq.n	800e792 <_scanf_float+0x276>
 800e6f0:	2d01      	cmp	r5, #1
 800e6f2:	d002      	beq.n	800e6fa <_scanf_float+0x1de>
 800e6f4:	2d04      	cmp	r5, #4
 800e6f6:	f47f af44 	bne.w	800e582 <_scanf_float+0x66>
 800e6fa:	3501      	adds	r5, #1
 800e6fc:	b2ed      	uxtb	r5, r5
 800e6fe:	e7d9      	b.n	800e6b4 <_scanf_float+0x198>
 800e700:	f1ba 0f01 	cmp.w	sl, #1
 800e704:	f47f af3d 	bne.w	800e582 <_scanf_float+0x66>
 800e708:	f04f 0a02 	mov.w	sl, #2
 800e70c:	e7d2      	b.n	800e6b4 <_scanf_float+0x198>
 800e70e:	b975      	cbnz	r5, 800e72e <_scanf_float+0x212>
 800e710:	2f00      	cmp	r7, #0
 800e712:	f47f af37 	bne.w	800e584 <_scanf_float+0x68>
 800e716:	6822      	ldr	r2, [r4, #0]
 800e718:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e71c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e720:	f040 80fc 	bne.w	800e91c <_scanf_float+0x400>
 800e724:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e728:	6022      	str	r2, [r4, #0]
 800e72a:	2501      	movs	r5, #1
 800e72c:	e7c2      	b.n	800e6b4 <_scanf_float+0x198>
 800e72e:	2d03      	cmp	r5, #3
 800e730:	d0e3      	beq.n	800e6fa <_scanf_float+0x1de>
 800e732:	2d05      	cmp	r5, #5
 800e734:	e7df      	b.n	800e6f6 <_scanf_float+0x1da>
 800e736:	2d02      	cmp	r5, #2
 800e738:	f47f af23 	bne.w	800e582 <_scanf_float+0x66>
 800e73c:	2503      	movs	r5, #3
 800e73e:	e7b9      	b.n	800e6b4 <_scanf_float+0x198>
 800e740:	2d06      	cmp	r5, #6
 800e742:	f47f af1e 	bne.w	800e582 <_scanf_float+0x66>
 800e746:	2507      	movs	r5, #7
 800e748:	e7b4      	b.n	800e6b4 <_scanf_float+0x198>
 800e74a:	6822      	ldr	r2, [r4, #0]
 800e74c:	0591      	lsls	r1, r2, #22
 800e74e:	f57f af18 	bpl.w	800e582 <_scanf_float+0x66>
 800e752:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e756:	6022      	str	r2, [r4, #0]
 800e758:	9702      	str	r7, [sp, #8]
 800e75a:	e7ab      	b.n	800e6b4 <_scanf_float+0x198>
 800e75c:	6822      	ldr	r2, [r4, #0]
 800e75e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e762:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e766:	d005      	beq.n	800e774 <_scanf_float+0x258>
 800e768:	0550      	lsls	r0, r2, #21
 800e76a:	f57f af0a 	bpl.w	800e582 <_scanf_float+0x66>
 800e76e:	2f00      	cmp	r7, #0
 800e770:	f000 80d4 	beq.w	800e91c <_scanf_float+0x400>
 800e774:	0591      	lsls	r1, r2, #22
 800e776:	bf58      	it	pl
 800e778:	9902      	ldrpl	r1, [sp, #8]
 800e77a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e77e:	bf58      	it	pl
 800e780:	1a79      	subpl	r1, r7, r1
 800e782:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e786:	bf58      	it	pl
 800e788:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e78c:	6022      	str	r2, [r4, #0]
 800e78e:	2700      	movs	r7, #0
 800e790:	e790      	b.n	800e6b4 <_scanf_float+0x198>
 800e792:	f04f 0a03 	mov.w	sl, #3
 800e796:	e78d      	b.n	800e6b4 <_scanf_float+0x198>
 800e798:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e79c:	4649      	mov	r1, r9
 800e79e:	4640      	mov	r0, r8
 800e7a0:	4798      	blx	r3
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	f43f aedf 	beq.w	800e566 <_scanf_float+0x4a>
 800e7a8:	e6eb      	b.n	800e582 <_scanf_float+0x66>
 800e7aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e7ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e7b2:	464a      	mov	r2, r9
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	4798      	blx	r3
 800e7b8:	6923      	ldr	r3, [r4, #16]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	6123      	str	r3, [r4, #16]
 800e7be:	e6eb      	b.n	800e598 <_scanf_float+0x7c>
 800e7c0:	1e6b      	subs	r3, r5, #1
 800e7c2:	2b06      	cmp	r3, #6
 800e7c4:	d824      	bhi.n	800e810 <_scanf_float+0x2f4>
 800e7c6:	2d02      	cmp	r5, #2
 800e7c8:	d836      	bhi.n	800e838 <_scanf_float+0x31c>
 800e7ca:	9b01      	ldr	r3, [sp, #4]
 800e7cc:	429e      	cmp	r6, r3
 800e7ce:	f67f aee7 	bls.w	800e5a0 <_scanf_float+0x84>
 800e7d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e7d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e7da:	464a      	mov	r2, r9
 800e7dc:	4640      	mov	r0, r8
 800e7de:	4798      	blx	r3
 800e7e0:	6923      	ldr	r3, [r4, #16]
 800e7e2:	3b01      	subs	r3, #1
 800e7e4:	6123      	str	r3, [r4, #16]
 800e7e6:	e7f0      	b.n	800e7ca <_scanf_float+0x2ae>
 800e7e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e7ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e7f0:	464a      	mov	r2, r9
 800e7f2:	4640      	mov	r0, r8
 800e7f4:	4798      	blx	r3
 800e7f6:	6923      	ldr	r3, [r4, #16]
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	6123      	str	r3, [r4, #16]
 800e7fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e800:	fa5f fa8a 	uxtb.w	sl, sl
 800e804:	f1ba 0f02 	cmp.w	sl, #2
 800e808:	d1ee      	bne.n	800e7e8 <_scanf_float+0x2cc>
 800e80a:	3d03      	subs	r5, #3
 800e80c:	b2ed      	uxtb	r5, r5
 800e80e:	1b76      	subs	r6, r6, r5
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	05da      	lsls	r2, r3, #23
 800e814:	d530      	bpl.n	800e878 <_scanf_float+0x35c>
 800e816:	055b      	lsls	r3, r3, #21
 800e818:	d511      	bpl.n	800e83e <_scanf_float+0x322>
 800e81a:	9b01      	ldr	r3, [sp, #4]
 800e81c:	429e      	cmp	r6, r3
 800e81e:	f67f aebf 	bls.w	800e5a0 <_scanf_float+0x84>
 800e822:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e826:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e82a:	464a      	mov	r2, r9
 800e82c:	4640      	mov	r0, r8
 800e82e:	4798      	blx	r3
 800e830:	6923      	ldr	r3, [r4, #16]
 800e832:	3b01      	subs	r3, #1
 800e834:	6123      	str	r3, [r4, #16]
 800e836:	e7f0      	b.n	800e81a <_scanf_float+0x2fe>
 800e838:	46aa      	mov	sl, r5
 800e83a:	46b3      	mov	fp, r6
 800e83c:	e7de      	b.n	800e7fc <_scanf_float+0x2e0>
 800e83e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e842:	6923      	ldr	r3, [r4, #16]
 800e844:	2965      	cmp	r1, #101	@ 0x65
 800e846:	f103 33ff 	add.w	r3, r3, #4294967295
 800e84a:	f106 35ff 	add.w	r5, r6, #4294967295
 800e84e:	6123      	str	r3, [r4, #16]
 800e850:	d00c      	beq.n	800e86c <_scanf_float+0x350>
 800e852:	2945      	cmp	r1, #69	@ 0x45
 800e854:	d00a      	beq.n	800e86c <_scanf_float+0x350>
 800e856:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e85a:	464a      	mov	r2, r9
 800e85c:	4640      	mov	r0, r8
 800e85e:	4798      	blx	r3
 800e860:	6923      	ldr	r3, [r4, #16]
 800e862:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e866:	3b01      	subs	r3, #1
 800e868:	1eb5      	subs	r5, r6, #2
 800e86a:	6123      	str	r3, [r4, #16]
 800e86c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e870:	464a      	mov	r2, r9
 800e872:	4640      	mov	r0, r8
 800e874:	4798      	blx	r3
 800e876:	462e      	mov	r6, r5
 800e878:	6822      	ldr	r2, [r4, #0]
 800e87a:	f012 0210 	ands.w	r2, r2, #16
 800e87e:	d001      	beq.n	800e884 <_scanf_float+0x368>
 800e880:	2000      	movs	r0, #0
 800e882:	e68e      	b.n	800e5a2 <_scanf_float+0x86>
 800e884:	7032      	strb	r2, [r6, #0]
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e88c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e890:	d123      	bne.n	800e8da <_scanf_float+0x3be>
 800e892:	9b02      	ldr	r3, [sp, #8]
 800e894:	429f      	cmp	r7, r3
 800e896:	d00a      	beq.n	800e8ae <_scanf_float+0x392>
 800e898:	1bda      	subs	r2, r3, r7
 800e89a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e89e:	429e      	cmp	r6, r3
 800e8a0:	bf28      	it	cs
 800e8a2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e8a6:	491e      	ldr	r1, [pc, #120]	@ (800e920 <_scanf_float+0x404>)
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f000 f8ff 	bl	800eaac <siprintf>
 800e8ae:	9901      	ldr	r1, [sp, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	4640      	mov	r0, r8
 800e8b4:	f002 fb6a 	bl	8010f8c <_strtod_r>
 800e8b8:	9b03      	ldr	r3, [sp, #12]
 800e8ba:	6821      	ldr	r1, [r4, #0]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f011 0f02 	tst.w	r1, #2
 800e8c2:	f103 0204 	add.w	r2, r3, #4
 800e8c6:	d015      	beq.n	800e8f4 <_scanf_float+0x3d8>
 800e8c8:	9903      	ldr	r1, [sp, #12]
 800e8ca:	600a      	str	r2, [r1, #0]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	ed83 0b00 	vstr	d0, [r3]
 800e8d2:	68e3      	ldr	r3, [r4, #12]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	60e3      	str	r3, [r4, #12]
 800e8d8:	e7d2      	b.n	800e880 <_scanf_float+0x364>
 800e8da:	9b04      	ldr	r3, [sp, #16]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d0e6      	beq.n	800e8ae <_scanf_float+0x392>
 800e8e0:	9905      	ldr	r1, [sp, #20]
 800e8e2:	230a      	movs	r3, #10
 800e8e4:	3101      	adds	r1, #1
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	f002 fbd0 	bl	801108c <_strtol_r>
 800e8ec:	9b04      	ldr	r3, [sp, #16]
 800e8ee:	9e05      	ldr	r6, [sp, #20]
 800e8f0:	1ac2      	subs	r2, r0, r3
 800e8f2:	e7d2      	b.n	800e89a <_scanf_float+0x37e>
 800e8f4:	f011 0f04 	tst.w	r1, #4
 800e8f8:	9903      	ldr	r1, [sp, #12]
 800e8fa:	600a      	str	r2, [r1, #0]
 800e8fc:	d1e6      	bne.n	800e8cc <_scanf_float+0x3b0>
 800e8fe:	eeb4 0b40 	vcmp.f64	d0, d0
 800e902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e906:	681d      	ldr	r5, [r3, #0]
 800e908:	d705      	bvc.n	800e916 <_scanf_float+0x3fa>
 800e90a:	4806      	ldr	r0, [pc, #24]	@ (800e924 <_scanf_float+0x408>)
 800e90c:	f000 f9f4 	bl	800ecf8 <nanf>
 800e910:	ed85 0a00 	vstr	s0, [r5]
 800e914:	e7dd      	b.n	800e8d2 <_scanf_float+0x3b6>
 800e916:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e91a:	e7f9      	b.n	800e910 <_scanf_float+0x3f4>
 800e91c:	2700      	movs	r7, #0
 800e91e:	e635      	b.n	800e58c <_scanf_float+0x70>
 800e920:	08012af6 	.word	0x08012af6
 800e924:	08012c52 	.word	0x08012c52

0800e928 <std>:
 800e928:	2300      	movs	r3, #0
 800e92a:	b510      	push	{r4, lr}
 800e92c:	4604      	mov	r4, r0
 800e92e:	e9c0 3300 	strd	r3, r3, [r0]
 800e932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e936:	6083      	str	r3, [r0, #8]
 800e938:	8181      	strh	r1, [r0, #12]
 800e93a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e93c:	81c2      	strh	r2, [r0, #14]
 800e93e:	6183      	str	r3, [r0, #24]
 800e940:	4619      	mov	r1, r3
 800e942:	2208      	movs	r2, #8
 800e944:	305c      	adds	r0, #92	@ 0x5c
 800e946:	f000 f944 	bl	800ebd2 <memset>
 800e94a:	4b0d      	ldr	r3, [pc, #52]	@ (800e980 <std+0x58>)
 800e94c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e94e:	4b0d      	ldr	r3, [pc, #52]	@ (800e984 <std+0x5c>)
 800e950:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e952:	4b0d      	ldr	r3, [pc, #52]	@ (800e988 <std+0x60>)
 800e954:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e956:	4b0d      	ldr	r3, [pc, #52]	@ (800e98c <std+0x64>)
 800e958:	6323      	str	r3, [r4, #48]	@ 0x30
 800e95a:	4b0d      	ldr	r3, [pc, #52]	@ (800e990 <std+0x68>)
 800e95c:	6224      	str	r4, [r4, #32]
 800e95e:	429c      	cmp	r4, r3
 800e960:	d006      	beq.n	800e970 <std+0x48>
 800e962:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e966:	4294      	cmp	r4, r2
 800e968:	d002      	beq.n	800e970 <std+0x48>
 800e96a:	33d0      	adds	r3, #208	@ 0xd0
 800e96c:	429c      	cmp	r4, r3
 800e96e:	d105      	bne.n	800e97c <std+0x54>
 800e970:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e978:	f000 b9ba 	b.w	800ecf0 <__retarget_lock_init_recursive>
 800e97c:	bd10      	pop	{r4, pc}
 800e97e:	bf00      	nop
 800e980:	0800eb49 	.word	0x0800eb49
 800e984:	0800eb6f 	.word	0x0800eb6f
 800e988:	0800eba7 	.word	0x0800eba7
 800e98c:	0800ebcb 	.word	0x0800ebcb
 800e990:	24000920 	.word	0x24000920

0800e994 <stdio_exit_handler>:
 800e994:	4a02      	ldr	r2, [pc, #8]	@ (800e9a0 <stdio_exit_handler+0xc>)
 800e996:	4903      	ldr	r1, [pc, #12]	@ (800e9a4 <stdio_exit_handler+0x10>)
 800e998:	4803      	ldr	r0, [pc, #12]	@ (800e9a8 <stdio_exit_handler+0x14>)
 800e99a:	f000 b869 	b.w	800ea70 <_fwalk_sglue>
 800e99e:	bf00      	nop
 800e9a0:	24000024 	.word	0x24000024
 800e9a4:	08011a85 	.word	0x08011a85
 800e9a8:	24000034 	.word	0x24000034

0800e9ac <cleanup_stdio>:
 800e9ac:	6841      	ldr	r1, [r0, #4]
 800e9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800e9e0 <cleanup_stdio+0x34>)
 800e9b0:	4299      	cmp	r1, r3
 800e9b2:	b510      	push	{r4, lr}
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	d001      	beq.n	800e9bc <cleanup_stdio+0x10>
 800e9b8:	f003 f864 	bl	8011a84 <_fflush_r>
 800e9bc:	68a1      	ldr	r1, [r4, #8]
 800e9be:	4b09      	ldr	r3, [pc, #36]	@ (800e9e4 <cleanup_stdio+0x38>)
 800e9c0:	4299      	cmp	r1, r3
 800e9c2:	d002      	beq.n	800e9ca <cleanup_stdio+0x1e>
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	f003 f85d 	bl	8011a84 <_fflush_r>
 800e9ca:	68e1      	ldr	r1, [r4, #12]
 800e9cc:	4b06      	ldr	r3, [pc, #24]	@ (800e9e8 <cleanup_stdio+0x3c>)
 800e9ce:	4299      	cmp	r1, r3
 800e9d0:	d004      	beq.n	800e9dc <cleanup_stdio+0x30>
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d8:	f003 b854 	b.w	8011a84 <_fflush_r>
 800e9dc:	bd10      	pop	{r4, pc}
 800e9de:	bf00      	nop
 800e9e0:	24000920 	.word	0x24000920
 800e9e4:	24000988 	.word	0x24000988
 800e9e8:	240009f0 	.word	0x240009f0

0800e9ec <global_stdio_init.part.0>:
 800e9ec:	b510      	push	{r4, lr}
 800e9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800ea1c <global_stdio_init.part.0+0x30>)
 800e9f0:	4c0b      	ldr	r4, [pc, #44]	@ (800ea20 <global_stdio_init.part.0+0x34>)
 800e9f2:	4a0c      	ldr	r2, [pc, #48]	@ (800ea24 <global_stdio_init.part.0+0x38>)
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	2104      	movs	r1, #4
 800e9fc:	f7ff ff94 	bl	800e928 <std>
 800ea00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea04:	2201      	movs	r2, #1
 800ea06:	2109      	movs	r1, #9
 800ea08:	f7ff ff8e 	bl	800e928 <std>
 800ea0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea10:	2202      	movs	r2, #2
 800ea12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea16:	2112      	movs	r1, #18
 800ea18:	f7ff bf86 	b.w	800e928 <std>
 800ea1c:	24000a58 	.word	0x24000a58
 800ea20:	24000920 	.word	0x24000920
 800ea24:	0800e995 	.word	0x0800e995

0800ea28 <__sfp_lock_acquire>:
 800ea28:	4801      	ldr	r0, [pc, #4]	@ (800ea30 <__sfp_lock_acquire+0x8>)
 800ea2a:	f000 b962 	b.w	800ecf2 <__retarget_lock_acquire_recursive>
 800ea2e:	bf00      	nop
 800ea30:	24000a61 	.word	0x24000a61

0800ea34 <__sfp_lock_release>:
 800ea34:	4801      	ldr	r0, [pc, #4]	@ (800ea3c <__sfp_lock_release+0x8>)
 800ea36:	f000 b95d 	b.w	800ecf4 <__retarget_lock_release_recursive>
 800ea3a:	bf00      	nop
 800ea3c:	24000a61 	.word	0x24000a61

0800ea40 <__sinit>:
 800ea40:	b510      	push	{r4, lr}
 800ea42:	4604      	mov	r4, r0
 800ea44:	f7ff fff0 	bl	800ea28 <__sfp_lock_acquire>
 800ea48:	6a23      	ldr	r3, [r4, #32]
 800ea4a:	b11b      	cbz	r3, 800ea54 <__sinit+0x14>
 800ea4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea50:	f7ff bff0 	b.w	800ea34 <__sfp_lock_release>
 800ea54:	4b04      	ldr	r3, [pc, #16]	@ (800ea68 <__sinit+0x28>)
 800ea56:	6223      	str	r3, [r4, #32]
 800ea58:	4b04      	ldr	r3, [pc, #16]	@ (800ea6c <__sinit+0x2c>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1f5      	bne.n	800ea4c <__sinit+0xc>
 800ea60:	f7ff ffc4 	bl	800e9ec <global_stdio_init.part.0>
 800ea64:	e7f2      	b.n	800ea4c <__sinit+0xc>
 800ea66:	bf00      	nop
 800ea68:	0800e9ad 	.word	0x0800e9ad
 800ea6c:	24000a58 	.word	0x24000a58

0800ea70 <_fwalk_sglue>:
 800ea70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea74:	4607      	mov	r7, r0
 800ea76:	4688      	mov	r8, r1
 800ea78:	4614      	mov	r4, r2
 800ea7a:	2600      	movs	r6, #0
 800ea7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea80:	f1b9 0901 	subs.w	r9, r9, #1
 800ea84:	d505      	bpl.n	800ea92 <_fwalk_sglue+0x22>
 800ea86:	6824      	ldr	r4, [r4, #0]
 800ea88:	2c00      	cmp	r4, #0
 800ea8a:	d1f7      	bne.n	800ea7c <_fwalk_sglue+0xc>
 800ea8c:	4630      	mov	r0, r6
 800ea8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea92:	89ab      	ldrh	r3, [r5, #12]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d907      	bls.n	800eaa8 <_fwalk_sglue+0x38>
 800ea98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	d003      	beq.n	800eaa8 <_fwalk_sglue+0x38>
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	4638      	mov	r0, r7
 800eaa4:	47c0      	blx	r8
 800eaa6:	4306      	orrs	r6, r0
 800eaa8:	3568      	adds	r5, #104	@ 0x68
 800eaaa:	e7e9      	b.n	800ea80 <_fwalk_sglue+0x10>

0800eaac <siprintf>:
 800eaac:	b40e      	push	{r1, r2, r3}
 800eaae:	b510      	push	{r4, lr}
 800eab0:	b09d      	sub	sp, #116	@ 0x74
 800eab2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800eab4:	9002      	str	r0, [sp, #8]
 800eab6:	9006      	str	r0, [sp, #24]
 800eab8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eabc:	480a      	ldr	r0, [pc, #40]	@ (800eae8 <siprintf+0x3c>)
 800eabe:	9107      	str	r1, [sp, #28]
 800eac0:	9104      	str	r1, [sp, #16]
 800eac2:	490a      	ldr	r1, [pc, #40]	@ (800eaec <siprintf+0x40>)
 800eac4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eac8:	9105      	str	r1, [sp, #20]
 800eaca:	2400      	movs	r4, #0
 800eacc:	a902      	add	r1, sp, #8
 800eace:	6800      	ldr	r0, [r0, #0]
 800ead0:	9301      	str	r3, [sp, #4]
 800ead2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ead4:	f002 fb38 	bl	8011148 <_svfiprintf_r>
 800ead8:	9b02      	ldr	r3, [sp, #8]
 800eada:	701c      	strb	r4, [r3, #0]
 800eadc:	b01d      	add	sp, #116	@ 0x74
 800eade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eae2:	b003      	add	sp, #12
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	24000030 	.word	0x24000030
 800eaec:	ffff0208 	.word	0xffff0208

0800eaf0 <siscanf>:
 800eaf0:	b40e      	push	{r1, r2, r3}
 800eaf2:	b570      	push	{r4, r5, r6, lr}
 800eaf4:	b09d      	sub	sp, #116	@ 0x74
 800eaf6:	ac21      	add	r4, sp, #132	@ 0x84
 800eaf8:	2500      	movs	r5, #0
 800eafa:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800eafe:	f854 6b04 	ldr.w	r6, [r4], #4
 800eb02:	f8ad 2014 	strh.w	r2, [sp, #20]
 800eb06:	951b      	str	r5, [sp, #108]	@ 0x6c
 800eb08:	9002      	str	r0, [sp, #8]
 800eb0a:	9006      	str	r0, [sp, #24]
 800eb0c:	f7f1 fc38 	bl	8000380 <strlen>
 800eb10:	4b0b      	ldr	r3, [pc, #44]	@ (800eb40 <siscanf+0x50>)
 800eb12:	9003      	str	r0, [sp, #12]
 800eb14:	9007      	str	r0, [sp, #28]
 800eb16:	480b      	ldr	r0, [pc, #44]	@ (800eb44 <siscanf+0x54>)
 800eb18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eb1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eb22:	4632      	mov	r2, r6
 800eb24:	4623      	mov	r3, r4
 800eb26:	a902      	add	r1, sp, #8
 800eb28:	6800      	ldr	r0, [r0, #0]
 800eb2a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800eb2c:	9514      	str	r5, [sp, #80]	@ 0x50
 800eb2e:	9401      	str	r4, [sp, #4]
 800eb30:	f002 fc60 	bl	80113f4 <__ssvfiscanf_r>
 800eb34:	b01d      	add	sp, #116	@ 0x74
 800eb36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb3a:	b003      	add	sp, #12
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	0800eb6b 	.word	0x0800eb6b
 800eb44:	24000030 	.word	0x24000030

0800eb48 <__sread>:
 800eb48:	b510      	push	{r4, lr}
 800eb4a:	460c      	mov	r4, r1
 800eb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb50:	f000 f880 	bl	800ec54 <_read_r>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	bfab      	itete	ge
 800eb58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb5a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb5c:	181b      	addge	r3, r3, r0
 800eb5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb62:	bfac      	ite	ge
 800eb64:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb66:	81a3      	strhlt	r3, [r4, #12]
 800eb68:	bd10      	pop	{r4, pc}

0800eb6a <__seofread>:
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	4770      	bx	lr

0800eb6e <__swrite>:
 800eb6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb72:	461f      	mov	r7, r3
 800eb74:	898b      	ldrh	r3, [r1, #12]
 800eb76:	05db      	lsls	r3, r3, #23
 800eb78:	4605      	mov	r5, r0
 800eb7a:	460c      	mov	r4, r1
 800eb7c:	4616      	mov	r6, r2
 800eb7e:	d505      	bpl.n	800eb8c <__swrite+0x1e>
 800eb80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb84:	2302      	movs	r3, #2
 800eb86:	2200      	movs	r2, #0
 800eb88:	f000 f852 	bl	800ec30 <_lseek_r>
 800eb8c:	89a3      	ldrh	r3, [r4, #12]
 800eb8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb96:	81a3      	strh	r3, [r4, #12]
 800eb98:	4632      	mov	r2, r6
 800eb9a:	463b      	mov	r3, r7
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eba2:	f000 b869 	b.w	800ec78 <_write_r>

0800eba6 <__sseek>:
 800eba6:	b510      	push	{r4, lr}
 800eba8:	460c      	mov	r4, r1
 800ebaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebae:	f000 f83f 	bl	800ec30 <_lseek_r>
 800ebb2:	1c43      	adds	r3, r0, #1
 800ebb4:	89a3      	ldrh	r3, [r4, #12]
 800ebb6:	bf15      	itete	ne
 800ebb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ebba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ebbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ebc2:	81a3      	strheq	r3, [r4, #12]
 800ebc4:	bf18      	it	ne
 800ebc6:	81a3      	strhne	r3, [r4, #12]
 800ebc8:	bd10      	pop	{r4, pc}

0800ebca <__sclose>:
 800ebca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebce:	f000 b81f 	b.w	800ec10 <_close_r>

0800ebd2 <memset>:
 800ebd2:	4402      	add	r2, r0
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d100      	bne.n	800ebdc <memset+0xa>
 800ebda:	4770      	bx	lr
 800ebdc:	f803 1b01 	strb.w	r1, [r3], #1
 800ebe0:	e7f9      	b.n	800ebd6 <memset+0x4>

0800ebe2 <strncmp>:
 800ebe2:	b510      	push	{r4, lr}
 800ebe4:	b16a      	cbz	r2, 800ec02 <strncmp+0x20>
 800ebe6:	3901      	subs	r1, #1
 800ebe8:	1884      	adds	r4, r0, r2
 800ebea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d103      	bne.n	800ebfe <strncmp+0x1c>
 800ebf6:	42a0      	cmp	r0, r4
 800ebf8:	d001      	beq.n	800ebfe <strncmp+0x1c>
 800ebfa:	2a00      	cmp	r2, #0
 800ebfc:	d1f5      	bne.n	800ebea <strncmp+0x8>
 800ebfe:	1ad0      	subs	r0, r2, r3
 800ec00:	bd10      	pop	{r4, pc}
 800ec02:	4610      	mov	r0, r2
 800ec04:	e7fc      	b.n	800ec00 <strncmp+0x1e>
	...

0800ec08 <_localeconv_r>:
 800ec08:	4800      	ldr	r0, [pc, #0]	@ (800ec0c <_localeconv_r+0x4>)
 800ec0a:	4770      	bx	lr
 800ec0c:	24000170 	.word	0x24000170

0800ec10 <_close_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4d06      	ldr	r5, [pc, #24]	@ (800ec2c <_close_r+0x1c>)
 800ec14:	2300      	movs	r3, #0
 800ec16:	4604      	mov	r4, r0
 800ec18:	4608      	mov	r0, r1
 800ec1a:	602b      	str	r3, [r5, #0]
 800ec1c:	f7f3 f96e 	bl	8001efc <_close>
 800ec20:	1c43      	adds	r3, r0, #1
 800ec22:	d102      	bne.n	800ec2a <_close_r+0x1a>
 800ec24:	682b      	ldr	r3, [r5, #0]
 800ec26:	b103      	cbz	r3, 800ec2a <_close_r+0x1a>
 800ec28:	6023      	str	r3, [r4, #0]
 800ec2a:	bd38      	pop	{r3, r4, r5, pc}
 800ec2c:	24000a5c 	.word	0x24000a5c

0800ec30 <_lseek_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4d07      	ldr	r5, [pc, #28]	@ (800ec50 <_lseek_r+0x20>)
 800ec34:	4604      	mov	r4, r0
 800ec36:	4608      	mov	r0, r1
 800ec38:	4611      	mov	r1, r2
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	602a      	str	r2, [r5, #0]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	f7f3 f983 	bl	8001f4a <_lseek>
 800ec44:	1c43      	adds	r3, r0, #1
 800ec46:	d102      	bne.n	800ec4e <_lseek_r+0x1e>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	b103      	cbz	r3, 800ec4e <_lseek_r+0x1e>
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	24000a5c 	.word	0x24000a5c

0800ec54 <_read_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	4d07      	ldr	r5, [pc, #28]	@ (800ec74 <_read_r+0x20>)
 800ec58:	4604      	mov	r4, r0
 800ec5a:	4608      	mov	r0, r1
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	2200      	movs	r2, #0
 800ec60:	602a      	str	r2, [r5, #0]
 800ec62:	461a      	mov	r2, r3
 800ec64:	f7f3 f911 	bl	8001e8a <_read>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d102      	bne.n	800ec72 <_read_r+0x1e>
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	b103      	cbz	r3, 800ec72 <_read_r+0x1e>
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	bd38      	pop	{r3, r4, r5, pc}
 800ec74:	24000a5c 	.word	0x24000a5c

0800ec78 <_write_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4d07      	ldr	r5, [pc, #28]	@ (800ec98 <_write_r+0x20>)
 800ec7c:	4604      	mov	r4, r0
 800ec7e:	4608      	mov	r0, r1
 800ec80:	4611      	mov	r1, r2
 800ec82:	2200      	movs	r2, #0
 800ec84:	602a      	str	r2, [r5, #0]
 800ec86:	461a      	mov	r2, r3
 800ec88:	f7f3 f91c 	bl	8001ec4 <_write>
 800ec8c:	1c43      	adds	r3, r0, #1
 800ec8e:	d102      	bne.n	800ec96 <_write_r+0x1e>
 800ec90:	682b      	ldr	r3, [r5, #0]
 800ec92:	b103      	cbz	r3, 800ec96 <_write_r+0x1e>
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	bd38      	pop	{r3, r4, r5, pc}
 800ec98:	24000a5c 	.word	0x24000a5c

0800ec9c <__errno>:
 800ec9c:	4b01      	ldr	r3, [pc, #4]	@ (800eca4 <__errno+0x8>)
 800ec9e:	6818      	ldr	r0, [r3, #0]
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	24000030 	.word	0x24000030

0800eca8 <__libc_init_array>:
 800eca8:	b570      	push	{r4, r5, r6, lr}
 800ecaa:	4d0d      	ldr	r5, [pc, #52]	@ (800ece0 <__libc_init_array+0x38>)
 800ecac:	4c0d      	ldr	r4, [pc, #52]	@ (800ece4 <__libc_init_array+0x3c>)
 800ecae:	1b64      	subs	r4, r4, r5
 800ecb0:	10a4      	asrs	r4, r4, #2
 800ecb2:	2600      	movs	r6, #0
 800ecb4:	42a6      	cmp	r6, r4
 800ecb6:	d109      	bne.n	800eccc <__libc_init_array+0x24>
 800ecb8:	4d0b      	ldr	r5, [pc, #44]	@ (800ece8 <__libc_init_array+0x40>)
 800ecba:	4c0c      	ldr	r4, [pc, #48]	@ (800ecec <__libc_init_array+0x44>)
 800ecbc:	f003 fea8 	bl	8012a10 <_init>
 800ecc0:	1b64      	subs	r4, r4, r5
 800ecc2:	10a4      	asrs	r4, r4, #2
 800ecc4:	2600      	movs	r6, #0
 800ecc6:	42a6      	cmp	r6, r4
 800ecc8:	d105      	bne.n	800ecd6 <__libc_init_array+0x2e>
 800ecca:	bd70      	pop	{r4, r5, r6, pc}
 800eccc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecd0:	4798      	blx	r3
 800ecd2:	3601      	adds	r6, #1
 800ecd4:	e7ee      	b.n	800ecb4 <__libc_init_array+0xc>
 800ecd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecda:	4798      	blx	r3
 800ecdc:	3601      	adds	r6, #1
 800ecde:	e7f2      	b.n	800ecc6 <__libc_init_array+0x1e>
 800ece0:	08012f0c 	.word	0x08012f0c
 800ece4:	08012f0c 	.word	0x08012f0c
 800ece8:	08012f0c 	.word	0x08012f0c
 800ecec:	08012f10 	.word	0x08012f10

0800ecf0 <__retarget_lock_init_recursive>:
 800ecf0:	4770      	bx	lr

0800ecf2 <__retarget_lock_acquire_recursive>:
 800ecf2:	4770      	bx	lr

0800ecf4 <__retarget_lock_release_recursive>:
 800ecf4:	4770      	bx	lr
	...

0800ecf8 <nanf>:
 800ecf8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ed00 <nanf+0x8>
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	7fc00000 	.word	0x7fc00000

0800ed04 <quorem>:
 800ed04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed08:	6903      	ldr	r3, [r0, #16]
 800ed0a:	690c      	ldr	r4, [r1, #16]
 800ed0c:	42a3      	cmp	r3, r4
 800ed0e:	4607      	mov	r7, r0
 800ed10:	db7e      	blt.n	800ee10 <quorem+0x10c>
 800ed12:	3c01      	subs	r4, #1
 800ed14:	f101 0814 	add.w	r8, r1, #20
 800ed18:	00a3      	lsls	r3, r4, #2
 800ed1a:	f100 0514 	add.w	r5, r0, #20
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed24:	9301      	str	r3, [sp, #4]
 800ed26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	429a      	cmp	r2, r3
 800ed32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed36:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed3a:	d32e      	bcc.n	800ed9a <quorem+0x96>
 800ed3c:	f04f 0a00 	mov.w	sl, #0
 800ed40:	46c4      	mov	ip, r8
 800ed42:	46ae      	mov	lr, r5
 800ed44:	46d3      	mov	fp, sl
 800ed46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed4a:	b298      	uxth	r0, r3
 800ed4c:	fb06 a000 	mla	r0, r6, r0, sl
 800ed50:	0c02      	lsrs	r2, r0, #16
 800ed52:	0c1b      	lsrs	r3, r3, #16
 800ed54:	fb06 2303 	mla	r3, r6, r3, r2
 800ed58:	f8de 2000 	ldr.w	r2, [lr]
 800ed5c:	b280      	uxth	r0, r0
 800ed5e:	b292      	uxth	r2, r2
 800ed60:	1a12      	subs	r2, r2, r0
 800ed62:	445a      	add	r2, fp
 800ed64:	f8de 0000 	ldr.w	r0, [lr]
 800ed68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ed72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ed76:	b292      	uxth	r2, r2
 800ed78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ed7c:	45e1      	cmp	r9, ip
 800ed7e:	f84e 2b04 	str.w	r2, [lr], #4
 800ed82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ed86:	d2de      	bcs.n	800ed46 <quorem+0x42>
 800ed88:	9b00      	ldr	r3, [sp, #0]
 800ed8a:	58eb      	ldr	r3, [r5, r3]
 800ed8c:	b92b      	cbnz	r3, 800ed9a <quorem+0x96>
 800ed8e:	9b01      	ldr	r3, [sp, #4]
 800ed90:	3b04      	subs	r3, #4
 800ed92:	429d      	cmp	r5, r3
 800ed94:	461a      	mov	r2, r3
 800ed96:	d32f      	bcc.n	800edf8 <quorem+0xf4>
 800ed98:	613c      	str	r4, [r7, #16]
 800ed9a:	4638      	mov	r0, r7
 800ed9c:	f001 f956 	bl	801004c <__mcmp>
 800eda0:	2800      	cmp	r0, #0
 800eda2:	db25      	blt.n	800edf0 <quorem+0xec>
 800eda4:	4629      	mov	r1, r5
 800eda6:	2000      	movs	r0, #0
 800eda8:	f858 2b04 	ldr.w	r2, [r8], #4
 800edac:	f8d1 c000 	ldr.w	ip, [r1]
 800edb0:	fa1f fe82 	uxth.w	lr, r2
 800edb4:	fa1f f38c 	uxth.w	r3, ip
 800edb8:	eba3 030e 	sub.w	r3, r3, lr
 800edbc:	4403      	add	r3, r0
 800edbe:	0c12      	lsrs	r2, r2, #16
 800edc0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800edc4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800edc8:	b29b      	uxth	r3, r3
 800edca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edce:	45c1      	cmp	r9, r8
 800edd0:	f841 3b04 	str.w	r3, [r1], #4
 800edd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800edd8:	d2e6      	bcs.n	800eda8 <quorem+0xa4>
 800edda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ede2:	b922      	cbnz	r2, 800edee <quorem+0xea>
 800ede4:	3b04      	subs	r3, #4
 800ede6:	429d      	cmp	r5, r3
 800ede8:	461a      	mov	r2, r3
 800edea:	d30b      	bcc.n	800ee04 <quorem+0x100>
 800edec:	613c      	str	r4, [r7, #16]
 800edee:	3601      	adds	r6, #1
 800edf0:	4630      	mov	r0, r6
 800edf2:	b003      	add	sp, #12
 800edf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf8:	6812      	ldr	r2, [r2, #0]
 800edfa:	3b04      	subs	r3, #4
 800edfc:	2a00      	cmp	r2, #0
 800edfe:	d1cb      	bne.n	800ed98 <quorem+0x94>
 800ee00:	3c01      	subs	r4, #1
 800ee02:	e7c6      	b.n	800ed92 <quorem+0x8e>
 800ee04:	6812      	ldr	r2, [r2, #0]
 800ee06:	3b04      	subs	r3, #4
 800ee08:	2a00      	cmp	r2, #0
 800ee0a:	d1ef      	bne.n	800edec <quorem+0xe8>
 800ee0c:	3c01      	subs	r4, #1
 800ee0e:	e7ea      	b.n	800ede6 <quorem+0xe2>
 800ee10:	2000      	movs	r0, #0
 800ee12:	e7ee      	b.n	800edf2 <quorem+0xee>
 800ee14:	0000      	movs	r0, r0
	...

0800ee18 <_dtoa_r>:
 800ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1c:	ed2d 8b02 	vpush	{d8}
 800ee20:	69c7      	ldr	r7, [r0, #28]
 800ee22:	b091      	sub	sp, #68	@ 0x44
 800ee24:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee28:	ec55 4b10 	vmov	r4, r5, d0
 800ee2c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ee2e:	9107      	str	r1, [sp, #28]
 800ee30:	4681      	mov	r9, r0
 800ee32:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee34:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee36:	b97f      	cbnz	r7, 800ee58 <_dtoa_r+0x40>
 800ee38:	2010      	movs	r0, #16
 800ee3a:	f000 fd95 	bl	800f968 <malloc>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	f8c9 001c 	str.w	r0, [r9, #28]
 800ee44:	b920      	cbnz	r0, 800ee50 <_dtoa_r+0x38>
 800ee46:	4ba0      	ldr	r3, [pc, #640]	@ (800f0c8 <_dtoa_r+0x2b0>)
 800ee48:	21ef      	movs	r1, #239	@ 0xef
 800ee4a:	48a0      	ldr	r0, [pc, #640]	@ (800f0cc <_dtoa_r+0x2b4>)
 800ee4c:	f002 fef8 	bl	8011c40 <__assert_func>
 800ee50:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee54:	6007      	str	r7, [r0, #0]
 800ee56:	60c7      	str	r7, [r0, #12]
 800ee58:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ee5c:	6819      	ldr	r1, [r3, #0]
 800ee5e:	b159      	cbz	r1, 800ee78 <_dtoa_r+0x60>
 800ee60:	685a      	ldr	r2, [r3, #4]
 800ee62:	604a      	str	r2, [r1, #4]
 800ee64:	2301      	movs	r3, #1
 800ee66:	4093      	lsls	r3, r2
 800ee68:	608b      	str	r3, [r1, #8]
 800ee6a:	4648      	mov	r0, r9
 800ee6c:	f000 fe72 	bl	800fb54 <_Bfree>
 800ee70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ee74:	2200      	movs	r2, #0
 800ee76:	601a      	str	r2, [r3, #0]
 800ee78:	1e2b      	subs	r3, r5, #0
 800ee7a:	bfbb      	ittet	lt
 800ee7c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ee80:	9303      	strlt	r3, [sp, #12]
 800ee82:	2300      	movge	r3, #0
 800ee84:	2201      	movlt	r2, #1
 800ee86:	bfac      	ite	ge
 800ee88:	6033      	strge	r3, [r6, #0]
 800ee8a:	6032      	strlt	r2, [r6, #0]
 800ee8c:	4b90      	ldr	r3, [pc, #576]	@ (800f0d0 <_dtoa_r+0x2b8>)
 800ee8e:	9e03      	ldr	r6, [sp, #12]
 800ee90:	43b3      	bics	r3, r6
 800ee92:	d110      	bne.n	800eeb6 <_dtoa_r+0x9e>
 800ee94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee96:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ee9a:	6013      	str	r3, [r2, #0]
 800ee9c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800eea0:	4323      	orrs	r3, r4
 800eea2:	f000 84e6 	beq.w	800f872 <_dtoa_r+0xa5a>
 800eea6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eea8:	4f8a      	ldr	r7, [pc, #552]	@ (800f0d4 <_dtoa_r+0x2bc>)
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	f000 84e8 	beq.w	800f880 <_dtoa_r+0xa68>
 800eeb0:	1cfb      	adds	r3, r7, #3
 800eeb2:	f000 bce3 	b.w	800f87c <_dtoa_r+0xa64>
 800eeb6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800eeba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec2:	d10a      	bne.n	800eeda <_dtoa_r+0xc2>
 800eec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eec6:	2301      	movs	r3, #1
 800eec8:	6013      	str	r3, [r2, #0]
 800eeca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eecc:	b113      	cbz	r3, 800eed4 <_dtoa_r+0xbc>
 800eece:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800eed0:	4b81      	ldr	r3, [pc, #516]	@ (800f0d8 <_dtoa_r+0x2c0>)
 800eed2:	6013      	str	r3, [r2, #0]
 800eed4:	4f81      	ldr	r7, [pc, #516]	@ (800f0dc <_dtoa_r+0x2c4>)
 800eed6:	f000 bcd3 	b.w	800f880 <_dtoa_r+0xa68>
 800eeda:	aa0e      	add	r2, sp, #56	@ 0x38
 800eedc:	a90f      	add	r1, sp, #60	@ 0x3c
 800eede:	4648      	mov	r0, r9
 800eee0:	eeb0 0b48 	vmov.f64	d0, d8
 800eee4:	f001 f9d2 	bl	801028c <__d2b>
 800eee8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800eeec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eeee:	9001      	str	r0, [sp, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d045      	beq.n	800ef80 <_dtoa_r+0x168>
 800eef4:	eeb0 7b48 	vmov.f64	d7, d8
 800eef8:	ee18 1a90 	vmov	r1, s17
 800eefc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ef00:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ef04:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ef08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ef0c:	2500      	movs	r5, #0
 800ef0e:	ee07 1a90 	vmov	s15, r1
 800ef12:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ef16:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f0b0 <_dtoa_r+0x298>
 800ef1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef1e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f0b8 <_dtoa_r+0x2a0>
 800ef22:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ef26:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f0c0 <_dtoa_r+0x2a8>
 800ef2a:	ee07 3a90 	vmov	s15, r3
 800ef2e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ef32:	eeb0 7b46 	vmov.f64	d7, d6
 800ef36:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ef3a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ef3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ef42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef46:	ee16 8a90 	vmov	r8, s13
 800ef4a:	d508      	bpl.n	800ef5e <_dtoa_r+0x146>
 800ef4c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ef50:	eeb4 6b47 	vcmp.f64	d6, d7
 800ef54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef58:	bf18      	it	ne
 800ef5a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ef5e:	f1b8 0f16 	cmp.w	r8, #22
 800ef62:	d82b      	bhi.n	800efbc <_dtoa_r+0x1a4>
 800ef64:	495e      	ldr	r1, [pc, #376]	@ (800f0e0 <_dtoa_r+0x2c8>)
 800ef66:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ef6a:	ed91 7b00 	vldr	d7, [r1]
 800ef6e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ef72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef76:	d501      	bpl.n	800ef7c <_dtoa_r+0x164>
 800ef78:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	e01e      	b.n	800efbe <_dtoa_r+0x1a6>
 800ef80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef82:	4413      	add	r3, r2
 800ef84:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ef88:	2920      	cmp	r1, #32
 800ef8a:	bfc1      	itttt	gt
 800ef8c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ef90:	408e      	lslgt	r6, r1
 800ef92:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ef96:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ef9a:	bfd6      	itet	le
 800ef9c:	f1c1 0120 	rsble	r1, r1, #32
 800efa0:	4331      	orrgt	r1, r6
 800efa2:	fa04 f101 	lslle.w	r1, r4, r1
 800efa6:	ee07 1a90 	vmov	s15, r1
 800efaa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800efae:	3b01      	subs	r3, #1
 800efb0:	ee17 1a90 	vmov	r1, s15
 800efb4:	2501      	movs	r5, #1
 800efb6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800efba:	e7a8      	b.n	800ef0e <_dtoa_r+0xf6>
 800efbc:	2101      	movs	r1, #1
 800efbe:	1ad2      	subs	r2, r2, r3
 800efc0:	1e53      	subs	r3, r2, #1
 800efc2:	9306      	str	r3, [sp, #24]
 800efc4:	bf45      	ittet	mi
 800efc6:	f1c2 0301 	rsbmi	r3, r2, #1
 800efca:	9304      	strmi	r3, [sp, #16]
 800efcc:	2300      	movpl	r3, #0
 800efce:	2300      	movmi	r3, #0
 800efd0:	bf4c      	ite	mi
 800efd2:	9306      	strmi	r3, [sp, #24]
 800efd4:	9304      	strpl	r3, [sp, #16]
 800efd6:	f1b8 0f00 	cmp.w	r8, #0
 800efda:	910c      	str	r1, [sp, #48]	@ 0x30
 800efdc:	db18      	blt.n	800f010 <_dtoa_r+0x1f8>
 800efde:	9b06      	ldr	r3, [sp, #24]
 800efe0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800efe4:	4443      	add	r3, r8
 800efe6:	9306      	str	r3, [sp, #24]
 800efe8:	2300      	movs	r3, #0
 800efea:	9a07      	ldr	r2, [sp, #28]
 800efec:	2a09      	cmp	r2, #9
 800efee:	d845      	bhi.n	800f07c <_dtoa_r+0x264>
 800eff0:	2a05      	cmp	r2, #5
 800eff2:	bfc4      	itt	gt
 800eff4:	3a04      	subgt	r2, #4
 800eff6:	9207      	strgt	r2, [sp, #28]
 800eff8:	9a07      	ldr	r2, [sp, #28]
 800effa:	f1a2 0202 	sub.w	r2, r2, #2
 800effe:	bfcc      	ite	gt
 800f000:	2400      	movgt	r4, #0
 800f002:	2401      	movle	r4, #1
 800f004:	2a03      	cmp	r2, #3
 800f006:	d844      	bhi.n	800f092 <_dtoa_r+0x27a>
 800f008:	e8df f002 	tbb	[pc, r2]
 800f00c:	0b173634 	.word	0x0b173634
 800f010:	9b04      	ldr	r3, [sp, #16]
 800f012:	2200      	movs	r2, #0
 800f014:	eba3 0308 	sub.w	r3, r3, r8
 800f018:	9304      	str	r3, [sp, #16]
 800f01a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f01c:	f1c8 0300 	rsb	r3, r8, #0
 800f020:	e7e3      	b.n	800efea <_dtoa_r+0x1d2>
 800f022:	2201      	movs	r2, #1
 800f024:	9208      	str	r2, [sp, #32]
 800f026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f028:	eb08 0b02 	add.w	fp, r8, r2
 800f02c:	f10b 0a01 	add.w	sl, fp, #1
 800f030:	4652      	mov	r2, sl
 800f032:	2a01      	cmp	r2, #1
 800f034:	bfb8      	it	lt
 800f036:	2201      	movlt	r2, #1
 800f038:	e006      	b.n	800f048 <_dtoa_r+0x230>
 800f03a:	2201      	movs	r2, #1
 800f03c:	9208      	str	r2, [sp, #32]
 800f03e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f040:	2a00      	cmp	r2, #0
 800f042:	dd29      	ble.n	800f098 <_dtoa_r+0x280>
 800f044:	4693      	mov	fp, r2
 800f046:	4692      	mov	sl, r2
 800f048:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f04c:	2100      	movs	r1, #0
 800f04e:	2004      	movs	r0, #4
 800f050:	f100 0614 	add.w	r6, r0, #20
 800f054:	4296      	cmp	r6, r2
 800f056:	d926      	bls.n	800f0a6 <_dtoa_r+0x28e>
 800f058:	6079      	str	r1, [r7, #4]
 800f05a:	4648      	mov	r0, r9
 800f05c:	9305      	str	r3, [sp, #20]
 800f05e:	f000 fd39 	bl	800fad4 <_Balloc>
 800f062:	9b05      	ldr	r3, [sp, #20]
 800f064:	4607      	mov	r7, r0
 800f066:	2800      	cmp	r0, #0
 800f068:	d13e      	bne.n	800f0e8 <_dtoa_r+0x2d0>
 800f06a:	4b1e      	ldr	r3, [pc, #120]	@ (800f0e4 <_dtoa_r+0x2cc>)
 800f06c:	4602      	mov	r2, r0
 800f06e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f072:	e6ea      	b.n	800ee4a <_dtoa_r+0x32>
 800f074:	2200      	movs	r2, #0
 800f076:	e7e1      	b.n	800f03c <_dtoa_r+0x224>
 800f078:	2200      	movs	r2, #0
 800f07a:	e7d3      	b.n	800f024 <_dtoa_r+0x20c>
 800f07c:	2401      	movs	r4, #1
 800f07e:	2200      	movs	r2, #0
 800f080:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f084:	f04f 3bff 	mov.w	fp, #4294967295
 800f088:	2100      	movs	r1, #0
 800f08a:	46da      	mov	sl, fp
 800f08c:	2212      	movs	r2, #18
 800f08e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f090:	e7da      	b.n	800f048 <_dtoa_r+0x230>
 800f092:	2201      	movs	r2, #1
 800f094:	9208      	str	r2, [sp, #32]
 800f096:	e7f5      	b.n	800f084 <_dtoa_r+0x26c>
 800f098:	f04f 0b01 	mov.w	fp, #1
 800f09c:	46da      	mov	sl, fp
 800f09e:	465a      	mov	r2, fp
 800f0a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f0a4:	e7d0      	b.n	800f048 <_dtoa_r+0x230>
 800f0a6:	3101      	adds	r1, #1
 800f0a8:	0040      	lsls	r0, r0, #1
 800f0aa:	e7d1      	b.n	800f050 <_dtoa_r+0x238>
 800f0ac:	f3af 8000 	nop.w
 800f0b0:	636f4361 	.word	0x636f4361
 800f0b4:	3fd287a7 	.word	0x3fd287a7
 800f0b8:	8b60c8b3 	.word	0x8b60c8b3
 800f0bc:	3fc68a28 	.word	0x3fc68a28
 800f0c0:	509f79fb 	.word	0x509f79fb
 800f0c4:	3fd34413 	.word	0x3fd34413
 800f0c8:	08012b08 	.word	0x08012b08
 800f0cc:	08012b1f 	.word	0x08012b1f
 800f0d0:	7ff00000 	.word	0x7ff00000
 800f0d4:	08012b04 	.word	0x08012b04
 800f0d8:	08012c0b 	.word	0x08012c0b
 800f0dc:	08012c0a 	.word	0x08012c0a
 800f0e0:	08012ce8 	.word	0x08012ce8
 800f0e4:	08012b77 	.word	0x08012b77
 800f0e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f0ec:	f1ba 0f0e 	cmp.w	sl, #14
 800f0f0:	6010      	str	r0, [r2, #0]
 800f0f2:	d86e      	bhi.n	800f1d2 <_dtoa_r+0x3ba>
 800f0f4:	2c00      	cmp	r4, #0
 800f0f6:	d06c      	beq.n	800f1d2 <_dtoa_r+0x3ba>
 800f0f8:	f1b8 0f00 	cmp.w	r8, #0
 800f0fc:	f340 80b4 	ble.w	800f268 <_dtoa_r+0x450>
 800f100:	4ac8      	ldr	r2, [pc, #800]	@ (800f424 <_dtoa_r+0x60c>)
 800f102:	f008 010f 	and.w	r1, r8, #15
 800f106:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f10a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f10e:	ed92 7b00 	vldr	d7, [r2]
 800f112:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f116:	f000 809b 	beq.w	800f250 <_dtoa_r+0x438>
 800f11a:	4ac3      	ldr	r2, [pc, #780]	@ (800f428 <_dtoa_r+0x610>)
 800f11c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f120:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f124:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f128:	f001 010f 	and.w	r1, r1, #15
 800f12c:	2203      	movs	r2, #3
 800f12e:	48be      	ldr	r0, [pc, #760]	@ (800f428 <_dtoa_r+0x610>)
 800f130:	2900      	cmp	r1, #0
 800f132:	f040 808f 	bne.w	800f254 <_dtoa_r+0x43c>
 800f136:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f13a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f13e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f142:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f144:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f148:	2900      	cmp	r1, #0
 800f14a:	f000 80b3 	beq.w	800f2b4 <_dtoa_r+0x49c>
 800f14e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f152:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15a:	f140 80ab 	bpl.w	800f2b4 <_dtoa_r+0x49c>
 800f15e:	f1ba 0f00 	cmp.w	sl, #0
 800f162:	f000 80a7 	beq.w	800f2b4 <_dtoa_r+0x49c>
 800f166:	f1bb 0f00 	cmp.w	fp, #0
 800f16a:	dd30      	ble.n	800f1ce <_dtoa_r+0x3b6>
 800f16c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f170:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f174:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f178:	f108 31ff 	add.w	r1, r8, #4294967295
 800f17c:	9105      	str	r1, [sp, #20]
 800f17e:	3201      	adds	r2, #1
 800f180:	465c      	mov	r4, fp
 800f182:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f186:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f18a:	ee07 2a90 	vmov	s15, r2
 800f18e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f192:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f196:	ee15 2a90 	vmov	r2, s11
 800f19a:	ec51 0b15 	vmov	r0, r1, d5
 800f19e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f1a2:	2c00      	cmp	r4, #0
 800f1a4:	f040 808a 	bne.w	800f2bc <_dtoa_r+0x4a4>
 800f1a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f1ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f1b0:	ec41 0b17 	vmov	d7, r0, r1
 800f1b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1bc:	f300 826a 	bgt.w	800f694 <_dtoa_r+0x87c>
 800f1c0:	eeb1 7b47 	vneg.f64	d7, d7
 800f1c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1cc:	d423      	bmi.n	800f216 <_dtoa_r+0x3fe>
 800f1ce:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f1d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f1d4:	2a00      	cmp	r2, #0
 800f1d6:	f2c0 8129 	blt.w	800f42c <_dtoa_r+0x614>
 800f1da:	f1b8 0f0e 	cmp.w	r8, #14
 800f1de:	f300 8125 	bgt.w	800f42c <_dtoa_r+0x614>
 800f1e2:	4b90      	ldr	r3, [pc, #576]	@ (800f424 <_dtoa_r+0x60c>)
 800f1e4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f1e8:	ed93 6b00 	vldr	d6, [r3]
 800f1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f280 80c8 	bge.w	800f384 <_dtoa_r+0x56c>
 800f1f4:	f1ba 0f00 	cmp.w	sl, #0
 800f1f8:	f300 80c4 	bgt.w	800f384 <_dtoa_r+0x56c>
 800f1fc:	d10b      	bne.n	800f216 <_dtoa_r+0x3fe>
 800f1fe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f202:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f206:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f20a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f212:	f2c0 823c 	blt.w	800f68e <_dtoa_r+0x876>
 800f216:	2400      	movs	r4, #0
 800f218:	4625      	mov	r5, r4
 800f21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f21c:	43db      	mvns	r3, r3
 800f21e:	9305      	str	r3, [sp, #20]
 800f220:	463e      	mov	r6, r7
 800f222:	f04f 0800 	mov.w	r8, #0
 800f226:	4621      	mov	r1, r4
 800f228:	4648      	mov	r0, r9
 800f22a:	f000 fc93 	bl	800fb54 <_Bfree>
 800f22e:	2d00      	cmp	r5, #0
 800f230:	f000 80a2 	beq.w	800f378 <_dtoa_r+0x560>
 800f234:	f1b8 0f00 	cmp.w	r8, #0
 800f238:	d005      	beq.n	800f246 <_dtoa_r+0x42e>
 800f23a:	45a8      	cmp	r8, r5
 800f23c:	d003      	beq.n	800f246 <_dtoa_r+0x42e>
 800f23e:	4641      	mov	r1, r8
 800f240:	4648      	mov	r0, r9
 800f242:	f000 fc87 	bl	800fb54 <_Bfree>
 800f246:	4629      	mov	r1, r5
 800f248:	4648      	mov	r0, r9
 800f24a:	f000 fc83 	bl	800fb54 <_Bfree>
 800f24e:	e093      	b.n	800f378 <_dtoa_r+0x560>
 800f250:	2202      	movs	r2, #2
 800f252:	e76c      	b.n	800f12e <_dtoa_r+0x316>
 800f254:	07cc      	lsls	r4, r1, #31
 800f256:	d504      	bpl.n	800f262 <_dtoa_r+0x44a>
 800f258:	ed90 6b00 	vldr	d6, [r0]
 800f25c:	3201      	adds	r2, #1
 800f25e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f262:	1049      	asrs	r1, r1, #1
 800f264:	3008      	adds	r0, #8
 800f266:	e763      	b.n	800f130 <_dtoa_r+0x318>
 800f268:	d022      	beq.n	800f2b0 <_dtoa_r+0x498>
 800f26a:	f1c8 0100 	rsb	r1, r8, #0
 800f26e:	4a6d      	ldr	r2, [pc, #436]	@ (800f424 <_dtoa_r+0x60c>)
 800f270:	f001 000f 	and.w	r0, r1, #15
 800f274:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f278:	ed92 7b00 	vldr	d7, [r2]
 800f27c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f280:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f284:	4868      	ldr	r0, [pc, #416]	@ (800f428 <_dtoa_r+0x610>)
 800f286:	1109      	asrs	r1, r1, #4
 800f288:	2400      	movs	r4, #0
 800f28a:	2202      	movs	r2, #2
 800f28c:	b929      	cbnz	r1, 800f29a <_dtoa_r+0x482>
 800f28e:	2c00      	cmp	r4, #0
 800f290:	f43f af57 	beq.w	800f142 <_dtoa_r+0x32a>
 800f294:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f298:	e753      	b.n	800f142 <_dtoa_r+0x32a>
 800f29a:	07ce      	lsls	r6, r1, #31
 800f29c:	d505      	bpl.n	800f2aa <_dtoa_r+0x492>
 800f29e:	ed90 6b00 	vldr	d6, [r0]
 800f2a2:	3201      	adds	r2, #1
 800f2a4:	2401      	movs	r4, #1
 800f2a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2aa:	1049      	asrs	r1, r1, #1
 800f2ac:	3008      	adds	r0, #8
 800f2ae:	e7ed      	b.n	800f28c <_dtoa_r+0x474>
 800f2b0:	2202      	movs	r2, #2
 800f2b2:	e746      	b.n	800f142 <_dtoa_r+0x32a>
 800f2b4:	f8cd 8014 	str.w	r8, [sp, #20]
 800f2b8:	4654      	mov	r4, sl
 800f2ba:	e762      	b.n	800f182 <_dtoa_r+0x36a>
 800f2bc:	4a59      	ldr	r2, [pc, #356]	@ (800f424 <_dtoa_r+0x60c>)
 800f2be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f2c2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f2c6:	9a08      	ldr	r2, [sp, #32]
 800f2c8:	ec41 0b17 	vmov	d7, r0, r1
 800f2cc:	443c      	add	r4, r7
 800f2ce:	b34a      	cbz	r2, 800f324 <_dtoa_r+0x50c>
 800f2d0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f2d4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f2d8:	463e      	mov	r6, r7
 800f2da:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f2de:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f2e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f2e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f2ea:	ee14 2a90 	vmov	r2, s9
 800f2ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f2f2:	3230      	adds	r2, #48	@ 0x30
 800f2f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f2f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f300:	f806 2b01 	strb.w	r2, [r6], #1
 800f304:	d438      	bmi.n	800f378 <_dtoa_r+0x560>
 800f306:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f30a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f312:	d46e      	bmi.n	800f3f2 <_dtoa_r+0x5da>
 800f314:	42a6      	cmp	r6, r4
 800f316:	f43f af5a 	beq.w	800f1ce <_dtoa_r+0x3b6>
 800f31a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f31e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f322:	e7e0      	b.n	800f2e6 <_dtoa_r+0x4ce>
 800f324:	4621      	mov	r1, r4
 800f326:	463e      	mov	r6, r7
 800f328:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f32c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f330:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f334:	ee14 2a90 	vmov	r2, s9
 800f338:	3230      	adds	r2, #48	@ 0x30
 800f33a:	f806 2b01 	strb.w	r2, [r6], #1
 800f33e:	42a6      	cmp	r6, r4
 800f340:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f344:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f348:	d119      	bne.n	800f37e <_dtoa_r+0x566>
 800f34a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f34e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f352:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35a:	dc4a      	bgt.n	800f3f2 <_dtoa_r+0x5da>
 800f35c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f360:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f368:	f57f af31 	bpl.w	800f1ce <_dtoa_r+0x3b6>
 800f36c:	460e      	mov	r6, r1
 800f36e:	3901      	subs	r1, #1
 800f370:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f374:	2b30      	cmp	r3, #48	@ 0x30
 800f376:	d0f9      	beq.n	800f36c <_dtoa_r+0x554>
 800f378:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f37c:	e027      	b.n	800f3ce <_dtoa_r+0x5b6>
 800f37e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f382:	e7d5      	b.n	800f330 <_dtoa_r+0x518>
 800f384:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f388:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f38c:	463e      	mov	r6, r7
 800f38e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f392:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f396:	ee15 3a10 	vmov	r3, s10
 800f39a:	3330      	adds	r3, #48	@ 0x30
 800f39c:	f806 3b01 	strb.w	r3, [r6], #1
 800f3a0:	1bf3      	subs	r3, r6, r7
 800f3a2:	459a      	cmp	sl, r3
 800f3a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f3a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f3ac:	d132      	bne.n	800f414 <_dtoa_r+0x5fc>
 800f3ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f3b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ba:	dc18      	bgt.n	800f3ee <_dtoa_r+0x5d6>
 800f3bc:	eeb4 7b46 	vcmp.f64	d7, d6
 800f3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c4:	d103      	bne.n	800f3ce <_dtoa_r+0x5b6>
 800f3c6:	ee15 3a10 	vmov	r3, s10
 800f3ca:	07db      	lsls	r3, r3, #31
 800f3cc:	d40f      	bmi.n	800f3ee <_dtoa_r+0x5d6>
 800f3ce:	9901      	ldr	r1, [sp, #4]
 800f3d0:	4648      	mov	r0, r9
 800f3d2:	f000 fbbf 	bl	800fb54 <_Bfree>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3da:	7033      	strb	r3, [r6, #0]
 800f3dc:	f108 0301 	add.w	r3, r8, #1
 800f3e0:	6013      	str	r3, [r2, #0]
 800f3e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f000 824b 	beq.w	800f880 <_dtoa_r+0xa68>
 800f3ea:	601e      	str	r6, [r3, #0]
 800f3ec:	e248      	b.n	800f880 <_dtoa_r+0xa68>
 800f3ee:	f8cd 8014 	str.w	r8, [sp, #20]
 800f3f2:	4633      	mov	r3, r6
 800f3f4:	461e      	mov	r6, r3
 800f3f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3fa:	2a39      	cmp	r2, #57	@ 0x39
 800f3fc:	d106      	bne.n	800f40c <_dtoa_r+0x5f4>
 800f3fe:	429f      	cmp	r7, r3
 800f400:	d1f8      	bne.n	800f3f4 <_dtoa_r+0x5dc>
 800f402:	9a05      	ldr	r2, [sp, #20]
 800f404:	3201      	adds	r2, #1
 800f406:	9205      	str	r2, [sp, #20]
 800f408:	2230      	movs	r2, #48	@ 0x30
 800f40a:	703a      	strb	r2, [r7, #0]
 800f40c:	781a      	ldrb	r2, [r3, #0]
 800f40e:	3201      	adds	r2, #1
 800f410:	701a      	strb	r2, [r3, #0]
 800f412:	e7b1      	b.n	800f378 <_dtoa_r+0x560>
 800f414:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f418:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f420:	d1b5      	bne.n	800f38e <_dtoa_r+0x576>
 800f422:	e7d4      	b.n	800f3ce <_dtoa_r+0x5b6>
 800f424:	08012ce8 	.word	0x08012ce8
 800f428:	08012cc0 	.word	0x08012cc0
 800f42c:	9908      	ldr	r1, [sp, #32]
 800f42e:	2900      	cmp	r1, #0
 800f430:	f000 80e9 	beq.w	800f606 <_dtoa_r+0x7ee>
 800f434:	9907      	ldr	r1, [sp, #28]
 800f436:	2901      	cmp	r1, #1
 800f438:	f300 80cb 	bgt.w	800f5d2 <_dtoa_r+0x7ba>
 800f43c:	2d00      	cmp	r5, #0
 800f43e:	f000 80c4 	beq.w	800f5ca <_dtoa_r+0x7b2>
 800f442:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f446:	9e04      	ldr	r6, [sp, #16]
 800f448:	461c      	mov	r4, r3
 800f44a:	9305      	str	r3, [sp, #20]
 800f44c:	9b04      	ldr	r3, [sp, #16]
 800f44e:	4413      	add	r3, r2
 800f450:	9304      	str	r3, [sp, #16]
 800f452:	9b06      	ldr	r3, [sp, #24]
 800f454:	2101      	movs	r1, #1
 800f456:	4413      	add	r3, r2
 800f458:	4648      	mov	r0, r9
 800f45a:	9306      	str	r3, [sp, #24]
 800f45c:	f000 fc78 	bl	800fd50 <__i2b>
 800f460:	9b05      	ldr	r3, [sp, #20]
 800f462:	4605      	mov	r5, r0
 800f464:	b166      	cbz	r6, 800f480 <_dtoa_r+0x668>
 800f466:	9a06      	ldr	r2, [sp, #24]
 800f468:	2a00      	cmp	r2, #0
 800f46a:	dd09      	ble.n	800f480 <_dtoa_r+0x668>
 800f46c:	42b2      	cmp	r2, r6
 800f46e:	9904      	ldr	r1, [sp, #16]
 800f470:	bfa8      	it	ge
 800f472:	4632      	movge	r2, r6
 800f474:	1a89      	subs	r1, r1, r2
 800f476:	9104      	str	r1, [sp, #16]
 800f478:	9906      	ldr	r1, [sp, #24]
 800f47a:	1ab6      	subs	r6, r6, r2
 800f47c:	1a8a      	subs	r2, r1, r2
 800f47e:	9206      	str	r2, [sp, #24]
 800f480:	b30b      	cbz	r3, 800f4c6 <_dtoa_r+0x6ae>
 800f482:	9a08      	ldr	r2, [sp, #32]
 800f484:	2a00      	cmp	r2, #0
 800f486:	f000 80c5 	beq.w	800f614 <_dtoa_r+0x7fc>
 800f48a:	2c00      	cmp	r4, #0
 800f48c:	f000 80bf 	beq.w	800f60e <_dtoa_r+0x7f6>
 800f490:	4629      	mov	r1, r5
 800f492:	4622      	mov	r2, r4
 800f494:	4648      	mov	r0, r9
 800f496:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f498:	f000 fd12 	bl	800fec0 <__pow5mult>
 800f49c:	9a01      	ldr	r2, [sp, #4]
 800f49e:	4601      	mov	r1, r0
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	4648      	mov	r0, r9
 800f4a4:	f000 fc6a 	bl	800fd7c <__multiply>
 800f4a8:	9901      	ldr	r1, [sp, #4]
 800f4aa:	9005      	str	r0, [sp, #20]
 800f4ac:	4648      	mov	r0, r9
 800f4ae:	f000 fb51 	bl	800fb54 <_Bfree>
 800f4b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4b4:	1b1b      	subs	r3, r3, r4
 800f4b6:	f000 80b0 	beq.w	800f61a <_dtoa_r+0x802>
 800f4ba:	9905      	ldr	r1, [sp, #20]
 800f4bc:	461a      	mov	r2, r3
 800f4be:	4648      	mov	r0, r9
 800f4c0:	f000 fcfe 	bl	800fec0 <__pow5mult>
 800f4c4:	9001      	str	r0, [sp, #4]
 800f4c6:	2101      	movs	r1, #1
 800f4c8:	4648      	mov	r0, r9
 800f4ca:	f000 fc41 	bl	800fd50 <__i2b>
 800f4ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4d0:	4604      	mov	r4, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f000 81da 	beq.w	800f88c <_dtoa_r+0xa74>
 800f4d8:	461a      	mov	r2, r3
 800f4da:	4601      	mov	r1, r0
 800f4dc:	4648      	mov	r0, r9
 800f4de:	f000 fcef 	bl	800fec0 <__pow5mult>
 800f4e2:	9b07      	ldr	r3, [sp, #28]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	f300 80a0 	bgt.w	800f62c <_dtoa_r+0x814>
 800f4ec:	9b02      	ldr	r3, [sp, #8]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f040 8096 	bne.w	800f620 <_dtoa_r+0x808>
 800f4f4:	9b03      	ldr	r3, [sp, #12]
 800f4f6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f4fa:	2a00      	cmp	r2, #0
 800f4fc:	f040 8092 	bne.w	800f624 <_dtoa_r+0x80c>
 800f500:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f504:	0d12      	lsrs	r2, r2, #20
 800f506:	0512      	lsls	r2, r2, #20
 800f508:	2a00      	cmp	r2, #0
 800f50a:	f000 808d 	beq.w	800f628 <_dtoa_r+0x810>
 800f50e:	9b04      	ldr	r3, [sp, #16]
 800f510:	3301      	adds	r3, #1
 800f512:	9304      	str	r3, [sp, #16]
 800f514:	9b06      	ldr	r3, [sp, #24]
 800f516:	3301      	adds	r3, #1
 800f518:	9306      	str	r3, [sp, #24]
 800f51a:	2301      	movs	r3, #1
 800f51c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f51e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f520:	2b00      	cmp	r3, #0
 800f522:	f000 81b9 	beq.w	800f898 <_dtoa_r+0xa80>
 800f526:	6922      	ldr	r2, [r4, #16]
 800f528:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f52c:	6910      	ldr	r0, [r2, #16]
 800f52e:	f000 fbc3 	bl	800fcb8 <__hi0bits>
 800f532:	f1c0 0020 	rsb	r0, r0, #32
 800f536:	9b06      	ldr	r3, [sp, #24]
 800f538:	4418      	add	r0, r3
 800f53a:	f010 001f 	ands.w	r0, r0, #31
 800f53e:	f000 8081 	beq.w	800f644 <_dtoa_r+0x82c>
 800f542:	f1c0 0220 	rsb	r2, r0, #32
 800f546:	2a04      	cmp	r2, #4
 800f548:	dd73      	ble.n	800f632 <_dtoa_r+0x81a>
 800f54a:	9b04      	ldr	r3, [sp, #16]
 800f54c:	f1c0 001c 	rsb	r0, r0, #28
 800f550:	4403      	add	r3, r0
 800f552:	9304      	str	r3, [sp, #16]
 800f554:	9b06      	ldr	r3, [sp, #24]
 800f556:	4406      	add	r6, r0
 800f558:	4403      	add	r3, r0
 800f55a:	9306      	str	r3, [sp, #24]
 800f55c:	9b04      	ldr	r3, [sp, #16]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	dd05      	ble.n	800f56e <_dtoa_r+0x756>
 800f562:	9901      	ldr	r1, [sp, #4]
 800f564:	461a      	mov	r2, r3
 800f566:	4648      	mov	r0, r9
 800f568:	f000 fd04 	bl	800ff74 <__lshift>
 800f56c:	9001      	str	r0, [sp, #4]
 800f56e:	9b06      	ldr	r3, [sp, #24]
 800f570:	2b00      	cmp	r3, #0
 800f572:	dd05      	ble.n	800f580 <_dtoa_r+0x768>
 800f574:	4621      	mov	r1, r4
 800f576:	461a      	mov	r2, r3
 800f578:	4648      	mov	r0, r9
 800f57a:	f000 fcfb 	bl	800ff74 <__lshift>
 800f57e:	4604      	mov	r4, r0
 800f580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f582:	2b00      	cmp	r3, #0
 800f584:	d060      	beq.n	800f648 <_dtoa_r+0x830>
 800f586:	9801      	ldr	r0, [sp, #4]
 800f588:	4621      	mov	r1, r4
 800f58a:	f000 fd5f 	bl	801004c <__mcmp>
 800f58e:	2800      	cmp	r0, #0
 800f590:	da5a      	bge.n	800f648 <_dtoa_r+0x830>
 800f592:	f108 33ff 	add.w	r3, r8, #4294967295
 800f596:	9305      	str	r3, [sp, #20]
 800f598:	9901      	ldr	r1, [sp, #4]
 800f59a:	2300      	movs	r3, #0
 800f59c:	220a      	movs	r2, #10
 800f59e:	4648      	mov	r0, r9
 800f5a0:	f000 fafa 	bl	800fb98 <__multadd>
 800f5a4:	9b08      	ldr	r3, [sp, #32]
 800f5a6:	9001      	str	r0, [sp, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 8177 	beq.w	800f89c <_dtoa_r+0xa84>
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	220a      	movs	r2, #10
 800f5b4:	4648      	mov	r0, r9
 800f5b6:	f000 faef 	bl	800fb98 <__multadd>
 800f5ba:	f1bb 0f00 	cmp.w	fp, #0
 800f5be:	4605      	mov	r5, r0
 800f5c0:	dc6e      	bgt.n	800f6a0 <_dtoa_r+0x888>
 800f5c2:	9b07      	ldr	r3, [sp, #28]
 800f5c4:	2b02      	cmp	r3, #2
 800f5c6:	dc48      	bgt.n	800f65a <_dtoa_r+0x842>
 800f5c8:	e06a      	b.n	800f6a0 <_dtoa_r+0x888>
 800f5ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f5d0:	e739      	b.n	800f446 <_dtoa_r+0x62e>
 800f5d2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f5d6:	42a3      	cmp	r3, r4
 800f5d8:	db07      	blt.n	800f5ea <_dtoa_r+0x7d2>
 800f5da:	f1ba 0f00 	cmp.w	sl, #0
 800f5de:	eba3 0404 	sub.w	r4, r3, r4
 800f5e2:	db0b      	blt.n	800f5fc <_dtoa_r+0x7e4>
 800f5e4:	9e04      	ldr	r6, [sp, #16]
 800f5e6:	4652      	mov	r2, sl
 800f5e8:	e72f      	b.n	800f44a <_dtoa_r+0x632>
 800f5ea:	1ae2      	subs	r2, r4, r3
 800f5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5ee:	9e04      	ldr	r6, [sp, #16]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5f4:	4652      	mov	r2, sl
 800f5f6:	4623      	mov	r3, r4
 800f5f8:	2400      	movs	r4, #0
 800f5fa:	e726      	b.n	800f44a <_dtoa_r+0x632>
 800f5fc:	9a04      	ldr	r2, [sp, #16]
 800f5fe:	eba2 060a 	sub.w	r6, r2, sl
 800f602:	2200      	movs	r2, #0
 800f604:	e721      	b.n	800f44a <_dtoa_r+0x632>
 800f606:	9e04      	ldr	r6, [sp, #16]
 800f608:	9d08      	ldr	r5, [sp, #32]
 800f60a:	461c      	mov	r4, r3
 800f60c:	e72a      	b.n	800f464 <_dtoa_r+0x64c>
 800f60e:	9a01      	ldr	r2, [sp, #4]
 800f610:	9205      	str	r2, [sp, #20]
 800f612:	e752      	b.n	800f4ba <_dtoa_r+0x6a2>
 800f614:	9901      	ldr	r1, [sp, #4]
 800f616:	461a      	mov	r2, r3
 800f618:	e751      	b.n	800f4be <_dtoa_r+0x6a6>
 800f61a:	9b05      	ldr	r3, [sp, #20]
 800f61c:	9301      	str	r3, [sp, #4]
 800f61e:	e752      	b.n	800f4c6 <_dtoa_r+0x6ae>
 800f620:	2300      	movs	r3, #0
 800f622:	e77b      	b.n	800f51c <_dtoa_r+0x704>
 800f624:	9b02      	ldr	r3, [sp, #8]
 800f626:	e779      	b.n	800f51c <_dtoa_r+0x704>
 800f628:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f62a:	e778      	b.n	800f51e <_dtoa_r+0x706>
 800f62c:	2300      	movs	r3, #0
 800f62e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f630:	e779      	b.n	800f526 <_dtoa_r+0x70e>
 800f632:	d093      	beq.n	800f55c <_dtoa_r+0x744>
 800f634:	9b04      	ldr	r3, [sp, #16]
 800f636:	321c      	adds	r2, #28
 800f638:	4413      	add	r3, r2
 800f63a:	9304      	str	r3, [sp, #16]
 800f63c:	9b06      	ldr	r3, [sp, #24]
 800f63e:	4416      	add	r6, r2
 800f640:	4413      	add	r3, r2
 800f642:	e78a      	b.n	800f55a <_dtoa_r+0x742>
 800f644:	4602      	mov	r2, r0
 800f646:	e7f5      	b.n	800f634 <_dtoa_r+0x81c>
 800f648:	f1ba 0f00 	cmp.w	sl, #0
 800f64c:	f8cd 8014 	str.w	r8, [sp, #20]
 800f650:	46d3      	mov	fp, sl
 800f652:	dc21      	bgt.n	800f698 <_dtoa_r+0x880>
 800f654:	9b07      	ldr	r3, [sp, #28]
 800f656:	2b02      	cmp	r3, #2
 800f658:	dd1e      	ble.n	800f698 <_dtoa_r+0x880>
 800f65a:	f1bb 0f00 	cmp.w	fp, #0
 800f65e:	f47f addc 	bne.w	800f21a <_dtoa_r+0x402>
 800f662:	4621      	mov	r1, r4
 800f664:	465b      	mov	r3, fp
 800f666:	2205      	movs	r2, #5
 800f668:	4648      	mov	r0, r9
 800f66a:	f000 fa95 	bl	800fb98 <__multadd>
 800f66e:	4601      	mov	r1, r0
 800f670:	4604      	mov	r4, r0
 800f672:	9801      	ldr	r0, [sp, #4]
 800f674:	f000 fcea 	bl	801004c <__mcmp>
 800f678:	2800      	cmp	r0, #0
 800f67a:	f77f adce 	ble.w	800f21a <_dtoa_r+0x402>
 800f67e:	463e      	mov	r6, r7
 800f680:	2331      	movs	r3, #49	@ 0x31
 800f682:	f806 3b01 	strb.w	r3, [r6], #1
 800f686:	9b05      	ldr	r3, [sp, #20]
 800f688:	3301      	adds	r3, #1
 800f68a:	9305      	str	r3, [sp, #20]
 800f68c:	e5c9      	b.n	800f222 <_dtoa_r+0x40a>
 800f68e:	f8cd 8014 	str.w	r8, [sp, #20]
 800f692:	4654      	mov	r4, sl
 800f694:	4625      	mov	r5, r4
 800f696:	e7f2      	b.n	800f67e <_dtoa_r+0x866>
 800f698:	9b08      	ldr	r3, [sp, #32]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f000 8102 	beq.w	800f8a4 <_dtoa_r+0xa8c>
 800f6a0:	2e00      	cmp	r6, #0
 800f6a2:	dd05      	ble.n	800f6b0 <_dtoa_r+0x898>
 800f6a4:	4629      	mov	r1, r5
 800f6a6:	4632      	mov	r2, r6
 800f6a8:	4648      	mov	r0, r9
 800f6aa:	f000 fc63 	bl	800ff74 <__lshift>
 800f6ae:	4605      	mov	r5, r0
 800f6b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d058      	beq.n	800f768 <_dtoa_r+0x950>
 800f6b6:	6869      	ldr	r1, [r5, #4]
 800f6b8:	4648      	mov	r0, r9
 800f6ba:	f000 fa0b 	bl	800fad4 <_Balloc>
 800f6be:	4606      	mov	r6, r0
 800f6c0:	b928      	cbnz	r0, 800f6ce <_dtoa_r+0x8b6>
 800f6c2:	4b82      	ldr	r3, [pc, #520]	@ (800f8cc <_dtoa_r+0xab4>)
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f6ca:	f7ff bbbe 	b.w	800ee4a <_dtoa_r+0x32>
 800f6ce:	692a      	ldr	r2, [r5, #16]
 800f6d0:	3202      	adds	r2, #2
 800f6d2:	0092      	lsls	r2, r2, #2
 800f6d4:	f105 010c 	add.w	r1, r5, #12
 800f6d8:	300c      	adds	r0, #12
 800f6da:	f002 fa99 	bl	8011c10 <memcpy>
 800f6de:	2201      	movs	r2, #1
 800f6e0:	4631      	mov	r1, r6
 800f6e2:	4648      	mov	r0, r9
 800f6e4:	f000 fc46 	bl	800ff74 <__lshift>
 800f6e8:	1c7b      	adds	r3, r7, #1
 800f6ea:	9304      	str	r3, [sp, #16]
 800f6ec:	eb07 030b 	add.w	r3, r7, fp
 800f6f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6f2:	9b02      	ldr	r3, [sp, #8]
 800f6f4:	f003 0301 	and.w	r3, r3, #1
 800f6f8:	46a8      	mov	r8, r5
 800f6fa:	9308      	str	r3, [sp, #32]
 800f6fc:	4605      	mov	r5, r0
 800f6fe:	9b04      	ldr	r3, [sp, #16]
 800f700:	9801      	ldr	r0, [sp, #4]
 800f702:	4621      	mov	r1, r4
 800f704:	f103 3bff 	add.w	fp, r3, #4294967295
 800f708:	f7ff fafc 	bl	800ed04 <quorem>
 800f70c:	4641      	mov	r1, r8
 800f70e:	9002      	str	r0, [sp, #8]
 800f710:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f714:	9801      	ldr	r0, [sp, #4]
 800f716:	f000 fc99 	bl	801004c <__mcmp>
 800f71a:	462a      	mov	r2, r5
 800f71c:	9006      	str	r0, [sp, #24]
 800f71e:	4621      	mov	r1, r4
 800f720:	4648      	mov	r0, r9
 800f722:	f000 fcaf 	bl	8010084 <__mdiff>
 800f726:	68c2      	ldr	r2, [r0, #12]
 800f728:	4606      	mov	r6, r0
 800f72a:	b9fa      	cbnz	r2, 800f76c <_dtoa_r+0x954>
 800f72c:	4601      	mov	r1, r0
 800f72e:	9801      	ldr	r0, [sp, #4]
 800f730:	f000 fc8c 	bl	801004c <__mcmp>
 800f734:	4602      	mov	r2, r0
 800f736:	4631      	mov	r1, r6
 800f738:	4648      	mov	r0, r9
 800f73a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f73c:	f000 fa0a 	bl	800fb54 <_Bfree>
 800f740:	9b07      	ldr	r3, [sp, #28]
 800f742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f744:	9e04      	ldr	r6, [sp, #16]
 800f746:	ea42 0103 	orr.w	r1, r2, r3
 800f74a:	9b08      	ldr	r3, [sp, #32]
 800f74c:	4319      	orrs	r1, r3
 800f74e:	d10f      	bne.n	800f770 <_dtoa_r+0x958>
 800f750:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f754:	d028      	beq.n	800f7a8 <_dtoa_r+0x990>
 800f756:	9b06      	ldr	r3, [sp, #24]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	dd02      	ble.n	800f762 <_dtoa_r+0x94a>
 800f75c:	9b02      	ldr	r3, [sp, #8]
 800f75e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f762:	f88b a000 	strb.w	sl, [fp]
 800f766:	e55e      	b.n	800f226 <_dtoa_r+0x40e>
 800f768:	4628      	mov	r0, r5
 800f76a:	e7bd      	b.n	800f6e8 <_dtoa_r+0x8d0>
 800f76c:	2201      	movs	r2, #1
 800f76e:	e7e2      	b.n	800f736 <_dtoa_r+0x91e>
 800f770:	9b06      	ldr	r3, [sp, #24]
 800f772:	2b00      	cmp	r3, #0
 800f774:	db04      	blt.n	800f780 <_dtoa_r+0x968>
 800f776:	9907      	ldr	r1, [sp, #28]
 800f778:	430b      	orrs	r3, r1
 800f77a:	9908      	ldr	r1, [sp, #32]
 800f77c:	430b      	orrs	r3, r1
 800f77e:	d120      	bne.n	800f7c2 <_dtoa_r+0x9aa>
 800f780:	2a00      	cmp	r2, #0
 800f782:	ddee      	ble.n	800f762 <_dtoa_r+0x94a>
 800f784:	9901      	ldr	r1, [sp, #4]
 800f786:	2201      	movs	r2, #1
 800f788:	4648      	mov	r0, r9
 800f78a:	f000 fbf3 	bl	800ff74 <__lshift>
 800f78e:	4621      	mov	r1, r4
 800f790:	9001      	str	r0, [sp, #4]
 800f792:	f000 fc5b 	bl	801004c <__mcmp>
 800f796:	2800      	cmp	r0, #0
 800f798:	dc03      	bgt.n	800f7a2 <_dtoa_r+0x98a>
 800f79a:	d1e2      	bne.n	800f762 <_dtoa_r+0x94a>
 800f79c:	f01a 0f01 	tst.w	sl, #1
 800f7a0:	d0df      	beq.n	800f762 <_dtoa_r+0x94a>
 800f7a2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f7a6:	d1d9      	bne.n	800f75c <_dtoa_r+0x944>
 800f7a8:	2339      	movs	r3, #57	@ 0x39
 800f7aa:	f88b 3000 	strb.w	r3, [fp]
 800f7ae:	4633      	mov	r3, r6
 800f7b0:	461e      	mov	r6, r3
 800f7b2:	3b01      	subs	r3, #1
 800f7b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f7b8:	2a39      	cmp	r2, #57	@ 0x39
 800f7ba:	d052      	beq.n	800f862 <_dtoa_r+0xa4a>
 800f7bc:	3201      	adds	r2, #1
 800f7be:	701a      	strb	r2, [r3, #0]
 800f7c0:	e531      	b.n	800f226 <_dtoa_r+0x40e>
 800f7c2:	2a00      	cmp	r2, #0
 800f7c4:	dd07      	ble.n	800f7d6 <_dtoa_r+0x9be>
 800f7c6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f7ca:	d0ed      	beq.n	800f7a8 <_dtoa_r+0x990>
 800f7cc:	f10a 0301 	add.w	r3, sl, #1
 800f7d0:	f88b 3000 	strb.w	r3, [fp]
 800f7d4:	e527      	b.n	800f226 <_dtoa_r+0x40e>
 800f7d6:	9b04      	ldr	r3, [sp, #16]
 800f7d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7da:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d029      	beq.n	800f836 <_dtoa_r+0xa1e>
 800f7e2:	9901      	ldr	r1, [sp, #4]
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	220a      	movs	r2, #10
 800f7e8:	4648      	mov	r0, r9
 800f7ea:	f000 f9d5 	bl	800fb98 <__multadd>
 800f7ee:	45a8      	cmp	r8, r5
 800f7f0:	9001      	str	r0, [sp, #4]
 800f7f2:	f04f 0300 	mov.w	r3, #0
 800f7f6:	f04f 020a 	mov.w	r2, #10
 800f7fa:	4641      	mov	r1, r8
 800f7fc:	4648      	mov	r0, r9
 800f7fe:	d107      	bne.n	800f810 <_dtoa_r+0x9f8>
 800f800:	f000 f9ca 	bl	800fb98 <__multadd>
 800f804:	4680      	mov	r8, r0
 800f806:	4605      	mov	r5, r0
 800f808:	9b04      	ldr	r3, [sp, #16]
 800f80a:	3301      	adds	r3, #1
 800f80c:	9304      	str	r3, [sp, #16]
 800f80e:	e776      	b.n	800f6fe <_dtoa_r+0x8e6>
 800f810:	f000 f9c2 	bl	800fb98 <__multadd>
 800f814:	4629      	mov	r1, r5
 800f816:	4680      	mov	r8, r0
 800f818:	2300      	movs	r3, #0
 800f81a:	220a      	movs	r2, #10
 800f81c:	4648      	mov	r0, r9
 800f81e:	f000 f9bb 	bl	800fb98 <__multadd>
 800f822:	4605      	mov	r5, r0
 800f824:	e7f0      	b.n	800f808 <_dtoa_r+0x9f0>
 800f826:	f1bb 0f00 	cmp.w	fp, #0
 800f82a:	bfcc      	ite	gt
 800f82c:	465e      	movgt	r6, fp
 800f82e:	2601      	movle	r6, #1
 800f830:	443e      	add	r6, r7
 800f832:	f04f 0800 	mov.w	r8, #0
 800f836:	9901      	ldr	r1, [sp, #4]
 800f838:	2201      	movs	r2, #1
 800f83a:	4648      	mov	r0, r9
 800f83c:	f000 fb9a 	bl	800ff74 <__lshift>
 800f840:	4621      	mov	r1, r4
 800f842:	9001      	str	r0, [sp, #4]
 800f844:	f000 fc02 	bl	801004c <__mcmp>
 800f848:	2800      	cmp	r0, #0
 800f84a:	dcb0      	bgt.n	800f7ae <_dtoa_r+0x996>
 800f84c:	d102      	bne.n	800f854 <_dtoa_r+0xa3c>
 800f84e:	f01a 0f01 	tst.w	sl, #1
 800f852:	d1ac      	bne.n	800f7ae <_dtoa_r+0x996>
 800f854:	4633      	mov	r3, r6
 800f856:	461e      	mov	r6, r3
 800f858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f85c:	2a30      	cmp	r2, #48	@ 0x30
 800f85e:	d0fa      	beq.n	800f856 <_dtoa_r+0xa3e>
 800f860:	e4e1      	b.n	800f226 <_dtoa_r+0x40e>
 800f862:	429f      	cmp	r7, r3
 800f864:	d1a4      	bne.n	800f7b0 <_dtoa_r+0x998>
 800f866:	9b05      	ldr	r3, [sp, #20]
 800f868:	3301      	adds	r3, #1
 800f86a:	9305      	str	r3, [sp, #20]
 800f86c:	2331      	movs	r3, #49	@ 0x31
 800f86e:	703b      	strb	r3, [r7, #0]
 800f870:	e4d9      	b.n	800f226 <_dtoa_r+0x40e>
 800f872:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f874:	4f16      	ldr	r7, [pc, #88]	@ (800f8d0 <_dtoa_r+0xab8>)
 800f876:	b11b      	cbz	r3, 800f880 <_dtoa_r+0xa68>
 800f878:	f107 0308 	add.w	r3, r7, #8
 800f87c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f87e:	6013      	str	r3, [r2, #0]
 800f880:	4638      	mov	r0, r7
 800f882:	b011      	add	sp, #68	@ 0x44
 800f884:	ecbd 8b02 	vpop	{d8}
 800f888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88c:	9b07      	ldr	r3, [sp, #28]
 800f88e:	2b01      	cmp	r3, #1
 800f890:	f77f ae2c 	ble.w	800f4ec <_dtoa_r+0x6d4>
 800f894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f896:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f898:	2001      	movs	r0, #1
 800f89a:	e64c      	b.n	800f536 <_dtoa_r+0x71e>
 800f89c:	f1bb 0f00 	cmp.w	fp, #0
 800f8a0:	f77f aed8 	ble.w	800f654 <_dtoa_r+0x83c>
 800f8a4:	463e      	mov	r6, r7
 800f8a6:	9801      	ldr	r0, [sp, #4]
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	f7ff fa2b 	bl	800ed04 <quorem>
 800f8ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f8b2:	f806 ab01 	strb.w	sl, [r6], #1
 800f8b6:	1bf2      	subs	r2, r6, r7
 800f8b8:	4593      	cmp	fp, r2
 800f8ba:	ddb4      	ble.n	800f826 <_dtoa_r+0xa0e>
 800f8bc:	9901      	ldr	r1, [sp, #4]
 800f8be:	2300      	movs	r3, #0
 800f8c0:	220a      	movs	r2, #10
 800f8c2:	4648      	mov	r0, r9
 800f8c4:	f000 f968 	bl	800fb98 <__multadd>
 800f8c8:	9001      	str	r0, [sp, #4]
 800f8ca:	e7ec      	b.n	800f8a6 <_dtoa_r+0xa8e>
 800f8cc:	08012b77 	.word	0x08012b77
 800f8d0:	08012afb 	.word	0x08012afb

0800f8d4 <_free_r>:
 800f8d4:	b538      	push	{r3, r4, r5, lr}
 800f8d6:	4605      	mov	r5, r0
 800f8d8:	2900      	cmp	r1, #0
 800f8da:	d041      	beq.n	800f960 <_free_r+0x8c>
 800f8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8e0:	1f0c      	subs	r4, r1, #4
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	bfb8      	it	lt
 800f8e6:	18e4      	addlt	r4, r4, r3
 800f8e8:	f000 f8e8 	bl	800fabc <__malloc_lock>
 800f8ec:	4a1d      	ldr	r2, [pc, #116]	@ (800f964 <_free_r+0x90>)
 800f8ee:	6813      	ldr	r3, [r2, #0]
 800f8f0:	b933      	cbnz	r3, 800f900 <_free_r+0x2c>
 800f8f2:	6063      	str	r3, [r4, #4]
 800f8f4:	6014      	str	r4, [r2, #0]
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8fc:	f000 b8e4 	b.w	800fac8 <__malloc_unlock>
 800f900:	42a3      	cmp	r3, r4
 800f902:	d908      	bls.n	800f916 <_free_r+0x42>
 800f904:	6820      	ldr	r0, [r4, #0]
 800f906:	1821      	adds	r1, r4, r0
 800f908:	428b      	cmp	r3, r1
 800f90a:	bf01      	itttt	eq
 800f90c:	6819      	ldreq	r1, [r3, #0]
 800f90e:	685b      	ldreq	r3, [r3, #4]
 800f910:	1809      	addeq	r1, r1, r0
 800f912:	6021      	streq	r1, [r4, #0]
 800f914:	e7ed      	b.n	800f8f2 <_free_r+0x1e>
 800f916:	461a      	mov	r2, r3
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	b10b      	cbz	r3, 800f920 <_free_r+0x4c>
 800f91c:	42a3      	cmp	r3, r4
 800f91e:	d9fa      	bls.n	800f916 <_free_r+0x42>
 800f920:	6811      	ldr	r1, [r2, #0]
 800f922:	1850      	adds	r0, r2, r1
 800f924:	42a0      	cmp	r0, r4
 800f926:	d10b      	bne.n	800f940 <_free_r+0x6c>
 800f928:	6820      	ldr	r0, [r4, #0]
 800f92a:	4401      	add	r1, r0
 800f92c:	1850      	adds	r0, r2, r1
 800f92e:	4283      	cmp	r3, r0
 800f930:	6011      	str	r1, [r2, #0]
 800f932:	d1e0      	bne.n	800f8f6 <_free_r+0x22>
 800f934:	6818      	ldr	r0, [r3, #0]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	6053      	str	r3, [r2, #4]
 800f93a:	4408      	add	r0, r1
 800f93c:	6010      	str	r0, [r2, #0]
 800f93e:	e7da      	b.n	800f8f6 <_free_r+0x22>
 800f940:	d902      	bls.n	800f948 <_free_r+0x74>
 800f942:	230c      	movs	r3, #12
 800f944:	602b      	str	r3, [r5, #0]
 800f946:	e7d6      	b.n	800f8f6 <_free_r+0x22>
 800f948:	6820      	ldr	r0, [r4, #0]
 800f94a:	1821      	adds	r1, r4, r0
 800f94c:	428b      	cmp	r3, r1
 800f94e:	bf04      	itt	eq
 800f950:	6819      	ldreq	r1, [r3, #0]
 800f952:	685b      	ldreq	r3, [r3, #4]
 800f954:	6063      	str	r3, [r4, #4]
 800f956:	bf04      	itt	eq
 800f958:	1809      	addeq	r1, r1, r0
 800f95a:	6021      	streq	r1, [r4, #0]
 800f95c:	6054      	str	r4, [r2, #4]
 800f95e:	e7ca      	b.n	800f8f6 <_free_r+0x22>
 800f960:	bd38      	pop	{r3, r4, r5, pc}
 800f962:	bf00      	nop
 800f964:	24000a68 	.word	0x24000a68

0800f968 <malloc>:
 800f968:	4b02      	ldr	r3, [pc, #8]	@ (800f974 <malloc+0xc>)
 800f96a:	4601      	mov	r1, r0
 800f96c:	6818      	ldr	r0, [r3, #0]
 800f96e:	f000 b825 	b.w	800f9bc <_malloc_r>
 800f972:	bf00      	nop
 800f974:	24000030 	.word	0x24000030

0800f978 <sbrk_aligned>:
 800f978:	b570      	push	{r4, r5, r6, lr}
 800f97a:	4e0f      	ldr	r6, [pc, #60]	@ (800f9b8 <sbrk_aligned+0x40>)
 800f97c:	460c      	mov	r4, r1
 800f97e:	6831      	ldr	r1, [r6, #0]
 800f980:	4605      	mov	r5, r0
 800f982:	b911      	cbnz	r1, 800f98a <sbrk_aligned+0x12>
 800f984:	f002 f934 	bl	8011bf0 <_sbrk_r>
 800f988:	6030      	str	r0, [r6, #0]
 800f98a:	4621      	mov	r1, r4
 800f98c:	4628      	mov	r0, r5
 800f98e:	f002 f92f 	bl	8011bf0 <_sbrk_r>
 800f992:	1c43      	adds	r3, r0, #1
 800f994:	d103      	bne.n	800f99e <sbrk_aligned+0x26>
 800f996:	f04f 34ff 	mov.w	r4, #4294967295
 800f99a:	4620      	mov	r0, r4
 800f99c:	bd70      	pop	{r4, r5, r6, pc}
 800f99e:	1cc4      	adds	r4, r0, #3
 800f9a0:	f024 0403 	bic.w	r4, r4, #3
 800f9a4:	42a0      	cmp	r0, r4
 800f9a6:	d0f8      	beq.n	800f99a <sbrk_aligned+0x22>
 800f9a8:	1a21      	subs	r1, r4, r0
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f002 f920 	bl	8011bf0 <_sbrk_r>
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	d1f2      	bne.n	800f99a <sbrk_aligned+0x22>
 800f9b4:	e7ef      	b.n	800f996 <sbrk_aligned+0x1e>
 800f9b6:	bf00      	nop
 800f9b8:	24000a64 	.word	0x24000a64

0800f9bc <_malloc_r>:
 800f9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9c0:	1ccd      	adds	r5, r1, #3
 800f9c2:	f025 0503 	bic.w	r5, r5, #3
 800f9c6:	3508      	adds	r5, #8
 800f9c8:	2d0c      	cmp	r5, #12
 800f9ca:	bf38      	it	cc
 800f9cc:	250c      	movcc	r5, #12
 800f9ce:	2d00      	cmp	r5, #0
 800f9d0:	4606      	mov	r6, r0
 800f9d2:	db01      	blt.n	800f9d8 <_malloc_r+0x1c>
 800f9d4:	42a9      	cmp	r1, r5
 800f9d6:	d904      	bls.n	800f9e2 <_malloc_r+0x26>
 800f9d8:	230c      	movs	r3, #12
 800f9da:	6033      	str	r3, [r6, #0]
 800f9dc:	2000      	movs	r0, #0
 800f9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fab8 <_malloc_r+0xfc>
 800f9e6:	f000 f869 	bl	800fabc <__malloc_lock>
 800f9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ee:	461c      	mov	r4, r3
 800f9f0:	bb44      	cbnz	r4, 800fa44 <_malloc_r+0x88>
 800f9f2:	4629      	mov	r1, r5
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f7ff ffbf 	bl	800f978 <sbrk_aligned>
 800f9fa:	1c43      	adds	r3, r0, #1
 800f9fc:	4604      	mov	r4, r0
 800f9fe:	d158      	bne.n	800fab2 <_malloc_r+0xf6>
 800fa00:	f8d8 4000 	ldr.w	r4, [r8]
 800fa04:	4627      	mov	r7, r4
 800fa06:	2f00      	cmp	r7, #0
 800fa08:	d143      	bne.n	800fa92 <_malloc_r+0xd6>
 800fa0a:	2c00      	cmp	r4, #0
 800fa0c:	d04b      	beq.n	800faa6 <_malloc_r+0xea>
 800fa0e:	6823      	ldr	r3, [r4, #0]
 800fa10:	4639      	mov	r1, r7
 800fa12:	4630      	mov	r0, r6
 800fa14:	eb04 0903 	add.w	r9, r4, r3
 800fa18:	f002 f8ea 	bl	8011bf0 <_sbrk_r>
 800fa1c:	4581      	cmp	r9, r0
 800fa1e:	d142      	bne.n	800faa6 <_malloc_r+0xea>
 800fa20:	6821      	ldr	r1, [r4, #0]
 800fa22:	1a6d      	subs	r5, r5, r1
 800fa24:	4629      	mov	r1, r5
 800fa26:	4630      	mov	r0, r6
 800fa28:	f7ff ffa6 	bl	800f978 <sbrk_aligned>
 800fa2c:	3001      	adds	r0, #1
 800fa2e:	d03a      	beq.n	800faa6 <_malloc_r+0xea>
 800fa30:	6823      	ldr	r3, [r4, #0]
 800fa32:	442b      	add	r3, r5
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	f8d8 3000 	ldr.w	r3, [r8]
 800fa3a:	685a      	ldr	r2, [r3, #4]
 800fa3c:	bb62      	cbnz	r2, 800fa98 <_malloc_r+0xdc>
 800fa3e:	f8c8 7000 	str.w	r7, [r8]
 800fa42:	e00f      	b.n	800fa64 <_malloc_r+0xa8>
 800fa44:	6822      	ldr	r2, [r4, #0]
 800fa46:	1b52      	subs	r2, r2, r5
 800fa48:	d420      	bmi.n	800fa8c <_malloc_r+0xd0>
 800fa4a:	2a0b      	cmp	r2, #11
 800fa4c:	d917      	bls.n	800fa7e <_malloc_r+0xc2>
 800fa4e:	1961      	adds	r1, r4, r5
 800fa50:	42a3      	cmp	r3, r4
 800fa52:	6025      	str	r5, [r4, #0]
 800fa54:	bf18      	it	ne
 800fa56:	6059      	strne	r1, [r3, #4]
 800fa58:	6863      	ldr	r3, [r4, #4]
 800fa5a:	bf08      	it	eq
 800fa5c:	f8c8 1000 	streq.w	r1, [r8]
 800fa60:	5162      	str	r2, [r4, r5]
 800fa62:	604b      	str	r3, [r1, #4]
 800fa64:	4630      	mov	r0, r6
 800fa66:	f000 f82f 	bl	800fac8 <__malloc_unlock>
 800fa6a:	f104 000b 	add.w	r0, r4, #11
 800fa6e:	1d23      	adds	r3, r4, #4
 800fa70:	f020 0007 	bic.w	r0, r0, #7
 800fa74:	1ac2      	subs	r2, r0, r3
 800fa76:	bf1c      	itt	ne
 800fa78:	1a1b      	subne	r3, r3, r0
 800fa7a:	50a3      	strne	r3, [r4, r2]
 800fa7c:	e7af      	b.n	800f9de <_malloc_r+0x22>
 800fa7e:	6862      	ldr	r2, [r4, #4]
 800fa80:	42a3      	cmp	r3, r4
 800fa82:	bf0c      	ite	eq
 800fa84:	f8c8 2000 	streq.w	r2, [r8]
 800fa88:	605a      	strne	r2, [r3, #4]
 800fa8a:	e7eb      	b.n	800fa64 <_malloc_r+0xa8>
 800fa8c:	4623      	mov	r3, r4
 800fa8e:	6864      	ldr	r4, [r4, #4]
 800fa90:	e7ae      	b.n	800f9f0 <_malloc_r+0x34>
 800fa92:	463c      	mov	r4, r7
 800fa94:	687f      	ldr	r7, [r7, #4]
 800fa96:	e7b6      	b.n	800fa06 <_malloc_r+0x4a>
 800fa98:	461a      	mov	r2, r3
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	42a3      	cmp	r3, r4
 800fa9e:	d1fb      	bne.n	800fa98 <_malloc_r+0xdc>
 800faa0:	2300      	movs	r3, #0
 800faa2:	6053      	str	r3, [r2, #4]
 800faa4:	e7de      	b.n	800fa64 <_malloc_r+0xa8>
 800faa6:	230c      	movs	r3, #12
 800faa8:	6033      	str	r3, [r6, #0]
 800faaa:	4630      	mov	r0, r6
 800faac:	f000 f80c 	bl	800fac8 <__malloc_unlock>
 800fab0:	e794      	b.n	800f9dc <_malloc_r+0x20>
 800fab2:	6005      	str	r5, [r0, #0]
 800fab4:	e7d6      	b.n	800fa64 <_malloc_r+0xa8>
 800fab6:	bf00      	nop
 800fab8:	24000a68 	.word	0x24000a68

0800fabc <__malloc_lock>:
 800fabc:	4801      	ldr	r0, [pc, #4]	@ (800fac4 <__malloc_lock+0x8>)
 800fabe:	f7ff b918 	b.w	800ecf2 <__retarget_lock_acquire_recursive>
 800fac2:	bf00      	nop
 800fac4:	24000a60 	.word	0x24000a60

0800fac8 <__malloc_unlock>:
 800fac8:	4801      	ldr	r0, [pc, #4]	@ (800fad0 <__malloc_unlock+0x8>)
 800faca:	f7ff b913 	b.w	800ecf4 <__retarget_lock_release_recursive>
 800face:	bf00      	nop
 800fad0:	24000a60 	.word	0x24000a60

0800fad4 <_Balloc>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	69c6      	ldr	r6, [r0, #28]
 800fad8:	4604      	mov	r4, r0
 800fada:	460d      	mov	r5, r1
 800fadc:	b976      	cbnz	r6, 800fafc <_Balloc+0x28>
 800fade:	2010      	movs	r0, #16
 800fae0:	f7ff ff42 	bl	800f968 <malloc>
 800fae4:	4602      	mov	r2, r0
 800fae6:	61e0      	str	r0, [r4, #28]
 800fae8:	b920      	cbnz	r0, 800faf4 <_Balloc+0x20>
 800faea:	4b18      	ldr	r3, [pc, #96]	@ (800fb4c <_Balloc+0x78>)
 800faec:	4818      	ldr	r0, [pc, #96]	@ (800fb50 <_Balloc+0x7c>)
 800faee:	216b      	movs	r1, #107	@ 0x6b
 800faf0:	f002 f8a6 	bl	8011c40 <__assert_func>
 800faf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800faf8:	6006      	str	r6, [r0, #0]
 800fafa:	60c6      	str	r6, [r0, #12]
 800fafc:	69e6      	ldr	r6, [r4, #28]
 800fafe:	68f3      	ldr	r3, [r6, #12]
 800fb00:	b183      	cbz	r3, 800fb24 <_Balloc+0x50>
 800fb02:	69e3      	ldr	r3, [r4, #28]
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb0a:	b9b8      	cbnz	r0, 800fb3c <_Balloc+0x68>
 800fb0c:	2101      	movs	r1, #1
 800fb0e:	fa01 f605 	lsl.w	r6, r1, r5
 800fb12:	1d72      	adds	r2, r6, #5
 800fb14:	0092      	lsls	r2, r2, #2
 800fb16:	4620      	mov	r0, r4
 800fb18:	f002 f8b0 	bl	8011c7c <_calloc_r>
 800fb1c:	b160      	cbz	r0, 800fb38 <_Balloc+0x64>
 800fb1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb22:	e00e      	b.n	800fb42 <_Balloc+0x6e>
 800fb24:	2221      	movs	r2, #33	@ 0x21
 800fb26:	2104      	movs	r1, #4
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f002 f8a7 	bl	8011c7c <_calloc_r>
 800fb2e:	69e3      	ldr	r3, [r4, #28]
 800fb30:	60f0      	str	r0, [r6, #12]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1e4      	bne.n	800fb02 <_Balloc+0x2e>
 800fb38:	2000      	movs	r0, #0
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}
 800fb3c:	6802      	ldr	r2, [r0, #0]
 800fb3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb42:	2300      	movs	r3, #0
 800fb44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb48:	e7f7      	b.n	800fb3a <_Balloc+0x66>
 800fb4a:	bf00      	nop
 800fb4c:	08012b08 	.word	0x08012b08
 800fb50:	08012b88 	.word	0x08012b88

0800fb54 <_Bfree>:
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	69c6      	ldr	r6, [r0, #28]
 800fb58:	4605      	mov	r5, r0
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	b976      	cbnz	r6, 800fb7c <_Bfree+0x28>
 800fb5e:	2010      	movs	r0, #16
 800fb60:	f7ff ff02 	bl	800f968 <malloc>
 800fb64:	4602      	mov	r2, r0
 800fb66:	61e8      	str	r0, [r5, #28]
 800fb68:	b920      	cbnz	r0, 800fb74 <_Bfree+0x20>
 800fb6a:	4b09      	ldr	r3, [pc, #36]	@ (800fb90 <_Bfree+0x3c>)
 800fb6c:	4809      	ldr	r0, [pc, #36]	@ (800fb94 <_Bfree+0x40>)
 800fb6e:	218f      	movs	r1, #143	@ 0x8f
 800fb70:	f002 f866 	bl	8011c40 <__assert_func>
 800fb74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb78:	6006      	str	r6, [r0, #0]
 800fb7a:	60c6      	str	r6, [r0, #12]
 800fb7c:	b13c      	cbz	r4, 800fb8e <_Bfree+0x3a>
 800fb7e:	69eb      	ldr	r3, [r5, #28]
 800fb80:	6862      	ldr	r2, [r4, #4]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb88:	6021      	str	r1, [r4, #0]
 800fb8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb8e:	bd70      	pop	{r4, r5, r6, pc}
 800fb90:	08012b08 	.word	0x08012b08
 800fb94:	08012b88 	.word	0x08012b88

0800fb98 <__multadd>:
 800fb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb9c:	690d      	ldr	r5, [r1, #16]
 800fb9e:	4607      	mov	r7, r0
 800fba0:	460c      	mov	r4, r1
 800fba2:	461e      	mov	r6, r3
 800fba4:	f101 0c14 	add.w	ip, r1, #20
 800fba8:	2000      	movs	r0, #0
 800fbaa:	f8dc 3000 	ldr.w	r3, [ip]
 800fbae:	b299      	uxth	r1, r3
 800fbb0:	fb02 6101 	mla	r1, r2, r1, r6
 800fbb4:	0c1e      	lsrs	r6, r3, #16
 800fbb6:	0c0b      	lsrs	r3, r1, #16
 800fbb8:	fb02 3306 	mla	r3, r2, r6, r3
 800fbbc:	b289      	uxth	r1, r1
 800fbbe:	3001      	adds	r0, #1
 800fbc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fbc4:	4285      	cmp	r5, r0
 800fbc6:	f84c 1b04 	str.w	r1, [ip], #4
 800fbca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fbce:	dcec      	bgt.n	800fbaa <__multadd+0x12>
 800fbd0:	b30e      	cbz	r6, 800fc16 <__multadd+0x7e>
 800fbd2:	68a3      	ldr	r3, [r4, #8]
 800fbd4:	42ab      	cmp	r3, r5
 800fbd6:	dc19      	bgt.n	800fc0c <__multadd+0x74>
 800fbd8:	6861      	ldr	r1, [r4, #4]
 800fbda:	4638      	mov	r0, r7
 800fbdc:	3101      	adds	r1, #1
 800fbde:	f7ff ff79 	bl	800fad4 <_Balloc>
 800fbe2:	4680      	mov	r8, r0
 800fbe4:	b928      	cbnz	r0, 800fbf2 <__multadd+0x5a>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	4b0c      	ldr	r3, [pc, #48]	@ (800fc1c <__multadd+0x84>)
 800fbea:	480d      	ldr	r0, [pc, #52]	@ (800fc20 <__multadd+0x88>)
 800fbec:	21ba      	movs	r1, #186	@ 0xba
 800fbee:	f002 f827 	bl	8011c40 <__assert_func>
 800fbf2:	6922      	ldr	r2, [r4, #16]
 800fbf4:	3202      	adds	r2, #2
 800fbf6:	f104 010c 	add.w	r1, r4, #12
 800fbfa:	0092      	lsls	r2, r2, #2
 800fbfc:	300c      	adds	r0, #12
 800fbfe:	f002 f807 	bl	8011c10 <memcpy>
 800fc02:	4621      	mov	r1, r4
 800fc04:	4638      	mov	r0, r7
 800fc06:	f7ff ffa5 	bl	800fb54 <_Bfree>
 800fc0a:	4644      	mov	r4, r8
 800fc0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc10:	3501      	adds	r5, #1
 800fc12:	615e      	str	r6, [r3, #20]
 800fc14:	6125      	str	r5, [r4, #16]
 800fc16:	4620      	mov	r0, r4
 800fc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc1c:	08012b77 	.word	0x08012b77
 800fc20:	08012b88 	.word	0x08012b88

0800fc24 <__s2b>:
 800fc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc28:	460c      	mov	r4, r1
 800fc2a:	4615      	mov	r5, r2
 800fc2c:	461f      	mov	r7, r3
 800fc2e:	2209      	movs	r2, #9
 800fc30:	3308      	adds	r3, #8
 800fc32:	4606      	mov	r6, r0
 800fc34:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc38:	2100      	movs	r1, #0
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	db09      	blt.n	800fc54 <__s2b+0x30>
 800fc40:	4630      	mov	r0, r6
 800fc42:	f7ff ff47 	bl	800fad4 <_Balloc>
 800fc46:	b940      	cbnz	r0, 800fc5a <__s2b+0x36>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	4b19      	ldr	r3, [pc, #100]	@ (800fcb0 <__s2b+0x8c>)
 800fc4c:	4819      	ldr	r0, [pc, #100]	@ (800fcb4 <__s2b+0x90>)
 800fc4e:	21d3      	movs	r1, #211	@ 0xd3
 800fc50:	f001 fff6 	bl	8011c40 <__assert_func>
 800fc54:	0052      	lsls	r2, r2, #1
 800fc56:	3101      	adds	r1, #1
 800fc58:	e7f0      	b.n	800fc3c <__s2b+0x18>
 800fc5a:	9b08      	ldr	r3, [sp, #32]
 800fc5c:	6143      	str	r3, [r0, #20]
 800fc5e:	2d09      	cmp	r5, #9
 800fc60:	f04f 0301 	mov.w	r3, #1
 800fc64:	6103      	str	r3, [r0, #16]
 800fc66:	dd16      	ble.n	800fc96 <__s2b+0x72>
 800fc68:	f104 0909 	add.w	r9, r4, #9
 800fc6c:	46c8      	mov	r8, r9
 800fc6e:	442c      	add	r4, r5
 800fc70:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc74:	4601      	mov	r1, r0
 800fc76:	3b30      	subs	r3, #48	@ 0x30
 800fc78:	220a      	movs	r2, #10
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f7ff ff8c 	bl	800fb98 <__multadd>
 800fc80:	45a0      	cmp	r8, r4
 800fc82:	d1f5      	bne.n	800fc70 <__s2b+0x4c>
 800fc84:	f1a5 0408 	sub.w	r4, r5, #8
 800fc88:	444c      	add	r4, r9
 800fc8a:	1b2d      	subs	r5, r5, r4
 800fc8c:	1963      	adds	r3, r4, r5
 800fc8e:	42bb      	cmp	r3, r7
 800fc90:	db04      	blt.n	800fc9c <__s2b+0x78>
 800fc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc96:	340a      	adds	r4, #10
 800fc98:	2509      	movs	r5, #9
 800fc9a:	e7f6      	b.n	800fc8a <__s2b+0x66>
 800fc9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fca0:	4601      	mov	r1, r0
 800fca2:	3b30      	subs	r3, #48	@ 0x30
 800fca4:	220a      	movs	r2, #10
 800fca6:	4630      	mov	r0, r6
 800fca8:	f7ff ff76 	bl	800fb98 <__multadd>
 800fcac:	e7ee      	b.n	800fc8c <__s2b+0x68>
 800fcae:	bf00      	nop
 800fcb0:	08012b77 	.word	0x08012b77
 800fcb4:	08012b88 	.word	0x08012b88

0800fcb8 <__hi0bits>:
 800fcb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	bf36      	itet	cc
 800fcc0:	0403      	lslcc	r3, r0, #16
 800fcc2:	2000      	movcs	r0, #0
 800fcc4:	2010      	movcc	r0, #16
 800fcc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fcca:	bf3c      	itt	cc
 800fccc:	021b      	lslcc	r3, r3, #8
 800fcce:	3008      	addcc	r0, #8
 800fcd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fcd4:	bf3c      	itt	cc
 800fcd6:	011b      	lslcc	r3, r3, #4
 800fcd8:	3004      	addcc	r0, #4
 800fcda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcde:	bf3c      	itt	cc
 800fce0:	009b      	lslcc	r3, r3, #2
 800fce2:	3002      	addcc	r0, #2
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	db05      	blt.n	800fcf4 <__hi0bits+0x3c>
 800fce8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fcec:	f100 0001 	add.w	r0, r0, #1
 800fcf0:	bf08      	it	eq
 800fcf2:	2020      	moveq	r0, #32
 800fcf4:	4770      	bx	lr

0800fcf6 <__lo0bits>:
 800fcf6:	6803      	ldr	r3, [r0, #0]
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	f013 0007 	ands.w	r0, r3, #7
 800fcfe:	d00b      	beq.n	800fd18 <__lo0bits+0x22>
 800fd00:	07d9      	lsls	r1, r3, #31
 800fd02:	d421      	bmi.n	800fd48 <__lo0bits+0x52>
 800fd04:	0798      	lsls	r0, r3, #30
 800fd06:	bf49      	itett	mi
 800fd08:	085b      	lsrmi	r3, r3, #1
 800fd0a:	089b      	lsrpl	r3, r3, #2
 800fd0c:	2001      	movmi	r0, #1
 800fd0e:	6013      	strmi	r3, [r2, #0]
 800fd10:	bf5c      	itt	pl
 800fd12:	6013      	strpl	r3, [r2, #0]
 800fd14:	2002      	movpl	r0, #2
 800fd16:	4770      	bx	lr
 800fd18:	b299      	uxth	r1, r3
 800fd1a:	b909      	cbnz	r1, 800fd20 <__lo0bits+0x2a>
 800fd1c:	0c1b      	lsrs	r3, r3, #16
 800fd1e:	2010      	movs	r0, #16
 800fd20:	b2d9      	uxtb	r1, r3
 800fd22:	b909      	cbnz	r1, 800fd28 <__lo0bits+0x32>
 800fd24:	3008      	adds	r0, #8
 800fd26:	0a1b      	lsrs	r3, r3, #8
 800fd28:	0719      	lsls	r1, r3, #28
 800fd2a:	bf04      	itt	eq
 800fd2c:	091b      	lsreq	r3, r3, #4
 800fd2e:	3004      	addeq	r0, #4
 800fd30:	0799      	lsls	r1, r3, #30
 800fd32:	bf04      	itt	eq
 800fd34:	089b      	lsreq	r3, r3, #2
 800fd36:	3002      	addeq	r0, #2
 800fd38:	07d9      	lsls	r1, r3, #31
 800fd3a:	d403      	bmi.n	800fd44 <__lo0bits+0x4e>
 800fd3c:	085b      	lsrs	r3, r3, #1
 800fd3e:	f100 0001 	add.w	r0, r0, #1
 800fd42:	d003      	beq.n	800fd4c <__lo0bits+0x56>
 800fd44:	6013      	str	r3, [r2, #0]
 800fd46:	4770      	bx	lr
 800fd48:	2000      	movs	r0, #0
 800fd4a:	4770      	bx	lr
 800fd4c:	2020      	movs	r0, #32
 800fd4e:	4770      	bx	lr

0800fd50 <__i2b>:
 800fd50:	b510      	push	{r4, lr}
 800fd52:	460c      	mov	r4, r1
 800fd54:	2101      	movs	r1, #1
 800fd56:	f7ff febd 	bl	800fad4 <_Balloc>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	b928      	cbnz	r0, 800fd6a <__i2b+0x1a>
 800fd5e:	4b05      	ldr	r3, [pc, #20]	@ (800fd74 <__i2b+0x24>)
 800fd60:	4805      	ldr	r0, [pc, #20]	@ (800fd78 <__i2b+0x28>)
 800fd62:	f240 1145 	movw	r1, #325	@ 0x145
 800fd66:	f001 ff6b 	bl	8011c40 <__assert_func>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	6144      	str	r4, [r0, #20]
 800fd6e:	6103      	str	r3, [r0, #16]
 800fd70:	bd10      	pop	{r4, pc}
 800fd72:	bf00      	nop
 800fd74:	08012b77 	.word	0x08012b77
 800fd78:	08012b88 	.word	0x08012b88

0800fd7c <__multiply>:
 800fd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd80:	4617      	mov	r7, r2
 800fd82:	690a      	ldr	r2, [r1, #16]
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	bfa8      	it	ge
 800fd8a:	463b      	movge	r3, r7
 800fd8c:	4689      	mov	r9, r1
 800fd8e:	bfa4      	itt	ge
 800fd90:	460f      	movge	r7, r1
 800fd92:	4699      	movge	r9, r3
 800fd94:	693d      	ldr	r5, [r7, #16]
 800fd96:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	6879      	ldr	r1, [r7, #4]
 800fd9e:	eb05 060a 	add.w	r6, r5, sl
 800fda2:	42b3      	cmp	r3, r6
 800fda4:	b085      	sub	sp, #20
 800fda6:	bfb8      	it	lt
 800fda8:	3101      	addlt	r1, #1
 800fdaa:	f7ff fe93 	bl	800fad4 <_Balloc>
 800fdae:	b930      	cbnz	r0, 800fdbe <__multiply+0x42>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	4b41      	ldr	r3, [pc, #260]	@ (800feb8 <__multiply+0x13c>)
 800fdb4:	4841      	ldr	r0, [pc, #260]	@ (800febc <__multiply+0x140>)
 800fdb6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fdba:	f001 ff41 	bl	8011c40 <__assert_func>
 800fdbe:	f100 0414 	add.w	r4, r0, #20
 800fdc2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fdc6:	4623      	mov	r3, r4
 800fdc8:	2200      	movs	r2, #0
 800fdca:	4573      	cmp	r3, lr
 800fdcc:	d320      	bcc.n	800fe10 <__multiply+0x94>
 800fdce:	f107 0814 	add.w	r8, r7, #20
 800fdd2:	f109 0114 	add.w	r1, r9, #20
 800fdd6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fdda:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fdde:	9302      	str	r3, [sp, #8]
 800fde0:	1beb      	subs	r3, r5, r7
 800fde2:	3b15      	subs	r3, #21
 800fde4:	f023 0303 	bic.w	r3, r3, #3
 800fde8:	3304      	adds	r3, #4
 800fdea:	3715      	adds	r7, #21
 800fdec:	42bd      	cmp	r5, r7
 800fdee:	bf38      	it	cc
 800fdf0:	2304      	movcc	r3, #4
 800fdf2:	9301      	str	r3, [sp, #4]
 800fdf4:	9b02      	ldr	r3, [sp, #8]
 800fdf6:	9103      	str	r1, [sp, #12]
 800fdf8:	428b      	cmp	r3, r1
 800fdfa:	d80c      	bhi.n	800fe16 <__multiply+0x9a>
 800fdfc:	2e00      	cmp	r6, #0
 800fdfe:	dd03      	ble.n	800fe08 <__multiply+0x8c>
 800fe00:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d055      	beq.n	800feb4 <__multiply+0x138>
 800fe08:	6106      	str	r6, [r0, #16]
 800fe0a:	b005      	add	sp, #20
 800fe0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe10:	f843 2b04 	str.w	r2, [r3], #4
 800fe14:	e7d9      	b.n	800fdca <__multiply+0x4e>
 800fe16:	f8b1 a000 	ldrh.w	sl, [r1]
 800fe1a:	f1ba 0f00 	cmp.w	sl, #0
 800fe1e:	d01f      	beq.n	800fe60 <__multiply+0xe4>
 800fe20:	46c4      	mov	ip, r8
 800fe22:	46a1      	mov	r9, r4
 800fe24:	2700      	movs	r7, #0
 800fe26:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fe2a:	f8d9 3000 	ldr.w	r3, [r9]
 800fe2e:	fa1f fb82 	uxth.w	fp, r2
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	fb0a 330b 	mla	r3, sl, fp, r3
 800fe38:	443b      	add	r3, r7
 800fe3a:	f8d9 7000 	ldr.w	r7, [r9]
 800fe3e:	0c12      	lsrs	r2, r2, #16
 800fe40:	0c3f      	lsrs	r7, r7, #16
 800fe42:	fb0a 7202 	mla	r2, sl, r2, r7
 800fe46:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe50:	4565      	cmp	r5, ip
 800fe52:	f849 3b04 	str.w	r3, [r9], #4
 800fe56:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fe5a:	d8e4      	bhi.n	800fe26 <__multiply+0xaa>
 800fe5c:	9b01      	ldr	r3, [sp, #4]
 800fe5e:	50e7      	str	r7, [r4, r3]
 800fe60:	9b03      	ldr	r3, [sp, #12]
 800fe62:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe66:	3104      	adds	r1, #4
 800fe68:	f1b9 0f00 	cmp.w	r9, #0
 800fe6c:	d020      	beq.n	800feb0 <__multiply+0x134>
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	4647      	mov	r7, r8
 800fe72:	46a4      	mov	ip, r4
 800fe74:	f04f 0a00 	mov.w	sl, #0
 800fe78:	f8b7 b000 	ldrh.w	fp, [r7]
 800fe7c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fe80:	fb09 220b 	mla	r2, r9, fp, r2
 800fe84:	4452      	add	r2, sl
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe8c:	f84c 3b04 	str.w	r3, [ip], #4
 800fe90:	f857 3b04 	ldr.w	r3, [r7], #4
 800fe94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe98:	f8bc 3000 	ldrh.w	r3, [ip]
 800fe9c:	fb09 330a 	mla	r3, r9, sl, r3
 800fea0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fea4:	42bd      	cmp	r5, r7
 800fea6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800feaa:	d8e5      	bhi.n	800fe78 <__multiply+0xfc>
 800feac:	9a01      	ldr	r2, [sp, #4]
 800feae:	50a3      	str	r3, [r4, r2]
 800feb0:	3404      	adds	r4, #4
 800feb2:	e79f      	b.n	800fdf4 <__multiply+0x78>
 800feb4:	3e01      	subs	r6, #1
 800feb6:	e7a1      	b.n	800fdfc <__multiply+0x80>
 800feb8:	08012b77 	.word	0x08012b77
 800febc:	08012b88 	.word	0x08012b88

0800fec0 <__pow5mult>:
 800fec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fec4:	4615      	mov	r5, r2
 800fec6:	f012 0203 	ands.w	r2, r2, #3
 800feca:	4607      	mov	r7, r0
 800fecc:	460e      	mov	r6, r1
 800fece:	d007      	beq.n	800fee0 <__pow5mult+0x20>
 800fed0:	4c25      	ldr	r4, [pc, #148]	@ (800ff68 <__pow5mult+0xa8>)
 800fed2:	3a01      	subs	r2, #1
 800fed4:	2300      	movs	r3, #0
 800fed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800feda:	f7ff fe5d 	bl	800fb98 <__multadd>
 800fede:	4606      	mov	r6, r0
 800fee0:	10ad      	asrs	r5, r5, #2
 800fee2:	d03d      	beq.n	800ff60 <__pow5mult+0xa0>
 800fee4:	69fc      	ldr	r4, [r7, #28]
 800fee6:	b97c      	cbnz	r4, 800ff08 <__pow5mult+0x48>
 800fee8:	2010      	movs	r0, #16
 800feea:	f7ff fd3d 	bl	800f968 <malloc>
 800feee:	4602      	mov	r2, r0
 800fef0:	61f8      	str	r0, [r7, #28]
 800fef2:	b928      	cbnz	r0, 800ff00 <__pow5mult+0x40>
 800fef4:	4b1d      	ldr	r3, [pc, #116]	@ (800ff6c <__pow5mult+0xac>)
 800fef6:	481e      	ldr	r0, [pc, #120]	@ (800ff70 <__pow5mult+0xb0>)
 800fef8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fefc:	f001 fea0 	bl	8011c40 <__assert_func>
 800ff00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff04:	6004      	str	r4, [r0, #0]
 800ff06:	60c4      	str	r4, [r0, #12]
 800ff08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ff0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff10:	b94c      	cbnz	r4, 800ff26 <__pow5mult+0x66>
 800ff12:	f240 2171 	movw	r1, #625	@ 0x271
 800ff16:	4638      	mov	r0, r7
 800ff18:	f7ff ff1a 	bl	800fd50 <__i2b>
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff22:	4604      	mov	r4, r0
 800ff24:	6003      	str	r3, [r0, #0]
 800ff26:	f04f 0900 	mov.w	r9, #0
 800ff2a:	07eb      	lsls	r3, r5, #31
 800ff2c:	d50a      	bpl.n	800ff44 <__pow5mult+0x84>
 800ff2e:	4631      	mov	r1, r6
 800ff30:	4622      	mov	r2, r4
 800ff32:	4638      	mov	r0, r7
 800ff34:	f7ff ff22 	bl	800fd7c <__multiply>
 800ff38:	4631      	mov	r1, r6
 800ff3a:	4680      	mov	r8, r0
 800ff3c:	4638      	mov	r0, r7
 800ff3e:	f7ff fe09 	bl	800fb54 <_Bfree>
 800ff42:	4646      	mov	r6, r8
 800ff44:	106d      	asrs	r5, r5, #1
 800ff46:	d00b      	beq.n	800ff60 <__pow5mult+0xa0>
 800ff48:	6820      	ldr	r0, [r4, #0]
 800ff4a:	b938      	cbnz	r0, 800ff5c <__pow5mult+0x9c>
 800ff4c:	4622      	mov	r2, r4
 800ff4e:	4621      	mov	r1, r4
 800ff50:	4638      	mov	r0, r7
 800ff52:	f7ff ff13 	bl	800fd7c <__multiply>
 800ff56:	6020      	str	r0, [r4, #0]
 800ff58:	f8c0 9000 	str.w	r9, [r0]
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	e7e4      	b.n	800ff2a <__pow5mult+0x6a>
 800ff60:	4630      	mov	r0, r6
 800ff62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff66:	bf00      	nop
 800ff68:	08012cb4 	.word	0x08012cb4
 800ff6c:	08012b08 	.word	0x08012b08
 800ff70:	08012b88 	.word	0x08012b88

0800ff74 <__lshift>:
 800ff74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff78:	460c      	mov	r4, r1
 800ff7a:	6849      	ldr	r1, [r1, #4]
 800ff7c:	6923      	ldr	r3, [r4, #16]
 800ff7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff82:	68a3      	ldr	r3, [r4, #8]
 800ff84:	4607      	mov	r7, r0
 800ff86:	4691      	mov	r9, r2
 800ff88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff8c:	f108 0601 	add.w	r6, r8, #1
 800ff90:	42b3      	cmp	r3, r6
 800ff92:	db0b      	blt.n	800ffac <__lshift+0x38>
 800ff94:	4638      	mov	r0, r7
 800ff96:	f7ff fd9d 	bl	800fad4 <_Balloc>
 800ff9a:	4605      	mov	r5, r0
 800ff9c:	b948      	cbnz	r0, 800ffb2 <__lshift+0x3e>
 800ff9e:	4602      	mov	r2, r0
 800ffa0:	4b28      	ldr	r3, [pc, #160]	@ (8010044 <__lshift+0xd0>)
 800ffa2:	4829      	ldr	r0, [pc, #164]	@ (8010048 <__lshift+0xd4>)
 800ffa4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ffa8:	f001 fe4a 	bl	8011c40 <__assert_func>
 800ffac:	3101      	adds	r1, #1
 800ffae:	005b      	lsls	r3, r3, #1
 800ffb0:	e7ee      	b.n	800ff90 <__lshift+0x1c>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f100 0114 	add.w	r1, r0, #20
 800ffb8:	f100 0210 	add.w	r2, r0, #16
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	4553      	cmp	r3, sl
 800ffc0:	db33      	blt.n	801002a <__lshift+0xb6>
 800ffc2:	6920      	ldr	r0, [r4, #16]
 800ffc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ffc8:	f104 0314 	add.w	r3, r4, #20
 800ffcc:	f019 091f 	ands.w	r9, r9, #31
 800ffd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ffd8:	d02b      	beq.n	8010032 <__lshift+0xbe>
 800ffda:	f1c9 0e20 	rsb	lr, r9, #32
 800ffde:	468a      	mov	sl, r1
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	6818      	ldr	r0, [r3, #0]
 800ffe4:	fa00 f009 	lsl.w	r0, r0, r9
 800ffe8:	4310      	orrs	r0, r2
 800ffea:	f84a 0b04 	str.w	r0, [sl], #4
 800ffee:	f853 2b04 	ldr.w	r2, [r3], #4
 800fff2:	459c      	cmp	ip, r3
 800fff4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fff8:	d8f3      	bhi.n	800ffe2 <__lshift+0x6e>
 800fffa:	ebac 0304 	sub.w	r3, ip, r4
 800fffe:	3b15      	subs	r3, #21
 8010000:	f023 0303 	bic.w	r3, r3, #3
 8010004:	3304      	adds	r3, #4
 8010006:	f104 0015 	add.w	r0, r4, #21
 801000a:	4560      	cmp	r0, ip
 801000c:	bf88      	it	hi
 801000e:	2304      	movhi	r3, #4
 8010010:	50ca      	str	r2, [r1, r3]
 8010012:	b10a      	cbz	r2, 8010018 <__lshift+0xa4>
 8010014:	f108 0602 	add.w	r6, r8, #2
 8010018:	3e01      	subs	r6, #1
 801001a:	4638      	mov	r0, r7
 801001c:	612e      	str	r6, [r5, #16]
 801001e:	4621      	mov	r1, r4
 8010020:	f7ff fd98 	bl	800fb54 <_Bfree>
 8010024:	4628      	mov	r0, r5
 8010026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801002a:	f842 0f04 	str.w	r0, [r2, #4]!
 801002e:	3301      	adds	r3, #1
 8010030:	e7c5      	b.n	800ffbe <__lshift+0x4a>
 8010032:	3904      	subs	r1, #4
 8010034:	f853 2b04 	ldr.w	r2, [r3], #4
 8010038:	f841 2f04 	str.w	r2, [r1, #4]!
 801003c:	459c      	cmp	ip, r3
 801003e:	d8f9      	bhi.n	8010034 <__lshift+0xc0>
 8010040:	e7ea      	b.n	8010018 <__lshift+0xa4>
 8010042:	bf00      	nop
 8010044:	08012b77 	.word	0x08012b77
 8010048:	08012b88 	.word	0x08012b88

0801004c <__mcmp>:
 801004c:	690a      	ldr	r2, [r1, #16]
 801004e:	4603      	mov	r3, r0
 8010050:	6900      	ldr	r0, [r0, #16]
 8010052:	1a80      	subs	r0, r0, r2
 8010054:	b530      	push	{r4, r5, lr}
 8010056:	d10e      	bne.n	8010076 <__mcmp+0x2a>
 8010058:	3314      	adds	r3, #20
 801005a:	3114      	adds	r1, #20
 801005c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010060:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010064:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010068:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801006c:	4295      	cmp	r5, r2
 801006e:	d003      	beq.n	8010078 <__mcmp+0x2c>
 8010070:	d205      	bcs.n	801007e <__mcmp+0x32>
 8010072:	f04f 30ff 	mov.w	r0, #4294967295
 8010076:	bd30      	pop	{r4, r5, pc}
 8010078:	42a3      	cmp	r3, r4
 801007a:	d3f3      	bcc.n	8010064 <__mcmp+0x18>
 801007c:	e7fb      	b.n	8010076 <__mcmp+0x2a>
 801007e:	2001      	movs	r0, #1
 8010080:	e7f9      	b.n	8010076 <__mcmp+0x2a>
	...

08010084 <__mdiff>:
 8010084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010088:	4689      	mov	r9, r1
 801008a:	4606      	mov	r6, r0
 801008c:	4611      	mov	r1, r2
 801008e:	4648      	mov	r0, r9
 8010090:	4614      	mov	r4, r2
 8010092:	f7ff ffdb 	bl	801004c <__mcmp>
 8010096:	1e05      	subs	r5, r0, #0
 8010098:	d112      	bne.n	80100c0 <__mdiff+0x3c>
 801009a:	4629      	mov	r1, r5
 801009c:	4630      	mov	r0, r6
 801009e:	f7ff fd19 	bl	800fad4 <_Balloc>
 80100a2:	4602      	mov	r2, r0
 80100a4:	b928      	cbnz	r0, 80100b2 <__mdiff+0x2e>
 80100a6:	4b3f      	ldr	r3, [pc, #252]	@ (80101a4 <__mdiff+0x120>)
 80100a8:	f240 2137 	movw	r1, #567	@ 0x237
 80100ac:	483e      	ldr	r0, [pc, #248]	@ (80101a8 <__mdiff+0x124>)
 80100ae:	f001 fdc7 	bl	8011c40 <__assert_func>
 80100b2:	2301      	movs	r3, #1
 80100b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80100b8:	4610      	mov	r0, r2
 80100ba:	b003      	add	sp, #12
 80100bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c0:	bfbc      	itt	lt
 80100c2:	464b      	movlt	r3, r9
 80100c4:	46a1      	movlt	r9, r4
 80100c6:	4630      	mov	r0, r6
 80100c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80100cc:	bfba      	itte	lt
 80100ce:	461c      	movlt	r4, r3
 80100d0:	2501      	movlt	r5, #1
 80100d2:	2500      	movge	r5, #0
 80100d4:	f7ff fcfe 	bl	800fad4 <_Balloc>
 80100d8:	4602      	mov	r2, r0
 80100da:	b918      	cbnz	r0, 80100e4 <__mdiff+0x60>
 80100dc:	4b31      	ldr	r3, [pc, #196]	@ (80101a4 <__mdiff+0x120>)
 80100de:	f240 2145 	movw	r1, #581	@ 0x245
 80100e2:	e7e3      	b.n	80100ac <__mdiff+0x28>
 80100e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80100e8:	6926      	ldr	r6, [r4, #16]
 80100ea:	60c5      	str	r5, [r0, #12]
 80100ec:	f109 0310 	add.w	r3, r9, #16
 80100f0:	f109 0514 	add.w	r5, r9, #20
 80100f4:	f104 0e14 	add.w	lr, r4, #20
 80100f8:	f100 0b14 	add.w	fp, r0, #20
 80100fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010100:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010104:	9301      	str	r3, [sp, #4]
 8010106:	46d9      	mov	r9, fp
 8010108:	f04f 0c00 	mov.w	ip, #0
 801010c:	9b01      	ldr	r3, [sp, #4]
 801010e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010112:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010116:	9301      	str	r3, [sp, #4]
 8010118:	fa1f f38a 	uxth.w	r3, sl
 801011c:	4619      	mov	r1, r3
 801011e:	b283      	uxth	r3, r0
 8010120:	1acb      	subs	r3, r1, r3
 8010122:	0c00      	lsrs	r0, r0, #16
 8010124:	4463      	add	r3, ip
 8010126:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801012a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801012e:	b29b      	uxth	r3, r3
 8010130:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010134:	4576      	cmp	r6, lr
 8010136:	f849 3b04 	str.w	r3, [r9], #4
 801013a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801013e:	d8e5      	bhi.n	801010c <__mdiff+0x88>
 8010140:	1b33      	subs	r3, r6, r4
 8010142:	3b15      	subs	r3, #21
 8010144:	f023 0303 	bic.w	r3, r3, #3
 8010148:	3415      	adds	r4, #21
 801014a:	3304      	adds	r3, #4
 801014c:	42a6      	cmp	r6, r4
 801014e:	bf38      	it	cc
 8010150:	2304      	movcc	r3, #4
 8010152:	441d      	add	r5, r3
 8010154:	445b      	add	r3, fp
 8010156:	461e      	mov	r6, r3
 8010158:	462c      	mov	r4, r5
 801015a:	4544      	cmp	r4, r8
 801015c:	d30e      	bcc.n	801017c <__mdiff+0xf8>
 801015e:	f108 0103 	add.w	r1, r8, #3
 8010162:	1b49      	subs	r1, r1, r5
 8010164:	f021 0103 	bic.w	r1, r1, #3
 8010168:	3d03      	subs	r5, #3
 801016a:	45a8      	cmp	r8, r5
 801016c:	bf38      	it	cc
 801016e:	2100      	movcc	r1, #0
 8010170:	440b      	add	r3, r1
 8010172:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010176:	b191      	cbz	r1, 801019e <__mdiff+0x11a>
 8010178:	6117      	str	r7, [r2, #16]
 801017a:	e79d      	b.n	80100b8 <__mdiff+0x34>
 801017c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010180:	46e6      	mov	lr, ip
 8010182:	0c08      	lsrs	r0, r1, #16
 8010184:	fa1c fc81 	uxtah	ip, ip, r1
 8010188:	4471      	add	r1, lr
 801018a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801018e:	b289      	uxth	r1, r1
 8010190:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010194:	f846 1b04 	str.w	r1, [r6], #4
 8010198:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801019c:	e7dd      	b.n	801015a <__mdiff+0xd6>
 801019e:	3f01      	subs	r7, #1
 80101a0:	e7e7      	b.n	8010172 <__mdiff+0xee>
 80101a2:	bf00      	nop
 80101a4:	08012b77 	.word	0x08012b77
 80101a8:	08012b88 	.word	0x08012b88

080101ac <__ulp>:
 80101ac:	b082      	sub	sp, #8
 80101ae:	ed8d 0b00 	vstr	d0, [sp]
 80101b2:	9a01      	ldr	r2, [sp, #4]
 80101b4:	4b0f      	ldr	r3, [pc, #60]	@ (80101f4 <__ulp+0x48>)
 80101b6:	4013      	ands	r3, r2
 80101b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80101bc:	2b00      	cmp	r3, #0
 80101be:	dc08      	bgt.n	80101d2 <__ulp+0x26>
 80101c0:	425b      	negs	r3, r3
 80101c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80101c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80101ca:	da04      	bge.n	80101d6 <__ulp+0x2a>
 80101cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80101d0:	4113      	asrs	r3, r2
 80101d2:	2200      	movs	r2, #0
 80101d4:	e008      	b.n	80101e8 <__ulp+0x3c>
 80101d6:	f1a2 0314 	sub.w	r3, r2, #20
 80101da:	2b1e      	cmp	r3, #30
 80101dc:	bfda      	itte	le
 80101de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80101e2:	40da      	lsrle	r2, r3
 80101e4:	2201      	movgt	r2, #1
 80101e6:	2300      	movs	r3, #0
 80101e8:	4619      	mov	r1, r3
 80101ea:	4610      	mov	r0, r2
 80101ec:	ec41 0b10 	vmov	d0, r0, r1
 80101f0:	b002      	add	sp, #8
 80101f2:	4770      	bx	lr
 80101f4:	7ff00000 	.word	0x7ff00000

080101f8 <__b2d>:
 80101f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101fc:	6906      	ldr	r6, [r0, #16]
 80101fe:	f100 0814 	add.w	r8, r0, #20
 8010202:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010206:	1f37      	subs	r7, r6, #4
 8010208:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801020c:	4610      	mov	r0, r2
 801020e:	f7ff fd53 	bl	800fcb8 <__hi0bits>
 8010212:	f1c0 0320 	rsb	r3, r0, #32
 8010216:	280a      	cmp	r0, #10
 8010218:	600b      	str	r3, [r1, #0]
 801021a:	491b      	ldr	r1, [pc, #108]	@ (8010288 <__b2d+0x90>)
 801021c:	dc15      	bgt.n	801024a <__b2d+0x52>
 801021e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010222:	fa22 f30c 	lsr.w	r3, r2, ip
 8010226:	45b8      	cmp	r8, r7
 8010228:	ea43 0501 	orr.w	r5, r3, r1
 801022c:	bf34      	ite	cc
 801022e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010232:	2300      	movcs	r3, #0
 8010234:	3015      	adds	r0, #21
 8010236:	fa02 f000 	lsl.w	r0, r2, r0
 801023a:	fa23 f30c 	lsr.w	r3, r3, ip
 801023e:	4303      	orrs	r3, r0
 8010240:	461c      	mov	r4, r3
 8010242:	ec45 4b10 	vmov	d0, r4, r5
 8010246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801024a:	45b8      	cmp	r8, r7
 801024c:	bf3a      	itte	cc
 801024e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010252:	f1a6 0708 	subcc.w	r7, r6, #8
 8010256:	2300      	movcs	r3, #0
 8010258:	380b      	subs	r0, #11
 801025a:	d012      	beq.n	8010282 <__b2d+0x8a>
 801025c:	f1c0 0120 	rsb	r1, r0, #32
 8010260:	fa23 f401 	lsr.w	r4, r3, r1
 8010264:	4082      	lsls	r2, r0
 8010266:	4322      	orrs	r2, r4
 8010268:	4547      	cmp	r7, r8
 801026a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801026e:	bf8c      	ite	hi
 8010270:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010274:	2200      	movls	r2, #0
 8010276:	4083      	lsls	r3, r0
 8010278:	40ca      	lsrs	r2, r1
 801027a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801027e:	4313      	orrs	r3, r2
 8010280:	e7de      	b.n	8010240 <__b2d+0x48>
 8010282:	ea42 0501 	orr.w	r5, r2, r1
 8010286:	e7db      	b.n	8010240 <__b2d+0x48>
 8010288:	3ff00000 	.word	0x3ff00000

0801028c <__d2b>:
 801028c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010290:	460f      	mov	r7, r1
 8010292:	2101      	movs	r1, #1
 8010294:	ec59 8b10 	vmov	r8, r9, d0
 8010298:	4616      	mov	r6, r2
 801029a:	f7ff fc1b 	bl	800fad4 <_Balloc>
 801029e:	4604      	mov	r4, r0
 80102a0:	b930      	cbnz	r0, 80102b0 <__d2b+0x24>
 80102a2:	4602      	mov	r2, r0
 80102a4:	4b23      	ldr	r3, [pc, #140]	@ (8010334 <__d2b+0xa8>)
 80102a6:	4824      	ldr	r0, [pc, #144]	@ (8010338 <__d2b+0xac>)
 80102a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80102ac:	f001 fcc8 	bl	8011c40 <__assert_func>
 80102b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80102b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102b8:	b10d      	cbz	r5, 80102be <__d2b+0x32>
 80102ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80102be:	9301      	str	r3, [sp, #4]
 80102c0:	f1b8 0300 	subs.w	r3, r8, #0
 80102c4:	d023      	beq.n	801030e <__d2b+0x82>
 80102c6:	4668      	mov	r0, sp
 80102c8:	9300      	str	r3, [sp, #0]
 80102ca:	f7ff fd14 	bl	800fcf6 <__lo0bits>
 80102ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80102d2:	b1d0      	cbz	r0, 801030a <__d2b+0x7e>
 80102d4:	f1c0 0320 	rsb	r3, r0, #32
 80102d8:	fa02 f303 	lsl.w	r3, r2, r3
 80102dc:	430b      	orrs	r3, r1
 80102de:	40c2      	lsrs	r2, r0
 80102e0:	6163      	str	r3, [r4, #20]
 80102e2:	9201      	str	r2, [sp, #4]
 80102e4:	9b01      	ldr	r3, [sp, #4]
 80102e6:	61a3      	str	r3, [r4, #24]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	bf0c      	ite	eq
 80102ec:	2201      	moveq	r2, #1
 80102ee:	2202      	movne	r2, #2
 80102f0:	6122      	str	r2, [r4, #16]
 80102f2:	b1a5      	cbz	r5, 801031e <__d2b+0x92>
 80102f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80102f8:	4405      	add	r5, r0
 80102fa:	603d      	str	r5, [r7, #0]
 80102fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010300:	6030      	str	r0, [r6, #0]
 8010302:	4620      	mov	r0, r4
 8010304:	b003      	add	sp, #12
 8010306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801030a:	6161      	str	r1, [r4, #20]
 801030c:	e7ea      	b.n	80102e4 <__d2b+0x58>
 801030e:	a801      	add	r0, sp, #4
 8010310:	f7ff fcf1 	bl	800fcf6 <__lo0bits>
 8010314:	9b01      	ldr	r3, [sp, #4]
 8010316:	6163      	str	r3, [r4, #20]
 8010318:	3020      	adds	r0, #32
 801031a:	2201      	movs	r2, #1
 801031c:	e7e8      	b.n	80102f0 <__d2b+0x64>
 801031e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010322:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010326:	6038      	str	r0, [r7, #0]
 8010328:	6918      	ldr	r0, [r3, #16]
 801032a:	f7ff fcc5 	bl	800fcb8 <__hi0bits>
 801032e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010332:	e7e5      	b.n	8010300 <__d2b+0x74>
 8010334:	08012b77 	.word	0x08012b77
 8010338:	08012b88 	.word	0x08012b88

0801033c <__ratio>:
 801033c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010340:	4688      	mov	r8, r1
 8010342:	4669      	mov	r1, sp
 8010344:	4681      	mov	r9, r0
 8010346:	f7ff ff57 	bl	80101f8 <__b2d>
 801034a:	a901      	add	r1, sp, #4
 801034c:	4640      	mov	r0, r8
 801034e:	ec55 4b10 	vmov	r4, r5, d0
 8010352:	f7ff ff51 	bl	80101f8 <__b2d>
 8010356:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801035a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801035e:	1ad2      	subs	r2, r2, r3
 8010360:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010364:	1a5b      	subs	r3, r3, r1
 8010366:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801036a:	ec57 6b10 	vmov	r6, r7, d0
 801036e:	2b00      	cmp	r3, #0
 8010370:	bfd6      	itet	le
 8010372:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010376:	462a      	movgt	r2, r5
 8010378:	463a      	movle	r2, r7
 801037a:	46ab      	mov	fp, r5
 801037c:	46a2      	mov	sl, r4
 801037e:	bfce      	itee	gt
 8010380:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010384:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010388:	ee00 3a90 	vmovle	s1, r3
 801038c:	ec4b ab17 	vmov	d7, sl, fp
 8010390:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010394:	b003      	add	sp, #12
 8010396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801039a <__copybits>:
 801039a:	3901      	subs	r1, #1
 801039c:	b570      	push	{r4, r5, r6, lr}
 801039e:	1149      	asrs	r1, r1, #5
 80103a0:	6914      	ldr	r4, [r2, #16]
 80103a2:	3101      	adds	r1, #1
 80103a4:	f102 0314 	add.w	r3, r2, #20
 80103a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103b0:	1f05      	subs	r5, r0, #4
 80103b2:	42a3      	cmp	r3, r4
 80103b4:	d30c      	bcc.n	80103d0 <__copybits+0x36>
 80103b6:	1aa3      	subs	r3, r4, r2
 80103b8:	3b11      	subs	r3, #17
 80103ba:	f023 0303 	bic.w	r3, r3, #3
 80103be:	3211      	adds	r2, #17
 80103c0:	42a2      	cmp	r2, r4
 80103c2:	bf88      	it	hi
 80103c4:	2300      	movhi	r3, #0
 80103c6:	4418      	add	r0, r3
 80103c8:	2300      	movs	r3, #0
 80103ca:	4288      	cmp	r0, r1
 80103cc:	d305      	bcc.n	80103da <__copybits+0x40>
 80103ce:	bd70      	pop	{r4, r5, r6, pc}
 80103d0:	f853 6b04 	ldr.w	r6, [r3], #4
 80103d4:	f845 6f04 	str.w	r6, [r5, #4]!
 80103d8:	e7eb      	b.n	80103b2 <__copybits+0x18>
 80103da:	f840 3b04 	str.w	r3, [r0], #4
 80103de:	e7f4      	b.n	80103ca <__copybits+0x30>

080103e0 <__any_on>:
 80103e0:	f100 0214 	add.w	r2, r0, #20
 80103e4:	6900      	ldr	r0, [r0, #16]
 80103e6:	114b      	asrs	r3, r1, #5
 80103e8:	4298      	cmp	r0, r3
 80103ea:	b510      	push	{r4, lr}
 80103ec:	db11      	blt.n	8010412 <__any_on+0x32>
 80103ee:	dd0a      	ble.n	8010406 <__any_on+0x26>
 80103f0:	f011 011f 	ands.w	r1, r1, #31
 80103f4:	d007      	beq.n	8010406 <__any_on+0x26>
 80103f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80103fa:	fa24 f001 	lsr.w	r0, r4, r1
 80103fe:	fa00 f101 	lsl.w	r1, r0, r1
 8010402:	428c      	cmp	r4, r1
 8010404:	d10b      	bne.n	801041e <__any_on+0x3e>
 8010406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801040a:	4293      	cmp	r3, r2
 801040c:	d803      	bhi.n	8010416 <__any_on+0x36>
 801040e:	2000      	movs	r0, #0
 8010410:	bd10      	pop	{r4, pc}
 8010412:	4603      	mov	r3, r0
 8010414:	e7f7      	b.n	8010406 <__any_on+0x26>
 8010416:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801041a:	2900      	cmp	r1, #0
 801041c:	d0f5      	beq.n	801040a <__any_on+0x2a>
 801041e:	2001      	movs	r0, #1
 8010420:	e7f6      	b.n	8010410 <__any_on+0x30>

08010422 <sulp>:
 8010422:	b570      	push	{r4, r5, r6, lr}
 8010424:	4604      	mov	r4, r0
 8010426:	460d      	mov	r5, r1
 8010428:	4616      	mov	r6, r2
 801042a:	ec45 4b10 	vmov	d0, r4, r5
 801042e:	f7ff febd 	bl	80101ac <__ulp>
 8010432:	b17e      	cbz	r6, 8010454 <sulp+0x32>
 8010434:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010438:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801043c:	2b00      	cmp	r3, #0
 801043e:	dd09      	ble.n	8010454 <sulp+0x32>
 8010440:	051b      	lsls	r3, r3, #20
 8010442:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8010446:	2000      	movs	r0, #0
 8010448:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801044c:	ec41 0b17 	vmov	d7, r0, r1
 8010450:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010454:	bd70      	pop	{r4, r5, r6, pc}
	...

08010458 <_strtod_l>:
 8010458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801045c:	ed2d 8b0a 	vpush	{d8-d12}
 8010460:	b097      	sub	sp, #92	@ 0x5c
 8010462:	4688      	mov	r8, r1
 8010464:	920e      	str	r2, [sp, #56]	@ 0x38
 8010466:	2200      	movs	r2, #0
 8010468:	9212      	str	r2, [sp, #72]	@ 0x48
 801046a:	9005      	str	r0, [sp, #20]
 801046c:	f04f 0a00 	mov.w	sl, #0
 8010470:	f04f 0b00 	mov.w	fp, #0
 8010474:	460a      	mov	r2, r1
 8010476:	9211      	str	r2, [sp, #68]	@ 0x44
 8010478:	7811      	ldrb	r1, [r2, #0]
 801047a:	292b      	cmp	r1, #43	@ 0x2b
 801047c:	d04c      	beq.n	8010518 <_strtod_l+0xc0>
 801047e:	d839      	bhi.n	80104f4 <_strtod_l+0x9c>
 8010480:	290d      	cmp	r1, #13
 8010482:	d833      	bhi.n	80104ec <_strtod_l+0x94>
 8010484:	2908      	cmp	r1, #8
 8010486:	d833      	bhi.n	80104f0 <_strtod_l+0x98>
 8010488:	2900      	cmp	r1, #0
 801048a:	d03c      	beq.n	8010506 <_strtod_l+0xae>
 801048c:	2200      	movs	r2, #0
 801048e:	9208      	str	r2, [sp, #32]
 8010490:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8010492:	782a      	ldrb	r2, [r5, #0]
 8010494:	2a30      	cmp	r2, #48	@ 0x30
 8010496:	f040 80b7 	bne.w	8010608 <_strtod_l+0x1b0>
 801049a:	786a      	ldrb	r2, [r5, #1]
 801049c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80104a0:	2a58      	cmp	r2, #88	@ 0x58
 80104a2:	d170      	bne.n	8010586 <_strtod_l+0x12e>
 80104a4:	9302      	str	r3, [sp, #8]
 80104a6:	9b08      	ldr	r3, [sp, #32]
 80104a8:	9301      	str	r3, [sp, #4]
 80104aa:	ab12      	add	r3, sp, #72	@ 0x48
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	4a90      	ldr	r2, [pc, #576]	@ (80106f0 <_strtod_l+0x298>)
 80104b0:	9805      	ldr	r0, [sp, #20]
 80104b2:	ab13      	add	r3, sp, #76	@ 0x4c
 80104b4:	a911      	add	r1, sp, #68	@ 0x44
 80104b6:	f001 fc5d 	bl	8011d74 <__gethex>
 80104ba:	f010 060f 	ands.w	r6, r0, #15
 80104be:	4604      	mov	r4, r0
 80104c0:	d005      	beq.n	80104ce <_strtod_l+0x76>
 80104c2:	2e06      	cmp	r6, #6
 80104c4:	d12a      	bne.n	801051c <_strtod_l+0xc4>
 80104c6:	3501      	adds	r5, #1
 80104c8:	2300      	movs	r3, #0
 80104ca:	9511      	str	r5, [sp, #68]	@ 0x44
 80104cc:	9308      	str	r3, [sp, #32]
 80104ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	f040 8537 	bne.w	8010f44 <_strtod_l+0xaec>
 80104d6:	9b08      	ldr	r3, [sp, #32]
 80104d8:	ec4b ab10 	vmov	d0, sl, fp
 80104dc:	b1cb      	cbz	r3, 8010512 <_strtod_l+0xba>
 80104de:	eeb1 0b40 	vneg.f64	d0, d0
 80104e2:	b017      	add	sp, #92	@ 0x5c
 80104e4:	ecbd 8b0a 	vpop	{d8-d12}
 80104e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ec:	2920      	cmp	r1, #32
 80104ee:	d1cd      	bne.n	801048c <_strtod_l+0x34>
 80104f0:	3201      	adds	r2, #1
 80104f2:	e7c0      	b.n	8010476 <_strtod_l+0x1e>
 80104f4:	292d      	cmp	r1, #45	@ 0x2d
 80104f6:	d1c9      	bne.n	801048c <_strtod_l+0x34>
 80104f8:	2101      	movs	r1, #1
 80104fa:	9108      	str	r1, [sp, #32]
 80104fc:	1c51      	adds	r1, r2, #1
 80104fe:	9111      	str	r1, [sp, #68]	@ 0x44
 8010500:	7852      	ldrb	r2, [r2, #1]
 8010502:	2a00      	cmp	r2, #0
 8010504:	d1c4      	bne.n	8010490 <_strtod_l+0x38>
 8010506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010508:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801050c:	2b00      	cmp	r3, #0
 801050e:	f040 8517 	bne.w	8010f40 <_strtod_l+0xae8>
 8010512:	ec4b ab10 	vmov	d0, sl, fp
 8010516:	e7e4      	b.n	80104e2 <_strtod_l+0x8a>
 8010518:	2100      	movs	r1, #0
 801051a:	e7ee      	b.n	80104fa <_strtod_l+0xa2>
 801051c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801051e:	b13a      	cbz	r2, 8010530 <_strtod_l+0xd8>
 8010520:	2135      	movs	r1, #53	@ 0x35
 8010522:	a814      	add	r0, sp, #80	@ 0x50
 8010524:	f7ff ff39 	bl	801039a <__copybits>
 8010528:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801052a:	9805      	ldr	r0, [sp, #20]
 801052c:	f7ff fb12 	bl	800fb54 <_Bfree>
 8010530:	1e73      	subs	r3, r6, #1
 8010532:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010534:	2b04      	cmp	r3, #4
 8010536:	d806      	bhi.n	8010546 <_strtod_l+0xee>
 8010538:	e8df f003 	tbb	[pc, r3]
 801053c:	201d0314 	.word	0x201d0314
 8010540:	14          	.byte	0x14
 8010541:	00          	.byte	0x00
 8010542:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8010546:	05e3      	lsls	r3, r4, #23
 8010548:	bf48      	it	mi
 801054a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801054e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010552:	0d1b      	lsrs	r3, r3, #20
 8010554:	051b      	lsls	r3, r3, #20
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1b9      	bne.n	80104ce <_strtod_l+0x76>
 801055a:	f7fe fb9f 	bl	800ec9c <__errno>
 801055e:	2322      	movs	r3, #34	@ 0x22
 8010560:	6003      	str	r3, [r0, #0]
 8010562:	e7b4      	b.n	80104ce <_strtod_l+0x76>
 8010564:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8010568:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801056c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010570:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010574:	e7e7      	b.n	8010546 <_strtod_l+0xee>
 8010576:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80106f8 <_strtod_l+0x2a0>
 801057a:	e7e4      	b.n	8010546 <_strtod_l+0xee>
 801057c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010580:	f04f 3aff 	mov.w	sl, #4294967295
 8010584:	e7df      	b.n	8010546 <_strtod_l+0xee>
 8010586:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010588:	1c5a      	adds	r2, r3, #1
 801058a:	9211      	str	r2, [sp, #68]	@ 0x44
 801058c:	785b      	ldrb	r3, [r3, #1]
 801058e:	2b30      	cmp	r3, #48	@ 0x30
 8010590:	d0f9      	beq.n	8010586 <_strtod_l+0x12e>
 8010592:	2b00      	cmp	r3, #0
 8010594:	d09b      	beq.n	80104ce <_strtod_l+0x76>
 8010596:	2301      	movs	r3, #1
 8010598:	9307      	str	r3, [sp, #28]
 801059a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801059c:	930a      	str	r3, [sp, #40]	@ 0x28
 801059e:	2300      	movs	r3, #0
 80105a0:	9306      	str	r3, [sp, #24]
 80105a2:	4699      	mov	r9, r3
 80105a4:	461d      	mov	r5, r3
 80105a6:	220a      	movs	r2, #10
 80105a8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80105aa:	7804      	ldrb	r4, [r0, #0]
 80105ac:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80105b0:	b2d9      	uxtb	r1, r3
 80105b2:	2909      	cmp	r1, #9
 80105b4:	d92a      	bls.n	801060c <_strtod_l+0x1b4>
 80105b6:	494f      	ldr	r1, [pc, #316]	@ (80106f4 <_strtod_l+0x29c>)
 80105b8:	2201      	movs	r2, #1
 80105ba:	f7fe fb12 	bl	800ebe2 <strncmp>
 80105be:	b398      	cbz	r0, 8010628 <_strtod_l+0x1d0>
 80105c0:	2000      	movs	r0, #0
 80105c2:	4622      	mov	r2, r4
 80105c4:	462b      	mov	r3, r5
 80105c6:	4607      	mov	r7, r0
 80105c8:	4601      	mov	r1, r0
 80105ca:	2a65      	cmp	r2, #101	@ 0x65
 80105cc:	d001      	beq.n	80105d2 <_strtod_l+0x17a>
 80105ce:	2a45      	cmp	r2, #69	@ 0x45
 80105d0:	d118      	bne.n	8010604 <_strtod_l+0x1ac>
 80105d2:	b91b      	cbnz	r3, 80105dc <_strtod_l+0x184>
 80105d4:	9b07      	ldr	r3, [sp, #28]
 80105d6:	4303      	orrs	r3, r0
 80105d8:	d095      	beq.n	8010506 <_strtod_l+0xae>
 80105da:	2300      	movs	r3, #0
 80105dc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80105e0:	f108 0201 	add.w	r2, r8, #1
 80105e4:	9211      	str	r2, [sp, #68]	@ 0x44
 80105e6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80105ea:	2a2b      	cmp	r2, #43	@ 0x2b
 80105ec:	d074      	beq.n	80106d8 <_strtod_l+0x280>
 80105ee:	2a2d      	cmp	r2, #45	@ 0x2d
 80105f0:	d07a      	beq.n	80106e8 <_strtod_l+0x290>
 80105f2:	f04f 0e00 	mov.w	lr, #0
 80105f6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80105fa:	2c09      	cmp	r4, #9
 80105fc:	f240 8082 	bls.w	8010704 <_strtod_l+0x2ac>
 8010600:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010604:	2400      	movs	r4, #0
 8010606:	e09d      	b.n	8010744 <_strtod_l+0x2ec>
 8010608:	2300      	movs	r3, #0
 801060a:	e7c5      	b.n	8010598 <_strtod_l+0x140>
 801060c:	2d08      	cmp	r5, #8
 801060e:	bfc8      	it	gt
 8010610:	9906      	ldrgt	r1, [sp, #24]
 8010612:	f100 0001 	add.w	r0, r0, #1
 8010616:	bfca      	itet	gt
 8010618:	fb02 3301 	mlagt	r3, r2, r1, r3
 801061c:	fb02 3909 	mlale	r9, r2, r9, r3
 8010620:	9306      	strgt	r3, [sp, #24]
 8010622:	3501      	adds	r5, #1
 8010624:	9011      	str	r0, [sp, #68]	@ 0x44
 8010626:	e7bf      	b.n	80105a8 <_strtod_l+0x150>
 8010628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801062a:	1c5a      	adds	r2, r3, #1
 801062c:	9211      	str	r2, [sp, #68]	@ 0x44
 801062e:	785a      	ldrb	r2, [r3, #1]
 8010630:	b3bd      	cbz	r5, 80106a2 <_strtod_l+0x24a>
 8010632:	4607      	mov	r7, r0
 8010634:	462b      	mov	r3, r5
 8010636:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801063a:	2909      	cmp	r1, #9
 801063c:	d912      	bls.n	8010664 <_strtod_l+0x20c>
 801063e:	2101      	movs	r1, #1
 8010640:	e7c3      	b.n	80105ca <_strtod_l+0x172>
 8010642:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010644:	1c5a      	adds	r2, r3, #1
 8010646:	9211      	str	r2, [sp, #68]	@ 0x44
 8010648:	785a      	ldrb	r2, [r3, #1]
 801064a:	3001      	adds	r0, #1
 801064c:	2a30      	cmp	r2, #48	@ 0x30
 801064e:	d0f8      	beq.n	8010642 <_strtod_l+0x1ea>
 8010650:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010654:	2b08      	cmp	r3, #8
 8010656:	f200 847a 	bhi.w	8010f4e <_strtod_l+0xaf6>
 801065a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801065c:	930a      	str	r3, [sp, #40]	@ 0x28
 801065e:	4607      	mov	r7, r0
 8010660:	2000      	movs	r0, #0
 8010662:	4603      	mov	r3, r0
 8010664:	3a30      	subs	r2, #48	@ 0x30
 8010666:	f100 0101 	add.w	r1, r0, #1
 801066a:	d014      	beq.n	8010696 <_strtod_l+0x23e>
 801066c:	440f      	add	r7, r1
 801066e:	469c      	mov	ip, r3
 8010670:	f04f 0e0a 	mov.w	lr, #10
 8010674:	f10c 0401 	add.w	r4, ip, #1
 8010678:	1ae6      	subs	r6, r4, r3
 801067a:	42b1      	cmp	r1, r6
 801067c:	dc13      	bgt.n	80106a6 <_strtod_l+0x24e>
 801067e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010682:	1819      	adds	r1, r3, r0
 8010684:	2908      	cmp	r1, #8
 8010686:	f103 0301 	add.w	r3, r3, #1
 801068a:	4403      	add	r3, r0
 801068c:	dc19      	bgt.n	80106c2 <_strtod_l+0x26a>
 801068e:	210a      	movs	r1, #10
 8010690:	fb01 2909 	mla	r9, r1, r9, r2
 8010694:	2100      	movs	r1, #0
 8010696:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010698:	1c50      	adds	r0, r2, #1
 801069a:	9011      	str	r0, [sp, #68]	@ 0x44
 801069c:	7852      	ldrb	r2, [r2, #1]
 801069e:	4608      	mov	r0, r1
 80106a0:	e7c9      	b.n	8010636 <_strtod_l+0x1de>
 80106a2:	4628      	mov	r0, r5
 80106a4:	e7d2      	b.n	801064c <_strtod_l+0x1f4>
 80106a6:	f1bc 0f08 	cmp.w	ip, #8
 80106aa:	dc03      	bgt.n	80106b4 <_strtod_l+0x25c>
 80106ac:	fb0e f909 	mul.w	r9, lr, r9
 80106b0:	46a4      	mov	ip, r4
 80106b2:	e7df      	b.n	8010674 <_strtod_l+0x21c>
 80106b4:	2c10      	cmp	r4, #16
 80106b6:	bfde      	ittt	le
 80106b8:	9e06      	ldrle	r6, [sp, #24]
 80106ba:	fb0e f606 	mulle.w	r6, lr, r6
 80106be:	9606      	strle	r6, [sp, #24]
 80106c0:	e7f6      	b.n	80106b0 <_strtod_l+0x258>
 80106c2:	290f      	cmp	r1, #15
 80106c4:	bfdf      	itttt	le
 80106c6:	9806      	ldrle	r0, [sp, #24]
 80106c8:	210a      	movle	r1, #10
 80106ca:	fb01 2200 	mlale	r2, r1, r0, r2
 80106ce:	9206      	strle	r2, [sp, #24]
 80106d0:	e7e0      	b.n	8010694 <_strtod_l+0x23c>
 80106d2:	2700      	movs	r7, #0
 80106d4:	2101      	movs	r1, #1
 80106d6:	e77d      	b.n	80105d4 <_strtod_l+0x17c>
 80106d8:	f04f 0e00 	mov.w	lr, #0
 80106dc:	f108 0202 	add.w	r2, r8, #2
 80106e0:	9211      	str	r2, [sp, #68]	@ 0x44
 80106e2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80106e6:	e786      	b.n	80105f6 <_strtod_l+0x19e>
 80106e8:	f04f 0e01 	mov.w	lr, #1
 80106ec:	e7f6      	b.n	80106dc <_strtod_l+0x284>
 80106ee:	bf00      	nop
 80106f0:	08012dc4 	.word	0x08012dc4
 80106f4:	08012be1 	.word	0x08012be1
 80106f8:	7ff00000 	.word	0x7ff00000
 80106fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106fe:	1c54      	adds	r4, r2, #1
 8010700:	9411      	str	r4, [sp, #68]	@ 0x44
 8010702:	7852      	ldrb	r2, [r2, #1]
 8010704:	2a30      	cmp	r2, #48	@ 0x30
 8010706:	d0f9      	beq.n	80106fc <_strtod_l+0x2a4>
 8010708:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 801070c:	2c08      	cmp	r4, #8
 801070e:	f63f af79 	bhi.w	8010604 <_strtod_l+0x1ac>
 8010712:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010716:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010718:	9209      	str	r2, [sp, #36]	@ 0x24
 801071a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801071c:	1c54      	adds	r4, r2, #1
 801071e:	9411      	str	r4, [sp, #68]	@ 0x44
 8010720:	7852      	ldrb	r2, [r2, #1]
 8010722:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8010726:	2e09      	cmp	r6, #9
 8010728:	d937      	bls.n	801079a <_strtod_l+0x342>
 801072a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801072c:	1ba4      	subs	r4, r4, r6
 801072e:	2c08      	cmp	r4, #8
 8010730:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8010734:	dc02      	bgt.n	801073c <_strtod_l+0x2e4>
 8010736:	4564      	cmp	r4, ip
 8010738:	bfa8      	it	ge
 801073a:	4664      	movge	r4, ip
 801073c:	f1be 0f00 	cmp.w	lr, #0
 8010740:	d000      	beq.n	8010744 <_strtod_l+0x2ec>
 8010742:	4264      	negs	r4, r4
 8010744:	2b00      	cmp	r3, #0
 8010746:	d14d      	bne.n	80107e4 <_strtod_l+0x38c>
 8010748:	9b07      	ldr	r3, [sp, #28]
 801074a:	4318      	orrs	r0, r3
 801074c:	f47f aebf 	bne.w	80104ce <_strtod_l+0x76>
 8010750:	2900      	cmp	r1, #0
 8010752:	f47f aed8 	bne.w	8010506 <_strtod_l+0xae>
 8010756:	2a69      	cmp	r2, #105	@ 0x69
 8010758:	d027      	beq.n	80107aa <_strtod_l+0x352>
 801075a:	dc24      	bgt.n	80107a6 <_strtod_l+0x34e>
 801075c:	2a49      	cmp	r2, #73	@ 0x49
 801075e:	d024      	beq.n	80107aa <_strtod_l+0x352>
 8010760:	2a4e      	cmp	r2, #78	@ 0x4e
 8010762:	f47f aed0 	bne.w	8010506 <_strtod_l+0xae>
 8010766:	4997      	ldr	r1, [pc, #604]	@ (80109c4 <_strtod_l+0x56c>)
 8010768:	a811      	add	r0, sp, #68	@ 0x44
 801076a:	f001 fd25 	bl	80121b8 <__match>
 801076e:	2800      	cmp	r0, #0
 8010770:	f43f aec9 	beq.w	8010506 <_strtod_l+0xae>
 8010774:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	2b28      	cmp	r3, #40	@ 0x28
 801077a:	d12d      	bne.n	80107d8 <_strtod_l+0x380>
 801077c:	4992      	ldr	r1, [pc, #584]	@ (80109c8 <_strtod_l+0x570>)
 801077e:	aa14      	add	r2, sp, #80	@ 0x50
 8010780:	a811      	add	r0, sp, #68	@ 0x44
 8010782:	f001 fd2d 	bl	80121e0 <__hexnan>
 8010786:	2805      	cmp	r0, #5
 8010788:	d126      	bne.n	80107d8 <_strtod_l+0x380>
 801078a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801078c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8010790:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010794:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010798:	e699      	b.n	80104ce <_strtod_l+0x76>
 801079a:	240a      	movs	r4, #10
 801079c:	fb04 2c0c 	mla	ip, r4, ip, r2
 80107a0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80107a4:	e7b9      	b.n	801071a <_strtod_l+0x2c2>
 80107a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80107a8:	e7db      	b.n	8010762 <_strtod_l+0x30a>
 80107aa:	4988      	ldr	r1, [pc, #544]	@ (80109cc <_strtod_l+0x574>)
 80107ac:	a811      	add	r0, sp, #68	@ 0x44
 80107ae:	f001 fd03 	bl	80121b8 <__match>
 80107b2:	2800      	cmp	r0, #0
 80107b4:	f43f aea7 	beq.w	8010506 <_strtod_l+0xae>
 80107b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107ba:	4985      	ldr	r1, [pc, #532]	@ (80109d0 <_strtod_l+0x578>)
 80107bc:	3b01      	subs	r3, #1
 80107be:	a811      	add	r0, sp, #68	@ 0x44
 80107c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80107c2:	f001 fcf9 	bl	80121b8 <__match>
 80107c6:	b910      	cbnz	r0, 80107ce <_strtod_l+0x376>
 80107c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107ca:	3301      	adds	r3, #1
 80107cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80107ce:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80109e4 <_strtod_l+0x58c>
 80107d2:	f04f 0a00 	mov.w	sl, #0
 80107d6:	e67a      	b.n	80104ce <_strtod_l+0x76>
 80107d8:	487e      	ldr	r0, [pc, #504]	@ (80109d4 <_strtod_l+0x57c>)
 80107da:	f001 fa29 	bl	8011c30 <nan>
 80107de:	ec5b ab10 	vmov	sl, fp, d0
 80107e2:	e674      	b.n	80104ce <_strtod_l+0x76>
 80107e4:	ee07 9a90 	vmov	s15, r9
 80107e8:	1be2      	subs	r2, r4, r7
 80107ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80107ee:	2d00      	cmp	r5, #0
 80107f0:	bf08      	it	eq
 80107f2:	461d      	moveq	r5, r3
 80107f4:	2b10      	cmp	r3, #16
 80107f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80107f8:	461a      	mov	r2, r3
 80107fa:	bfa8      	it	ge
 80107fc:	2210      	movge	r2, #16
 80107fe:	2b09      	cmp	r3, #9
 8010800:	ec5b ab17 	vmov	sl, fp, d7
 8010804:	dc15      	bgt.n	8010832 <_strtod_l+0x3da>
 8010806:	1be1      	subs	r1, r4, r7
 8010808:	2900      	cmp	r1, #0
 801080a:	f43f ae60 	beq.w	80104ce <_strtod_l+0x76>
 801080e:	eba4 0107 	sub.w	r1, r4, r7
 8010812:	dd72      	ble.n	80108fa <_strtod_l+0x4a2>
 8010814:	2916      	cmp	r1, #22
 8010816:	dc59      	bgt.n	80108cc <_strtod_l+0x474>
 8010818:	4b6f      	ldr	r3, [pc, #444]	@ (80109d8 <_strtod_l+0x580>)
 801081a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801081c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010820:	ed93 7b00 	vldr	d7, [r3]
 8010824:	ec4b ab16 	vmov	d6, sl, fp
 8010828:	ee27 7b06 	vmul.f64	d7, d7, d6
 801082c:	ec5b ab17 	vmov	sl, fp, d7
 8010830:	e64d      	b.n	80104ce <_strtod_l+0x76>
 8010832:	4969      	ldr	r1, [pc, #420]	@ (80109d8 <_strtod_l+0x580>)
 8010834:	eddd 6a06 	vldr	s13, [sp, #24]
 8010838:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801083c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010840:	2b0f      	cmp	r3, #15
 8010842:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8010846:	eea7 6b05 	vfma.f64	d6, d7, d5
 801084a:	ec5b ab16 	vmov	sl, fp, d6
 801084e:	ddda      	ble.n	8010806 <_strtod_l+0x3ae>
 8010850:	1a9a      	subs	r2, r3, r2
 8010852:	1be1      	subs	r1, r4, r7
 8010854:	440a      	add	r2, r1
 8010856:	2a00      	cmp	r2, #0
 8010858:	f340 8094 	ble.w	8010984 <_strtod_l+0x52c>
 801085c:	f012 000f 	ands.w	r0, r2, #15
 8010860:	d00a      	beq.n	8010878 <_strtod_l+0x420>
 8010862:	495d      	ldr	r1, [pc, #372]	@ (80109d8 <_strtod_l+0x580>)
 8010864:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010868:	ed91 7b00 	vldr	d7, [r1]
 801086c:	ec4b ab16 	vmov	d6, sl, fp
 8010870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010874:	ec5b ab17 	vmov	sl, fp, d7
 8010878:	f032 020f 	bics.w	r2, r2, #15
 801087c:	d073      	beq.n	8010966 <_strtod_l+0x50e>
 801087e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8010882:	dd47      	ble.n	8010914 <_strtod_l+0x4bc>
 8010884:	2400      	movs	r4, #0
 8010886:	4625      	mov	r5, r4
 8010888:	9407      	str	r4, [sp, #28]
 801088a:	4626      	mov	r6, r4
 801088c:	9a05      	ldr	r2, [sp, #20]
 801088e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80109e4 <_strtod_l+0x58c>
 8010892:	2322      	movs	r3, #34	@ 0x22
 8010894:	6013      	str	r3, [r2, #0]
 8010896:	f04f 0a00 	mov.w	sl, #0
 801089a:	9b07      	ldr	r3, [sp, #28]
 801089c:	2b00      	cmp	r3, #0
 801089e:	f43f ae16 	beq.w	80104ce <_strtod_l+0x76>
 80108a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80108a4:	9805      	ldr	r0, [sp, #20]
 80108a6:	f7ff f955 	bl	800fb54 <_Bfree>
 80108aa:	9805      	ldr	r0, [sp, #20]
 80108ac:	4631      	mov	r1, r6
 80108ae:	f7ff f951 	bl	800fb54 <_Bfree>
 80108b2:	9805      	ldr	r0, [sp, #20]
 80108b4:	4629      	mov	r1, r5
 80108b6:	f7ff f94d 	bl	800fb54 <_Bfree>
 80108ba:	9907      	ldr	r1, [sp, #28]
 80108bc:	9805      	ldr	r0, [sp, #20]
 80108be:	f7ff f949 	bl	800fb54 <_Bfree>
 80108c2:	9805      	ldr	r0, [sp, #20]
 80108c4:	4621      	mov	r1, r4
 80108c6:	f7ff f945 	bl	800fb54 <_Bfree>
 80108ca:	e600      	b.n	80104ce <_strtod_l+0x76>
 80108cc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80108d0:	1be0      	subs	r0, r4, r7
 80108d2:	4281      	cmp	r1, r0
 80108d4:	dbbc      	blt.n	8010850 <_strtod_l+0x3f8>
 80108d6:	4a40      	ldr	r2, [pc, #256]	@ (80109d8 <_strtod_l+0x580>)
 80108d8:	f1c3 030f 	rsb	r3, r3, #15
 80108dc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80108e0:	ed91 7b00 	vldr	d7, [r1]
 80108e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80108e6:	ec4b ab16 	vmov	d6, sl, fp
 80108ea:	1acb      	subs	r3, r1, r3
 80108ec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80108f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80108f4:	ed92 6b00 	vldr	d6, [r2]
 80108f8:	e796      	b.n	8010828 <_strtod_l+0x3d0>
 80108fa:	3116      	adds	r1, #22
 80108fc:	dba8      	blt.n	8010850 <_strtod_l+0x3f8>
 80108fe:	4b36      	ldr	r3, [pc, #216]	@ (80109d8 <_strtod_l+0x580>)
 8010900:	1b3c      	subs	r4, r7, r4
 8010902:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010906:	ed94 7b00 	vldr	d7, [r4]
 801090a:	ec4b ab16 	vmov	d6, sl, fp
 801090e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010912:	e78b      	b.n	801082c <_strtod_l+0x3d4>
 8010914:	2000      	movs	r0, #0
 8010916:	ec4b ab17 	vmov	d7, sl, fp
 801091a:	4e30      	ldr	r6, [pc, #192]	@ (80109dc <_strtod_l+0x584>)
 801091c:	1112      	asrs	r2, r2, #4
 801091e:	4601      	mov	r1, r0
 8010920:	2a01      	cmp	r2, #1
 8010922:	dc23      	bgt.n	801096c <_strtod_l+0x514>
 8010924:	b108      	cbz	r0, 801092a <_strtod_l+0x4d2>
 8010926:	ec5b ab17 	vmov	sl, fp, d7
 801092a:	4a2c      	ldr	r2, [pc, #176]	@ (80109dc <_strtod_l+0x584>)
 801092c:	482c      	ldr	r0, [pc, #176]	@ (80109e0 <_strtod_l+0x588>)
 801092e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010932:	ed92 7b00 	vldr	d7, [r2]
 8010936:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801093a:	ec4b ab16 	vmov	d6, sl, fp
 801093e:	4a29      	ldr	r2, [pc, #164]	@ (80109e4 <_strtod_l+0x58c>)
 8010940:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010944:	ee17 1a90 	vmov	r1, s15
 8010948:	400a      	ands	r2, r1
 801094a:	4282      	cmp	r2, r0
 801094c:	ec5b ab17 	vmov	sl, fp, d7
 8010950:	d898      	bhi.n	8010884 <_strtod_l+0x42c>
 8010952:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8010956:	4282      	cmp	r2, r0
 8010958:	bf86      	itte	hi
 801095a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80109e8 <_strtod_l+0x590>
 801095e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010962:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8010966:	2200      	movs	r2, #0
 8010968:	9206      	str	r2, [sp, #24]
 801096a:	e076      	b.n	8010a5a <_strtod_l+0x602>
 801096c:	f012 0f01 	tst.w	r2, #1
 8010970:	d004      	beq.n	801097c <_strtod_l+0x524>
 8010972:	ed96 6b00 	vldr	d6, [r6]
 8010976:	2001      	movs	r0, #1
 8010978:	ee27 7b06 	vmul.f64	d7, d7, d6
 801097c:	3101      	adds	r1, #1
 801097e:	1052      	asrs	r2, r2, #1
 8010980:	3608      	adds	r6, #8
 8010982:	e7cd      	b.n	8010920 <_strtod_l+0x4c8>
 8010984:	d0ef      	beq.n	8010966 <_strtod_l+0x50e>
 8010986:	4252      	negs	r2, r2
 8010988:	f012 000f 	ands.w	r0, r2, #15
 801098c:	d00a      	beq.n	80109a4 <_strtod_l+0x54c>
 801098e:	4912      	ldr	r1, [pc, #72]	@ (80109d8 <_strtod_l+0x580>)
 8010990:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010994:	ed91 7b00 	vldr	d7, [r1]
 8010998:	ec4b ab16 	vmov	d6, sl, fp
 801099c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80109a0:	ec5b ab17 	vmov	sl, fp, d7
 80109a4:	1112      	asrs	r2, r2, #4
 80109a6:	d0de      	beq.n	8010966 <_strtod_l+0x50e>
 80109a8:	2a1f      	cmp	r2, #31
 80109aa:	dd1f      	ble.n	80109ec <_strtod_l+0x594>
 80109ac:	2400      	movs	r4, #0
 80109ae:	4625      	mov	r5, r4
 80109b0:	9407      	str	r4, [sp, #28]
 80109b2:	4626      	mov	r6, r4
 80109b4:	9a05      	ldr	r2, [sp, #20]
 80109b6:	2322      	movs	r3, #34	@ 0x22
 80109b8:	f04f 0a00 	mov.w	sl, #0
 80109bc:	f04f 0b00 	mov.w	fp, #0
 80109c0:	6013      	str	r3, [r2, #0]
 80109c2:	e76a      	b.n	801089a <_strtod_l+0x442>
 80109c4:	08012ad1 	.word	0x08012ad1
 80109c8:	08012db0 	.word	0x08012db0
 80109cc:	08012ac9 	.word	0x08012ac9
 80109d0:	08012afe 	.word	0x08012afe
 80109d4:	08012c52 	.word	0x08012c52
 80109d8:	08012ce8 	.word	0x08012ce8
 80109dc:	08012cc0 	.word	0x08012cc0
 80109e0:	7ca00000 	.word	0x7ca00000
 80109e4:	7ff00000 	.word	0x7ff00000
 80109e8:	7fefffff 	.word	0x7fefffff
 80109ec:	f012 0110 	ands.w	r1, r2, #16
 80109f0:	bf18      	it	ne
 80109f2:	216a      	movne	r1, #106	@ 0x6a
 80109f4:	9106      	str	r1, [sp, #24]
 80109f6:	ec4b ab17 	vmov	d7, sl, fp
 80109fa:	49af      	ldr	r1, [pc, #700]	@ (8010cb8 <_strtod_l+0x860>)
 80109fc:	2000      	movs	r0, #0
 80109fe:	07d6      	lsls	r6, r2, #31
 8010a00:	d504      	bpl.n	8010a0c <_strtod_l+0x5b4>
 8010a02:	ed91 6b00 	vldr	d6, [r1]
 8010a06:	2001      	movs	r0, #1
 8010a08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a0c:	1052      	asrs	r2, r2, #1
 8010a0e:	f101 0108 	add.w	r1, r1, #8
 8010a12:	d1f4      	bne.n	80109fe <_strtod_l+0x5a6>
 8010a14:	b108      	cbz	r0, 8010a1a <_strtod_l+0x5c2>
 8010a16:	ec5b ab17 	vmov	sl, fp, d7
 8010a1a:	9a06      	ldr	r2, [sp, #24]
 8010a1c:	b1b2      	cbz	r2, 8010a4c <_strtod_l+0x5f4>
 8010a1e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8010a22:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8010a26:	2a00      	cmp	r2, #0
 8010a28:	4658      	mov	r0, fp
 8010a2a:	dd0f      	ble.n	8010a4c <_strtod_l+0x5f4>
 8010a2c:	2a1f      	cmp	r2, #31
 8010a2e:	dd55      	ble.n	8010adc <_strtod_l+0x684>
 8010a30:	2a34      	cmp	r2, #52	@ 0x34
 8010a32:	bfde      	ittt	le
 8010a34:	f04f 32ff 	movle.w	r2, #4294967295
 8010a38:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010a3c:	408a      	lslle	r2, r1
 8010a3e:	f04f 0a00 	mov.w	sl, #0
 8010a42:	bfcc      	ite	gt
 8010a44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010a48:	ea02 0b00 	andle.w	fp, r2, r0
 8010a4c:	ec4b ab17 	vmov	d7, sl, fp
 8010a50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a58:	d0a8      	beq.n	80109ac <_strtod_l+0x554>
 8010a5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a5c:	9805      	ldr	r0, [sp, #20]
 8010a5e:	f8cd 9000 	str.w	r9, [sp]
 8010a62:	462a      	mov	r2, r5
 8010a64:	f7ff f8de 	bl	800fc24 <__s2b>
 8010a68:	9007      	str	r0, [sp, #28]
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	f43f af0a 	beq.w	8010884 <_strtod_l+0x42c>
 8010a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a72:	1b3f      	subs	r7, r7, r4
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	bfb4      	ite	lt
 8010a78:	463b      	movlt	r3, r7
 8010a7a:	2300      	movge	r3, #0
 8010a7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a80:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8010ca8 <_strtod_l+0x850>
 8010a84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010a88:	2400      	movs	r4, #0
 8010a8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a8c:	4625      	mov	r5, r4
 8010a8e:	9b07      	ldr	r3, [sp, #28]
 8010a90:	9805      	ldr	r0, [sp, #20]
 8010a92:	6859      	ldr	r1, [r3, #4]
 8010a94:	f7ff f81e 	bl	800fad4 <_Balloc>
 8010a98:	4606      	mov	r6, r0
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	f43f aef6 	beq.w	801088c <_strtod_l+0x434>
 8010aa0:	9b07      	ldr	r3, [sp, #28]
 8010aa2:	691a      	ldr	r2, [r3, #16]
 8010aa4:	ec4b ab19 	vmov	d9, sl, fp
 8010aa8:	3202      	adds	r2, #2
 8010aaa:	f103 010c 	add.w	r1, r3, #12
 8010aae:	0092      	lsls	r2, r2, #2
 8010ab0:	300c      	adds	r0, #12
 8010ab2:	f001 f8ad 	bl	8011c10 <memcpy>
 8010ab6:	eeb0 0b49 	vmov.f64	d0, d9
 8010aba:	9805      	ldr	r0, [sp, #20]
 8010abc:	aa14      	add	r2, sp, #80	@ 0x50
 8010abe:	a913      	add	r1, sp, #76	@ 0x4c
 8010ac0:	f7ff fbe4 	bl	801028c <__d2b>
 8010ac4:	9012      	str	r0, [sp, #72]	@ 0x48
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	f43f aee0 	beq.w	801088c <_strtod_l+0x434>
 8010acc:	9805      	ldr	r0, [sp, #20]
 8010ace:	2101      	movs	r1, #1
 8010ad0:	f7ff f93e 	bl	800fd50 <__i2b>
 8010ad4:	4605      	mov	r5, r0
 8010ad6:	b940      	cbnz	r0, 8010aea <_strtod_l+0x692>
 8010ad8:	2500      	movs	r5, #0
 8010ada:	e6d7      	b.n	801088c <_strtod_l+0x434>
 8010adc:	f04f 31ff 	mov.w	r1, #4294967295
 8010ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8010ae4:	ea02 0a0a 	and.w	sl, r2, sl
 8010ae8:	e7b0      	b.n	8010a4c <_strtod_l+0x5f4>
 8010aea:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010aec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010aee:	2f00      	cmp	r7, #0
 8010af0:	bfab      	itete	ge
 8010af2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010af4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8010af6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8010afa:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8010afe:	bfac      	ite	ge
 8010b00:	eb07 0903 	addge.w	r9, r7, r3
 8010b04:	eba3 0807 	sublt.w	r8, r3, r7
 8010b08:	9b06      	ldr	r3, [sp, #24]
 8010b0a:	1aff      	subs	r7, r7, r3
 8010b0c:	4417      	add	r7, r2
 8010b0e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8010b12:	4a6a      	ldr	r2, [pc, #424]	@ (8010cbc <_strtod_l+0x864>)
 8010b14:	3f01      	subs	r7, #1
 8010b16:	4297      	cmp	r7, r2
 8010b18:	da51      	bge.n	8010bbe <_strtod_l+0x766>
 8010b1a:	1bd1      	subs	r1, r2, r7
 8010b1c:	291f      	cmp	r1, #31
 8010b1e:	eba3 0301 	sub.w	r3, r3, r1
 8010b22:	f04f 0201 	mov.w	r2, #1
 8010b26:	dc3e      	bgt.n	8010ba6 <_strtod_l+0x74e>
 8010b28:	408a      	lsls	r2, r1
 8010b2a:	920c      	str	r2, [sp, #48]	@ 0x30
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010b30:	eb09 0703 	add.w	r7, r9, r3
 8010b34:	4498      	add	r8, r3
 8010b36:	9b06      	ldr	r3, [sp, #24]
 8010b38:	45b9      	cmp	r9, r7
 8010b3a:	4498      	add	r8, r3
 8010b3c:	464b      	mov	r3, r9
 8010b3e:	bfa8      	it	ge
 8010b40:	463b      	movge	r3, r7
 8010b42:	4543      	cmp	r3, r8
 8010b44:	bfa8      	it	ge
 8010b46:	4643      	movge	r3, r8
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	bfc2      	ittt	gt
 8010b4c:	1aff      	subgt	r7, r7, r3
 8010b4e:	eba8 0803 	subgt.w	r8, r8, r3
 8010b52:	eba9 0903 	subgt.w	r9, r9, r3
 8010b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	dd16      	ble.n	8010b8a <_strtod_l+0x732>
 8010b5c:	4629      	mov	r1, r5
 8010b5e:	9805      	ldr	r0, [sp, #20]
 8010b60:	461a      	mov	r2, r3
 8010b62:	f7ff f9ad 	bl	800fec0 <__pow5mult>
 8010b66:	4605      	mov	r5, r0
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d0b5      	beq.n	8010ad8 <_strtod_l+0x680>
 8010b6c:	4601      	mov	r1, r0
 8010b6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010b70:	9805      	ldr	r0, [sp, #20]
 8010b72:	f7ff f903 	bl	800fd7c <__multiply>
 8010b76:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	f43f ae87 	beq.w	801088c <_strtod_l+0x434>
 8010b7e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010b80:	9805      	ldr	r0, [sp, #20]
 8010b82:	f7fe ffe7 	bl	800fb54 <_Bfree>
 8010b86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b88:	9312      	str	r3, [sp, #72]	@ 0x48
 8010b8a:	2f00      	cmp	r7, #0
 8010b8c:	dc1b      	bgt.n	8010bc6 <_strtod_l+0x76e>
 8010b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	dd21      	ble.n	8010bd8 <_strtod_l+0x780>
 8010b94:	4631      	mov	r1, r6
 8010b96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010b98:	9805      	ldr	r0, [sp, #20]
 8010b9a:	f7ff f991 	bl	800fec0 <__pow5mult>
 8010b9e:	4606      	mov	r6, r0
 8010ba0:	b9d0      	cbnz	r0, 8010bd8 <_strtod_l+0x780>
 8010ba2:	2600      	movs	r6, #0
 8010ba4:	e672      	b.n	801088c <_strtod_l+0x434>
 8010ba6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8010baa:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8010bae:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8010bb2:	37e2      	adds	r7, #226	@ 0xe2
 8010bb4:	fa02 f107 	lsl.w	r1, r2, r7
 8010bb8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010bba:	920c      	str	r2, [sp, #48]	@ 0x30
 8010bbc:	e7b8      	b.n	8010b30 <_strtod_l+0x6d8>
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	e7f9      	b.n	8010bba <_strtod_l+0x762>
 8010bc6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010bc8:	9805      	ldr	r0, [sp, #20]
 8010bca:	463a      	mov	r2, r7
 8010bcc:	f7ff f9d2 	bl	800ff74 <__lshift>
 8010bd0:	9012      	str	r0, [sp, #72]	@ 0x48
 8010bd2:	2800      	cmp	r0, #0
 8010bd4:	d1db      	bne.n	8010b8e <_strtod_l+0x736>
 8010bd6:	e659      	b.n	801088c <_strtod_l+0x434>
 8010bd8:	f1b8 0f00 	cmp.w	r8, #0
 8010bdc:	dd07      	ble.n	8010bee <_strtod_l+0x796>
 8010bde:	4631      	mov	r1, r6
 8010be0:	9805      	ldr	r0, [sp, #20]
 8010be2:	4642      	mov	r2, r8
 8010be4:	f7ff f9c6 	bl	800ff74 <__lshift>
 8010be8:	4606      	mov	r6, r0
 8010bea:	2800      	cmp	r0, #0
 8010bec:	d0d9      	beq.n	8010ba2 <_strtod_l+0x74a>
 8010bee:	f1b9 0f00 	cmp.w	r9, #0
 8010bf2:	dd08      	ble.n	8010c06 <_strtod_l+0x7ae>
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	9805      	ldr	r0, [sp, #20]
 8010bf8:	464a      	mov	r2, r9
 8010bfa:	f7ff f9bb 	bl	800ff74 <__lshift>
 8010bfe:	4605      	mov	r5, r0
 8010c00:	2800      	cmp	r0, #0
 8010c02:	f43f ae43 	beq.w	801088c <_strtod_l+0x434>
 8010c06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010c08:	9805      	ldr	r0, [sp, #20]
 8010c0a:	4632      	mov	r2, r6
 8010c0c:	f7ff fa3a 	bl	8010084 <__mdiff>
 8010c10:	4604      	mov	r4, r0
 8010c12:	2800      	cmp	r0, #0
 8010c14:	f43f ae3a 	beq.w	801088c <_strtod_l+0x434>
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010c1e:	60c3      	str	r3, [r0, #12]
 8010c20:	4629      	mov	r1, r5
 8010c22:	f7ff fa13 	bl	801004c <__mcmp>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	da4c      	bge.n	8010cc4 <_strtod_l+0x86c>
 8010c2a:	ea58 080a 	orrs.w	r8, r8, sl
 8010c2e:	d172      	bne.n	8010d16 <_strtod_l+0x8be>
 8010c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d16e      	bne.n	8010d16 <_strtod_l+0x8be>
 8010c38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c3c:	0d1b      	lsrs	r3, r3, #20
 8010c3e:	051b      	lsls	r3, r3, #20
 8010c40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c44:	d967      	bls.n	8010d16 <_strtod_l+0x8be>
 8010c46:	6963      	ldr	r3, [r4, #20]
 8010c48:	b913      	cbnz	r3, 8010c50 <_strtod_l+0x7f8>
 8010c4a:	6923      	ldr	r3, [r4, #16]
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	dd62      	ble.n	8010d16 <_strtod_l+0x8be>
 8010c50:	4621      	mov	r1, r4
 8010c52:	2201      	movs	r2, #1
 8010c54:	9805      	ldr	r0, [sp, #20]
 8010c56:	f7ff f98d 	bl	800ff74 <__lshift>
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	4604      	mov	r4, r0
 8010c5e:	f7ff f9f5 	bl	801004c <__mcmp>
 8010c62:	2800      	cmp	r0, #0
 8010c64:	dd57      	ble.n	8010d16 <_strtod_l+0x8be>
 8010c66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c6a:	9a06      	ldr	r2, [sp, #24]
 8010c6c:	0d1b      	lsrs	r3, r3, #20
 8010c6e:	051b      	lsls	r3, r3, #20
 8010c70:	2a00      	cmp	r2, #0
 8010c72:	d06e      	beq.n	8010d52 <_strtod_l+0x8fa>
 8010c74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c78:	d86b      	bhi.n	8010d52 <_strtod_l+0x8fa>
 8010c7a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010c7e:	f67f ae99 	bls.w	80109b4 <_strtod_l+0x55c>
 8010c82:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8010cb0 <_strtod_l+0x858>
 8010c86:	ec4b ab16 	vmov	d6, sl, fp
 8010c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8010cc0 <_strtod_l+0x868>)
 8010c8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010c90:	ee17 2a90 	vmov	r2, s15
 8010c94:	4013      	ands	r3, r2
 8010c96:	ec5b ab17 	vmov	sl, fp, d7
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f47f ae01 	bne.w	80108a2 <_strtod_l+0x44a>
 8010ca0:	9a05      	ldr	r2, [sp, #20]
 8010ca2:	2322      	movs	r3, #34	@ 0x22
 8010ca4:	6013      	str	r3, [r2, #0]
 8010ca6:	e5fc      	b.n	80108a2 <_strtod_l+0x44a>
 8010ca8:	ffc00000 	.word	0xffc00000
 8010cac:	41dfffff 	.word	0x41dfffff
 8010cb0:	00000000 	.word	0x00000000
 8010cb4:	39500000 	.word	0x39500000
 8010cb8:	08012dd8 	.word	0x08012dd8
 8010cbc:	fffffc02 	.word	0xfffffc02
 8010cc0:	7ff00000 	.word	0x7ff00000
 8010cc4:	46d9      	mov	r9, fp
 8010cc6:	d15d      	bne.n	8010d84 <_strtod_l+0x92c>
 8010cc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ccc:	f1b8 0f00 	cmp.w	r8, #0
 8010cd0:	d02a      	beq.n	8010d28 <_strtod_l+0x8d0>
 8010cd2:	4aa9      	ldr	r2, [pc, #676]	@ (8010f78 <_strtod_l+0xb20>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d12a      	bne.n	8010d2e <_strtod_l+0x8d6>
 8010cd8:	9b06      	ldr	r3, [sp, #24]
 8010cda:	4652      	mov	r2, sl
 8010cdc:	b1fb      	cbz	r3, 8010d1e <_strtod_l+0x8c6>
 8010cde:	4ba7      	ldr	r3, [pc, #668]	@ (8010f7c <_strtod_l+0xb24>)
 8010ce0:	ea0b 0303 	and.w	r3, fp, r3
 8010ce4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8010cec:	d81a      	bhi.n	8010d24 <_strtod_l+0x8cc>
 8010cee:	0d1b      	lsrs	r3, r3, #20
 8010cf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d118      	bne.n	8010d2e <_strtod_l+0x8d6>
 8010cfc:	4ba0      	ldr	r3, [pc, #640]	@ (8010f80 <_strtod_l+0xb28>)
 8010cfe:	4599      	cmp	r9, r3
 8010d00:	d102      	bne.n	8010d08 <_strtod_l+0x8b0>
 8010d02:	3201      	adds	r2, #1
 8010d04:	f43f adc2 	beq.w	801088c <_strtod_l+0x434>
 8010d08:	4b9c      	ldr	r3, [pc, #624]	@ (8010f7c <_strtod_l+0xb24>)
 8010d0a:	ea09 0303 	and.w	r3, r9, r3
 8010d0e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8010d12:	f04f 0a00 	mov.w	sl, #0
 8010d16:	9b06      	ldr	r3, [sp, #24]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d1b2      	bne.n	8010c82 <_strtod_l+0x82a>
 8010d1c:	e5c1      	b.n	80108a2 <_strtod_l+0x44a>
 8010d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d22:	e7e9      	b.n	8010cf8 <_strtod_l+0x8a0>
 8010d24:	460b      	mov	r3, r1
 8010d26:	e7e7      	b.n	8010cf8 <_strtod_l+0x8a0>
 8010d28:	ea53 030a 	orrs.w	r3, r3, sl
 8010d2c:	d09b      	beq.n	8010c66 <_strtod_l+0x80e>
 8010d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d30:	b1c3      	cbz	r3, 8010d64 <_strtod_l+0x90c>
 8010d32:	ea13 0f09 	tst.w	r3, r9
 8010d36:	d0ee      	beq.n	8010d16 <_strtod_l+0x8be>
 8010d38:	9a06      	ldr	r2, [sp, #24]
 8010d3a:	4650      	mov	r0, sl
 8010d3c:	4659      	mov	r1, fp
 8010d3e:	f1b8 0f00 	cmp.w	r8, #0
 8010d42:	d013      	beq.n	8010d6c <_strtod_l+0x914>
 8010d44:	f7ff fb6d 	bl	8010422 <sulp>
 8010d48:	ee39 7b00 	vadd.f64	d7, d9, d0
 8010d4c:	ec5b ab17 	vmov	sl, fp, d7
 8010d50:	e7e1      	b.n	8010d16 <_strtod_l+0x8be>
 8010d52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010d56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010d5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010d5e:	f04f 3aff 	mov.w	sl, #4294967295
 8010d62:	e7d8      	b.n	8010d16 <_strtod_l+0x8be>
 8010d64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d66:	ea13 0f0a 	tst.w	r3, sl
 8010d6a:	e7e4      	b.n	8010d36 <_strtod_l+0x8de>
 8010d6c:	f7ff fb59 	bl	8010422 <sulp>
 8010d70:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010d74:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7c:	ec5b ab10 	vmov	sl, fp, d0
 8010d80:	d1c9      	bne.n	8010d16 <_strtod_l+0x8be>
 8010d82:	e617      	b.n	80109b4 <_strtod_l+0x55c>
 8010d84:	4629      	mov	r1, r5
 8010d86:	4620      	mov	r0, r4
 8010d88:	f7ff fad8 	bl	801033c <__ratio>
 8010d8c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8010d90:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d98:	d85d      	bhi.n	8010e56 <_strtod_l+0x9fe>
 8010d9a:	f1b8 0f00 	cmp.w	r8, #0
 8010d9e:	d164      	bne.n	8010e6a <_strtod_l+0xa12>
 8010da0:	f1ba 0f00 	cmp.w	sl, #0
 8010da4:	d14b      	bne.n	8010e3e <_strtod_l+0x9e6>
 8010da6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010daa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d160      	bne.n	8010e74 <_strtod_l+0xa1c>
 8010db2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8010db6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dbe:	d401      	bmi.n	8010dc4 <_strtod_l+0x96c>
 8010dc0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010dc4:	eeb1 ab48 	vneg.f64	d10, d8
 8010dc8:	486c      	ldr	r0, [pc, #432]	@ (8010f7c <_strtod_l+0xb24>)
 8010dca:	496e      	ldr	r1, [pc, #440]	@ (8010f84 <_strtod_l+0xb2c>)
 8010dcc:	ea09 0700 	and.w	r7, r9, r0
 8010dd0:	428f      	cmp	r7, r1
 8010dd2:	ec53 2b1a 	vmov	r2, r3, d10
 8010dd6:	d17d      	bne.n	8010ed4 <_strtod_l+0xa7c>
 8010dd8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8010ddc:	ec4b ab1c 	vmov	d12, sl, fp
 8010de0:	eeb0 0b4c 	vmov.f64	d0, d12
 8010de4:	f7ff f9e2 	bl	80101ac <__ulp>
 8010de8:	4864      	ldr	r0, [pc, #400]	@ (8010f7c <_strtod_l+0xb24>)
 8010dea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8010dee:	ee1c 3a90 	vmov	r3, s25
 8010df2:	4a65      	ldr	r2, [pc, #404]	@ (8010f88 <_strtod_l+0xb30>)
 8010df4:	ea03 0100 	and.w	r1, r3, r0
 8010df8:	4291      	cmp	r1, r2
 8010dfa:	ec5b ab1c 	vmov	sl, fp, d12
 8010dfe:	d93c      	bls.n	8010e7a <_strtod_l+0xa22>
 8010e00:	ee19 2a90 	vmov	r2, s19
 8010e04:	4b5e      	ldr	r3, [pc, #376]	@ (8010f80 <_strtod_l+0xb28>)
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d104      	bne.n	8010e14 <_strtod_l+0x9bc>
 8010e0a:	ee19 3a10 	vmov	r3, s18
 8010e0e:	3301      	adds	r3, #1
 8010e10:	f43f ad3c 	beq.w	801088c <_strtod_l+0x434>
 8010e14:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8010f80 <_strtod_l+0xb28>
 8010e18:	f04f 3aff 	mov.w	sl, #4294967295
 8010e1c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010e1e:	9805      	ldr	r0, [sp, #20]
 8010e20:	f7fe fe98 	bl	800fb54 <_Bfree>
 8010e24:	9805      	ldr	r0, [sp, #20]
 8010e26:	4631      	mov	r1, r6
 8010e28:	f7fe fe94 	bl	800fb54 <_Bfree>
 8010e2c:	9805      	ldr	r0, [sp, #20]
 8010e2e:	4629      	mov	r1, r5
 8010e30:	f7fe fe90 	bl	800fb54 <_Bfree>
 8010e34:	9805      	ldr	r0, [sp, #20]
 8010e36:	4621      	mov	r1, r4
 8010e38:	f7fe fe8c 	bl	800fb54 <_Bfree>
 8010e3c:	e627      	b.n	8010a8e <_strtod_l+0x636>
 8010e3e:	f1ba 0f01 	cmp.w	sl, #1
 8010e42:	d103      	bne.n	8010e4c <_strtod_l+0x9f4>
 8010e44:	f1bb 0f00 	cmp.w	fp, #0
 8010e48:	f43f adb4 	beq.w	80109b4 <_strtod_l+0x55c>
 8010e4c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010e50:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010e54:	e7b8      	b.n	8010dc8 <_strtod_l+0x970>
 8010e56:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010e5a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010e5e:	f1b8 0f00 	cmp.w	r8, #0
 8010e62:	d0af      	beq.n	8010dc4 <_strtod_l+0x96c>
 8010e64:	eeb0 ab48 	vmov.f64	d10, d8
 8010e68:	e7ae      	b.n	8010dc8 <_strtod_l+0x970>
 8010e6a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8010e6e:	eeb0 8b4a 	vmov.f64	d8, d10
 8010e72:	e7a9      	b.n	8010dc8 <_strtod_l+0x970>
 8010e74:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010e78:	e7a6      	b.n	8010dc8 <_strtod_l+0x970>
 8010e7a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010e7e:	9b06      	ldr	r3, [sp, #24]
 8010e80:	46d9      	mov	r9, fp
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1ca      	bne.n	8010e1c <_strtod_l+0x9c4>
 8010e86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010e8a:	0d1b      	lsrs	r3, r3, #20
 8010e8c:	051b      	lsls	r3, r3, #20
 8010e8e:	429f      	cmp	r7, r3
 8010e90:	d1c4      	bne.n	8010e1c <_strtod_l+0x9c4>
 8010e92:	ec51 0b18 	vmov	r0, r1, d8
 8010e96:	f7ef fc4f 	bl	8000738 <__aeabi_d2lz>
 8010e9a:	f7ef fc07 	bl	80006ac <__aeabi_l2d>
 8010e9e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8010ea2:	ec41 0b17 	vmov	d7, r0, r1
 8010ea6:	ea49 090a 	orr.w	r9, r9, sl
 8010eaa:	ea59 0908 	orrs.w	r9, r9, r8
 8010eae:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010eb2:	d03c      	beq.n	8010f2e <_strtod_l+0xad6>
 8010eb4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010f60 <_strtod_l+0xb08>
 8010eb8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec0:	f53f acef 	bmi.w	80108a2 <_strtod_l+0x44a>
 8010ec4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8010f68 <_strtod_l+0xb10>
 8010ec8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed0:	dda4      	ble.n	8010e1c <_strtod_l+0x9c4>
 8010ed2:	e4e6      	b.n	80108a2 <_strtod_l+0x44a>
 8010ed4:	9906      	ldr	r1, [sp, #24]
 8010ed6:	b1e1      	cbz	r1, 8010f12 <_strtod_l+0xaba>
 8010ed8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8010edc:	d819      	bhi.n	8010f12 <_strtod_l+0xaba>
 8010ede:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee6:	d811      	bhi.n	8010f0c <_strtod_l+0xab4>
 8010ee8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8010eec:	ee18 3a10 	vmov	r3, s16
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	bf38      	it	cc
 8010ef4:	2301      	movcc	r3, #1
 8010ef6:	ee08 3a10 	vmov	s16, r3
 8010efa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8010efe:	f1b8 0f00 	cmp.w	r8, #0
 8010f02:	d111      	bne.n	8010f28 <_strtod_l+0xad0>
 8010f04:	eeb1 7b48 	vneg.f64	d7, d8
 8010f08:	ec53 2b17 	vmov	r2, r3, d7
 8010f0c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8010f10:	1bcb      	subs	r3, r1, r7
 8010f12:	eeb0 0b49 	vmov.f64	d0, d9
 8010f16:	ec43 2b1a 	vmov	d10, r2, r3
 8010f1a:	f7ff f947 	bl	80101ac <__ulp>
 8010f1e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8010f22:	ec5b ab19 	vmov	sl, fp, d9
 8010f26:	e7aa      	b.n	8010e7e <_strtod_l+0xa26>
 8010f28:	eeb0 7b48 	vmov.f64	d7, d8
 8010f2c:	e7ec      	b.n	8010f08 <_strtod_l+0xab0>
 8010f2e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8010f70 <_strtod_l+0xb18>
 8010f32:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3a:	f57f af6f 	bpl.w	8010e1c <_strtod_l+0x9c4>
 8010f3e:	e4b0      	b.n	80108a2 <_strtod_l+0x44a>
 8010f40:	2300      	movs	r3, #0
 8010f42:	9308      	str	r3, [sp, #32]
 8010f44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010f48:	6013      	str	r3, [r2, #0]
 8010f4a:	f7ff bac4 	b.w	80104d6 <_strtod_l+0x7e>
 8010f4e:	2a65      	cmp	r2, #101	@ 0x65
 8010f50:	f43f abbf 	beq.w	80106d2 <_strtod_l+0x27a>
 8010f54:	2a45      	cmp	r2, #69	@ 0x45
 8010f56:	f43f abbc 	beq.w	80106d2 <_strtod_l+0x27a>
 8010f5a:	2101      	movs	r1, #1
 8010f5c:	f7ff bbf4 	b.w	8010748 <_strtod_l+0x2f0>
 8010f60:	94a03595 	.word	0x94a03595
 8010f64:	3fdfffff 	.word	0x3fdfffff
 8010f68:	35afe535 	.word	0x35afe535
 8010f6c:	3fe00000 	.word	0x3fe00000
 8010f70:	94a03595 	.word	0x94a03595
 8010f74:	3fcfffff 	.word	0x3fcfffff
 8010f78:	000fffff 	.word	0x000fffff
 8010f7c:	7ff00000 	.word	0x7ff00000
 8010f80:	7fefffff 	.word	0x7fefffff
 8010f84:	7fe00000 	.word	0x7fe00000
 8010f88:	7c9fffff 	.word	0x7c9fffff

08010f8c <_strtod_r>:
 8010f8c:	4b01      	ldr	r3, [pc, #4]	@ (8010f94 <_strtod_r+0x8>)
 8010f8e:	f7ff ba63 	b.w	8010458 <_strtod_l>
 8010f92:	bf00      	nop
 8010f94:	24000080 	.word	0x24000080

08010f98 <_strtol_l.isra.0>:
 8010f98:	2b24      	cmp	r3, #36	@ 0x24
 8010f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f9e:	4686      	mov	lr, r0
 8010fa0:	4690      	mov	r8, r2
 8010fa2:	d801      	bhi.n	8010fa8 <_strtol_l.isra.0+0x10>
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d106      	bne.n	8010fb6 <_strtol_l.isra.0+0x1e>
 8010fa8:	f7fd fe78 	bl	800ec9c <__errno>
 8010fac:	2316      	movs	r3, #22
 8010fae:	6003      	str	r3, [r0, #0]
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fb6:	4834      	ldr	r0, [pc, #208]	@ (8011088 <_strtol_l.isra.0+0xf0>)
 8010fb8:	460d      	mov	r5, r1
 8010fba:	462a      	mov	r2, r5
 8010fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fc0:	5d06      	ldrb	r6, [r0, r4]
 8010fc2:	f016 0608 	ands.w	r6, r6, #8
 8010fc6:	d1f8      	bne.n	8010fba <_strtol_l.isra.0+0x22>
 8010fc8:	2c2d      	cmp	r4, #45	@ 0x2d
 8010fca:	d110      	bne.n	8010fee <_strtol_l.isra.0+0x56>
 8010fcc:	782c      	ldrb	r4, [r5, #0]
 8010fce:	2601      	movs	r6, #1
 8010fd0:	1c95      	adds	r5, r2, #2
 8010fd2:	f033 0210 	bics.w	r2, r3, #16
 8010fd6:	d115      	bne.n	8011004 <_strtol_l.isra.0+0x6c>
 8010fd8:	2c30      	cmp	r4, #48	@ 0x30
 8010fda:	d10d      	bne.n	8010ff8 <_strtol_l.isra.0+0x60>
 8010fdc:	782a      	ldrb	r2, [r5, #0]
 8010fde:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010fe2:	2a58      	cmp	r2, #88	@ 0x58
 8010fe4:	d108      	bne.n	8010ff8 <_strtol_l.isra.0+0x60>
 8010fe6:	786c      	ldrb	r4, [r5, #1]
 8010fe8:	3502      	adds	r5, #2
 8010fea:	2310      	movs	r3, #16
 8010fec:	e00a      	b.n	8011004 <_strtol_l.isra.0+0x6c>
 8010fee:	2c2b      	cmp	r4, #43	@ 0x2b
 8010ff0:	bf04      	itt	eq
 8010ff2:	782c      	ldrbeq	r4, [r5, #0]
 8010ff4:	1c95      	addeq	r5, r2, #2
 8010ff6:	e7ec      	b.n	8010fd2 <_strtol_l.isra.0+0x3a>
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d1f6      	bne.n	8010fea <_strtol_l.isra.0+0x52>
 8010ffc:	2c30      	cmp	r4, #48	@ 0x30
 8010ffe:	bf14      	ite	ne
 8011000:	230a      	movne	r3, #10
 8011002:	2308      	moveq	r3, #8
 8011004:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011008:	f10c 3cff 	add.w	ip, ip, #4294967295
 801100c:	2200      	movs	r2, #0
 801100e:	fbbc f9f3 	udiv	r9, ip, r3
 8011012:	4610      	mov	r0, r2
 8011014:	fb03 ca19 	mls	sl, r3, r9, ip
 8011018:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801101c:	2f09      	cmp	r7, #9
 801101e:	d80f      	bhi.n	8011040 <_strtol_l.isra.0+0xa8>
 8011020:	463c      	mov	r4, r7
 8011022:	42a3      	cmp	r3, r4
 8011024:	dd1b      	ble.n	801105e <_strtol_l.isra.0+0xc6>
 8011026:	1c57      	adds	r7, r2, #1
 8011028:	d007      	beq.n	801103a <_strtol_l.isra.0+0xa2>
 801102a:	4581      	cmp	r9, r0
 801102c:	d314      	bcc.n	8011058 <_strtol_l.isra.0+0xc0>
 801102e:	d101      	bne.n	8011034 <_strtol_l.isra.0+0x9c>
 8011030:	45a2      	cmp	sl, r4
 8011032:	db11      	blt.n	8011058 <_strtol_l.isra.0+0xc0>
 8011034:	fb00 4003 	mla	r0, r0, r3, r4
 8011038:	2201      	movs	r2, #1
 801103a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801103e:	e7eb      	b.n	8011018 <_strtol_l.isra.0+0x80>
 8011040:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011044:	2f19      	cmp	r7, #25
 8011046:	d801      	bhi.n	801104c <_strtol_l.isra.0+0xb4>
 8011048:	3c37      	subs	r4, #55	@ 0x37
 801104a:	e7ea      	b.n	8011022 <_strtol_l.isra.0+0x8a>
 801104c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011050:	2f19      	cmp	r7, #25
 8011052:	d804      	bhi.n	801105e <_strtol_l.isra.0+0xc6>
 8011054:	3c57      	subs	r4, #87	@ 0x57
 8011056:	e7e4      	b.n	8011022 <_strtol_l.isra.0+0x8a>
 8011058:	f04f 32ff 	mov.w	r2, #4294967295
 801105c:	e7ed      	b.n	801103a <_strtol_l.isra.0+0xa2>
 801105e:	1c53      	adds	r3, r2, #1
 8011060:	d108      	bne.n	8011074 <_strtol_l.isra.0+0xdc>
 8011062:	2322      	movs	r3, #34	@ 0x22
 8011064:	f8ce 3000 	str.w	r3, [lr]
 8011068:	4660      	mov	r0, ip
 801106a:	f1b8 0f00 	cmp.w	r8, #0
 801106e:	d0a0      	beq.n	8010fb2 <_strtol_l.isra.0+0x1a>
 8011070:	1e69      	subs	r1, r5, #1
 8011072:	e006      	b.n	8011082 <_strtol_l.isra.0+0xea>
 8011074:	b106      	cbz	r6, 8011078 <_strtol_l.isra.0+0xe0>
 8011076:	4240      	negs	r0, r0
 8011078:	f1b8 0f00 	cmp.w	r8, #0
 801107c:	d099      	beq.n	8010fb2 <_strtol_l.isra.0+0x1a>
 801107e:	2a00      	cmp	r2, #0
 8011080:	d1f6      	bne.n	8011070 <_strtol_l.isra.0+0xd8>
 8011082:	f8c8 1000 	str.w	r1, [r8]
 8011086:	e794      	b.n	8010fb2 <_strtol_l.isra.0+0x1a>
 8011088:	08012e01 	.word	0x08012e01

0801108c <_strtol_r>:
 801108c:	f7ff bf84 	b.w	8010f98 <_strtol_l.isra.0>

08011090 <__ssputs_r>:
 8011090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011094:	688e      	ldr	r6, [r1, #8]
 8011096:	461f      	mov	r7, r3
 8011098:	42be      	cmp	r6, r7
 801109a:	680b      	ldr	r3, [r1, #0]
 801109c:	4682      	mov	sl, r0
 801109e:	460c      	mov	r4, r1
 80110a0:	4690      	mov	r8, r2
 80110a2:	d82d      	bhi.n	8011100 <__ssputs_r+0x70>
 80110a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80110ac:	d026      	beq.n	80110fc <__ssputs_r+0x6c>
 80110ae:	6965      	ldr	r5, [r4, #20]
 80110b0:	6909      	ldr	r1, [r1, #16]
 80110b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110b6:	eba3 0901 	sub.w	r9, r3, r1
 80110ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110be:	1c7b      	adds	r3, r7, #1
 80110c0:	444b      	add	r3, r9
 80110c2:	106d      	asrs	r5, r5, #1
 80110c4:	429d      	cmp	r5, r3
 80110c6:	bf38      	it	cc
 80110c8:	461d      	movcc	r5, r3
 80110ca:	0553      	lsls	r3, r2, #21
 80110cc:	d527      	bpl.n	801111e <__ssputs_r+0x8e>
 80110ce:	4629      	mov	r1, r5
 80110d0:	f7fe fc74 	bl	800f9bc <_malloc_r>
 80110d4:	4606      	mov	r6, r0
 80110d6:	b360      	cbz	r0, 8011132 <__ssputs_r+0xa2>
 80110d8:	6921      	ldr	r1, [r4, #16]
 80110da:	464a      	mov	r2, r9
 80110dc:	f000 fd98 	bl	8011c10 <memcpy>
 80110e0:	89a3      	ldrh	r3, [r4, #12]
 80110e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80110e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110ea:	81a3      	strh	r3, [r4, #12]
 80110ec:	6126      	str	r6, [r4, #16]
 80110ee:	6165      	str	r5, [r4, #20]
 80110f0:	444e      	add	r6, r9
 80110f2:	eba5 0509 	sub.w	r5, r5, r9
 80110f6:	6026      	str	r6, [r4, #0]
 80110f8:	60a5      	str	r5, [r4, #8]
 80110fa:	463e      	mov	r6, r7
 80110fc:	42be      	cmp	r6, r7
 80110fe:	d900      	bls.n	8011102 <__ssputs_r+0x72>
 8011100:	463e      	mov	r6, r7
 8011102:	6820      	ldr	r0, [r4, #0]
 8011104:	4632      	mov	r2, r6
 8011106:	4641      	mov	r1, r8
 8011108:	f000 fd57 	bl	8011bba <memmove>
 801110c:	68a3      	ldr	r3, [r4, #8]
 801110e:	1b9b      	subs	r3, r3, r6
 8011110:	60a3      	str	r3, [r4, #8]
 8011112:	6823      	ldr	r3, [r4, #0]
 8011114:	4433      	add	r3, r6
 8011116:	6023      	str	r3, [r4, #0]
 8011118:	2000      	movs	r0, #0
 801111a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801111e:	462a      	mov	r2, r5
 8011120:	f001 f90b 	bl	801233a <_realloc_r>
 8011124:	4606      	mov	r6, r0
 8011126:	2800      	cmp	r0, #0
 8011128:	d1e0      	bne.n	80110ec <__ssputs_r+0x5c>
 801112a:	6921      	ldr	r1, [r4, #16]
 801112c:	4650      	mov	r0, sl
 801112e:	f7fe fbd1 	bl	800f8d4 <_free_r>
 8011132:	230c      	movs	r3, #12
 8011134:	f8ca 3000 	str.w	r3, [sl]
 8011138:	89a3      	ldrh	r3, [r4, #12]
 801113a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801113e:	81a3      	strh	r3, [r4, #12]
 8011140:	f04f 30ff 	mov.w	r0, #4294967295
 8011144:	e7e9      	b.n	801111a <__ssputs_r+0x8a>
	...

08011148 <_svfiprintf_r>:
 8011148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801114c:	4698      	mov	r8, r3
 801114e:	898b      	ldrh	r3, [r1, #12]
 8011150:	061b      	lsls	r3, r3, #24
 8011152:	b09d      	sub	sp, #116	@ 0x74
 8011154:	4607      	mov	r7, r0
 8011156:	460d      	mov	r5, r1
 8011158:	4614      	mov	r4, r2
 801115a:	d510      	bpl.n	801117e <_svfiprintf_r+0x36>
 801115c:	690b      	ldr	r3, [r1, #16]
 801115e:	b973      	cbnz	r3, 801117e <_svfiprintf_r+0x36>
 8011160:	2140      	movs	r1, #64	@ 0x40
 8011162:	f7fe fc2b 	bl	800f9bc <_malloc_r>
 8011166:	6028      	str	r0, [r5, #0]
 8011168:	6128      	str	r0, [r5, #16]
 801116a:	b930      	cbnz	r0, 801117a <_svfiprintf_r+0x32>
 801116c:	230c      	movs	r3, #12
 801116e:	603b      	str	r3, [r7, #0]
 8011170:	f04f 30ff 	mov.w	r0, #4294967295
 8011174:	b01d      	add	sp, #116	@ 0x74
 8011176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117a:	2340      	movs	r3, #64	@ 0x40
 801117c:	616b      	str	r3, [r5, #20]
 801117e:	2300      	movs	r3, #0
 8011180:	9309      	str	r3, [sp, #36]	@ 0x24
 8011182:	2320      	movs	r3, #32
 8011184:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011188:	f8cd 800c 	str.w	r8, [sp, #12]
 801118c:	2330      	movs	r3, #48	@ 0x30
 801118e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801132c <_svfiprintf_r+0x1e4>
 8011192:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011196:	f04f 0901 	mov.w	r9, #1
 801119a:	4623      	mov	r3, r4
 801119c:	469a      	mov	sl, r3
 801119e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111a2:	b10a      	cbz	r2, 80111a8 <_svfiprintf_r+0x60>
 80111a4:	2a25      	cmp	r2, #37	@ 0x25
 80111a6:	d1f9      	bne.n	801119c <_svfiprintf_r+0x54>
 80111a8:	ebba 0b04 	subs.w	fp, sl, r4
 80111ac:	d00b      	beq.n	80111c6 <_svfiprintf_r+0x7e>
 80111ae:	465b      	mov	r3, fp
 80111b0:	4622      	mov	r2, r4
 80111b2:	4629      	mov	r1, r5
 80111b4:	4638      	mov	r0, r7
 80111b6:	f7ff ff6b 	bl	8011090 <__ssputs_r>
 80111ba:	3001      	adds	r0, #1
 80111bc:	f000 80a7 	beq.w	801130e <_svfiprintf_r+0x1c6>
 80111c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111c2:	445a      	add	r2, fp
 80111c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80111c6:	f89a 3000 	ldrb.w	r3, [sl]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f000 809f 	beq.w	801130e <_svfiprintf_r+0x1c6>
 80111d0:	2300      	movs	r3, #0
 80111d2:	f04f 32ff 	mov.w	r2, #4294967295
 80111d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111da:	f10a 0a01 	add.w	sl, sl, #1
 80111de:	9304      	str	r3, [sp, #16]
 80111e0:	9307      	str	r3, [sp, #28]
 80111e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80111e8:	4654      	mov	r4, sl
 80111ea:	2205      	movs	r2, #5
 80111ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111f0:	484e      	ldr	r0, [pc, #312]	@ (801132c <_svfiprintf_r+0x1e4>)
 80111f2:	f7ef f875 	bl	80002e0 <memchr>
 80111f6:	9a04      	ldr	r2, [sp, #16]
 80111f8:	b9d8      	cbnz	r0, 8011232 <_svfiprintf_r+0xea>
 80111fa:	06d0      	lsls	r0, r2, #27
 80111fc:	bf44      	itt	mi
 80111fe:	2320      	movmi	r3, #32
 8011200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011204:	0711      	lsls	r1, r2, #28
 8011206:	bf44      	itt	mi
 8011208:	232b      	movmi	r3, #43	@ 0x2b
 801120a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801120e:	f89a 3000 	ldrb.w	r3, [sl]
 8011212:	2b2a      	cmp	r3, #42	@ 0x2a
 8011214:	d015      	beq.n	8011242 <_svfiprintf_r+0xfa>
 8011216:	9a07      	ldr	r2, [sp, #28]
 8011218:	4654      	mov	r4, sl
 801121a:	2000      	movs	r0, #0
 801121c:	f04f 0c0a 	mov.w	ip, #10
 8011220:	4621      	mov	r1, r4
 8011222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011226:	3b30      	subs	r3, #48	@ 0x30
 8011228:	2b09      	cmp	r3, #9
 801122a:	d94b      	bls.n	80112c4 <_svfiprintf_r+0x17c>
 801122c:	b1b0      	cbz	r0, 801125c <_svfiprintf_r+0x114>
 801122e:	9207      	str	r2, [sp, #28]
 8011230:	e014      	b.n	801125c <_svfiprintf_r+0x114>
 8011232:	eba0 0308 	sub.w	r3, r0, r8
 8011236:	fa09 f303 	lsl.w	r3, r9, r3
 801123a:	4313      	orrs	r3, r2
 801123c:	9304      	str	r3, [sp, #16]
 801123e:	46a2      	mov	sl, r4
 8011240:	e7d2      	b.n	80111e8 <_svfiprintf_r+0xa0>
 8011242:	9b03      	ldr	r3, [sp, #12]
 8011244:	1d19      	adds	r1, r3, #4
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	9103      	str	r1, [sp, #12]
 801124a:	2b00      	cmp	r3, #0
 801124c:	bfbb      	ittet	lt
 801124e:	425b      	neglt	r3, r3
 8011250:	f042 0202 	orrlt.w	r2, r2, #2
 8011254:	9307      	strge	r3, [sp, #28]
 8011256:	9307      	strlt	r3, [sp, #28]
 8011258:	bfb8      	it	lt
 801125a:	9204      	strlt	r2, [sp, #16]
 801125c:	7823      	ldrb	r3, [r4, #0]
 801125e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011260:	d10a      	bne.n	8011278 <_svfiprintf_r+0x130>
 8011262:	7863      	ldrb	r3, [r4, #1]
 8011264:	2b2a      	cmp	r3, #42	@ 0x2a
 8011266:	d132      	bne.n	80112ce <_svfiprintf_r+0x186>
 8011268:	9b03      	ldr	r3, [sp, #12]
 801126a:	1d1a      	adds	r2, r3, #4
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	9203      	str	r2, [sp, #12]
 8011270:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011274:	3402      	adds	r4, #2
 8011276:	9305      	str	r3, [sp, #20]
 8011278:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801133c <_svfiprintf_r+0x1f4>
 801127c:	7821      	ldrb	r1, [r4, #0]
 801127e:	2203      	movs	r2, #3
 8011280:	4650      	mov	r0, sl
 8011282:	f7ef f82d 	bl	80002e0 <memchr>
 8011286:	b138      	cbz	r0, 8011298 <_svfiprintf_r+0x150>
 8011288:	9b04      	ldr	r3, [sp, #16]
 801128a:	eba0 000a 	sub.w	r0, r0, sl
 801128e:	2240      	movs	r2, #64	@ 0x40
 8011290:	4082      	lsls	r2, r0
 8011292:	4313      	orrs	r3, r2
 8011294:	3401      	adds	r4, #1
 8011296:	9304      	str	r3, [sp, #16]
 8011298:	f814 1b01 	ldrb.w	r1, [r4], #1
 801129c:	4824      	ldr	r0, [pc, #144]	@ (8011330 <_svfiprintf_r+0x1e8>)
 801129e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112a2:	2206      	movs	r2, #6
 80112a4:	f7ef f81c 	bl	80002e0 <memchr>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	d036      	beq.n	801131a <_svfiprintf_r+0x1d2>
 80112ac:	4b21      	ldr	r3, [pc, #132]	@ (8011334 <_svfiprintf_r+0x1ec>)
 80112ae:	bb1b      	cbnz	r3, 80112f8 <_svfiprintf_r+0x1b0>
 80112b0:	9b03      	ldr	r3, [sp, #12]
 80112b2:	3307      	adds	r3, #7
 80112b4:	f023 0307 	bic.w	r3, r3, #7
 80112b8:	3308      	adds	r3, #8
 80112ba:	9303      	str	r3, [sp, #12]
 80112bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112be:	4433      	add	r3, r6
 80112c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80112c2:	e76a      	b.n	801119a <_svfiprintf_r+0x52>
 80112c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80112c8:	460c      	mov	r4, r1
 80112ca:	2001      	movs	r0, #1
 80112cc:	e7a8      	b.n	8011220 <_svfiprintf_r+0xd8>
 80112ce:	2300      	movs	r3, #0
 80112d0:	3401      	adds	r4, #1
 80112d2:	9305      	str	r3, [sp, #20]
 80112d4:	4619      	mov	r1, r3
 80112d6:	f04f 0c0a 	mov.w	ip, #10
 80112da:	4620      	mov	r0, r4
 80112dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112e0:	3a30      	subs	r2, #48	@ 0x30
 80112e2:	2a09      	cmp	r2, #9
 80112e4:	d903      	bls.n	80112ee <_svfiprintf_r+0x1a6>
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d0c6      	beq.n	8011278 <_svfiprintf_r+0x130>
 80112ea:	9105      	str	r1, [sp, #20]
 80112ec:	e7c4      	b.n	8011278 <_svfiprintf_r+0x130>
 80112ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80112f2:	4604      	mov	r4, r0
 80112f4:	2301      	movs	r3, #1
 80112f6:	e7f0      	b.n	80112da <_svfiprintf_r+0x192>
 80112f8:	ab03      	add	r3, sp, #12
 80112fa:	9300      	str	r3, [sp, #0]
 80112fc:	462a      	mov	r2, r5
 80112fe:	4b0e      	ldr	r3, [pc, #56]	@ (8011338 <_svfiprintf_r+0x1f0>)
 8011300:	a904      	add	r1, sp, #16
 8011302:	4638      	mov	r0, r7
 8011304:	f7fc fd64 	bl	800ddd0 <_printf_float>
 8011308:	1c42      	adds	r2, r0, #1
 801130a:	4606      	mov	r6, r0
 801130c:	d1d6      	bne.n	80112bc <_svfiprintf_r+0x174>
 801130e:	89ab      	ldrh	r3, [r5, #12]
 8011310:	065b      	lsls	r3, r3, #25
 8011312:	f53f af2d 	bmi.w	8011170 <_svfiprintf_r+0x28>
 8011316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011318:	e72c      	b.n	8011174 <_svfiprintf_r+0x2c>
 801131a:	ab03      	add	r3, sp, #12
 801131c:	9300      	str	r3, [sp, #0]
 801131e:	462a      	mov	r2, r5
 8011320:	4b05      	ldr	r3, [pc, #20]	@ (8011338 <_svfiprintf_r+0x1f0>)
 8011322:	a904      	add	r1, sp, #16
 8011324:	4638      	mov	r0, r7
 8011326:	f7fc ffdb 	bl	800e2e0 <_printf_i>
 801132a:	e7ed      	b.n	8011308 <_svfiprintf_r+0x1c0>
 801132c:	08012be3 	.word	0x08012be3
 8011330:	08012bed 	.word	0x08012bed
 8011334:	0800ddd1 	.word	0x0800ddd1
 8011338:	08011091 	.word	0x08011091
 801133c:	08012be9 	.word	0x08012be9

08011340 <_sungetc_r>:
 8011340:	b538      	push	{r3, r4, r5, lr}
 8011342:	1c4b      	adds	r3, r1, #1
 8011344:	4614      	mov	r4, r2
 8011346:	d103      	bne.n	8011350 <_sungetc_r+0x10>
 8011348:	f04f 35ff 	mov.w	r5, #4294967295
 801134c:	4628      	mov	r0, r5
 801134e:	bd38      	pop	{r3, r4, r5, pc}
 8011350:	8993      	ldrh	r3, [r2, #12]
 8011352:	f023 0320 	bic.w	r3, r3, #32
 8011356:	8193      	strh	r3, [r2, #12]
 8011358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801135a:	6852      	ldr	r2, [r2, #4]
 801135c:	b2cd      	uxtb	r5, r1
 801135e:	b18b      	cbz	r3, 8011384 <_sungetc_r+0x44>
 8011360:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011362:	4293      	cmp	r3, r2
 8011364:	dd08      	ble.n	8011378 <_sungetc_r+0x38>
 8011366:	6823      	ldr	r3, [r4, #0]
 8011368:	1e5a      	subs	r2, r3, #1
 801136a:	6022      	str	r2, [r4, #0]
 801136c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011370:	6863      	ldr	r3, [r4, #4]
 8011372:	3301      	adds	r3, #1
 8011374:	6063      	str	r3, [r4, #4]
 8011376:	e7e9      	b.n	801134c <_sungetc_r+0xc>
 8011378:	4621      	mov	r1, r4
 801137a:	f000 fbe4 	bl	8011b46 <__submore>
 801137e:	2800      	cmp	r0, #0
 8011380:	d0f1      	beq.n	8011366 <_sungetc_r+0x26>
 8011382:	e7e1      	b.n	8011348 <_sungetc_r+0x8>
 8011384:	6921      	ldr	r1, [r4, #16]
 8011386:	6823      	ldr	r3, [r4, #0]
 8011388:	b151      	cbz	r1, 80113a0 <_sungetc_r+0x60>
 801138a:	4299      	cmp	r1, r3
 801138c:	d208      	bcs.n	80113a0 <_sungetc_r+0x60>
 801138e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011392:	42a9      	cmp	r1, r5
 8011394:	d104      	bne.n	80113a0 <_sungetc_r+0x60>
 8011396:	3b01      	subs	r3, #1
 8011398:	3201      	adds	r2, #1
 801139a:	6023      	str	r3, [r4, #0]
 801139c:	6062      	str	r2, [r4, #4]
 801139e:	e7d5      	b.n	801134c <_sungetc_r+0xc>
 80113a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80113a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80113aa:	2303      	movs	r3, #3
 80113ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 80113ae:	4623      	mov	r3, r4
 80113b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	2301      	movs	r3, #1
 80113b8:	e7dc      	b.n	8011374 <_sungetc_r+0x34>

080113ba <__ssrefill_r>:
 80113ba:	b510      	push	{r4, lr}
 80113bc:	460c      	mov	r4, r1
 80113be:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80113c0:	b169      	cbz	r1, 80113de <__ssrefill_r+0x24>
 80113c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113c6:	4299      	cmp	r1, r3
 80113c8:	d001      	beq.n	80113ce <__ssrefill_r+0x14>
 80113ca:	f7fe fa83 	bl	800f8d4 <_free_r>
 80113ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80113d0:	6063      	str	r3, [r4, #4]
 80113d2:	2000      	movs	r0, #0
 80113d4:	6360      	str	r0, [r4, #52]	@ 0x34
 80113d6:	b113      	cbz	r3, 80113de <__ssrefill_r+0x24>
 80113d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80113da:	6023      	str	r3, [r4, #0]
 80113dc:	bd10      	pop	{r4, pc}
 80113de:	6923      	ldr	r3, [r4, #16]
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	2300      	movs	r3, #0
 80113e4:	6063      	str	r3, [r4, #4]
 80113e6:	89a3      	ldrh	r3, [r4, #12]
 80113e8:	f043 0320 	orr.w	r3, r3, #32
 80113ec:	81a3      	strh	r3, [r4, #12]
 80113ee:	f04f 30ff 	mov.w	r0, #4294967295
 80113f2:	e7f3      	b.n	80113dc <__ssrefill_r+0x22>

080113f4 <__ssvfiscanf_r>:
 80113f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f8:	460c      	mov	r4, r1
 80113fa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80113fe:	2100      	movs	r1, #0
 8011400:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011404:	49a6      	ldr	r1, [pc, #664]	@ (80116a0 <__ssvfiscanf_r+0x2ac>)
 8011406:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011408:	f10d 0804 	add.w	r8, sp, #4
 801140c:	49a5      	ldr	r1, [pc, #660]	@ (80116a4 <__ssvfiscanf_r+0x2b0>)
 801140e:	4fa6      	ldr	r7, [pc, #664]	@ (80116a8 <__ssvfiscanf_r+0x2b4>)
 8011410:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011414:	4606      	mov	r6, r0
 8011416:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011418:	9300      	str	r3, [sp, #0]
 801141a:	f892 9000 	ldrb.w	r9, [r2]
 801141e:	f1b9 0f00 	cmp.w	r9, #0
 8011422:	f000 8158 	beq.w	80116d6 <__ssvfiscanf_r+0x2e2>
 8011426:	f817 3009 	ldrb.w	r3, [r7, r9]
 801142a:	f013 0308 	ands.w	r3, r3, #8
 801142e:	f102 0501 	add.w	r5, r2, #1
 8011432:	d019      	beq.n	8011468 <__ssvfiscanf_r+0x74>
 8011434:	6863      	ldr	r3, [r4, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	dd0f      	ble.n	801145a <__ssvfiscanf_r+0x66>
 801143a:	6823      	ldr	r3, [r4, #0]
 801143c:	781a      	ldrb	r2, [r3, #0]
 801143e:	5cba      	ldrb	r2, [r7, r2]
 8011440:	0712      	lsls	r2, r2, #28
 8011442:	d401      	bmi.n	8011448 <__ssvfiscanf_r+0x54>
 8011444:	462a      	mov	r2, r5
 8011446:	e7e8      	b.n	801141a <__ssvfiscanf_r+0x26>
 8011448:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801144a:	3201      	adds	r2, #1
 801144c:	9245      	str	r2, [sp, #276]	@ 0x114
 801144e:	6862      	ldr	r2, [r4, #4]
 8011450:	3301      	adds	r3, #1
 8011452:	3a01      	subs	r2, #1
 8011454:	6062      	str	r2, [r4, #4]
 8011456:	6023      	str	r3, [r4, #0]
 8011458:	e7ec      	b.n	8011434 <__ssvfiscanf_r+0x40>
 801145a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801145c:	4621      	mov	r1, r4
 801145e:	4630      	mov	r0, r6
 8011460:	4798      	blx	r3
 8011462:	2800      	cmp	r0, #0
 8011464:	d0e9      	beq.n	801143a <__ssvfiscanf_r+0x46>
 8011466:	e7ed      	b.n	8011444 <__ssvfiscanf_r+0x50>
 8011468:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801146c:	f040 8085 	bne.w	801157a <__ssvfiscanf_r+0x186>
 8011470:	9341      	str	r3, [sp, #260]	@ 0x104
 8011472:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011474:	7853      	ldrb	r3, [r2, #1]
 8011476:	2b2a      	cmp	r3, #42	@ 0x2a
 8011478:	bf02      	ittt	eq
 801147a:	2310      	moveq	r3, #16
 801147c:	1c95      	addeq	r5, r2, #2
 801147e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011480:	220a      	movs	r2, #10
 8011482:	46aa      	mov	sl, r5
 8011484:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011488:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801148c:	2b09      	cmp	r3, #9
 801148e:	d91e      	bls.n	80114ce <__ssvfiscanf_r+0xda>
 8011490:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80116ac <__ssvfiscanf_r+0x2b8>
 8011494:	2203      	movs	r2, #3
 8011496:	4658      	mov	r0, fp
 8011498:	f7ee ff22 	bl	80002e0 <memchr>
 801149c:	b138      	cbz	r0, 80114ae <__ssvfiscanf_r+0xba>
 801149e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80114a0:	eba0 000b 	sub.w	r0, r0, fp
 80114a4:	2301      	movs	r3, #1
 80114a6:	4083      	lsls	r3, r0
 80114a8:	4313      	orrs	r3, r2
 80114aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80114ac:	4655      	mov	r5, sl
 80114ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80114b2:	2b78      	cmp	r3, #120	@ 0x78
 80114b4:	d806      	bhi.n	80114c4 <__ssvfiscanf_r+0xd0>
 80114b6:	2b57      	cmp	r3, #87	@ 0x57
 80114b8:	d810      	bhi.n	80114dc <__ssvfiscanf_r+0xe8>
 80114ba:	2b25      	cmp	r3, #37	@ 0x25
 80114bc:	d05d      	beq.n	801157a <__ssvfiscanf_r+0x186>
 80114be:	d857      	bhi.n	8011570 <__ssvfiscanf_r+0x17c>
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d075      	beq.n	80115b0 <__ssvfiscanf_r+0x1bc>
 80114c4:	2303      	movs	r3, #3
 80114c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80114c8:	230a      	movs	r3, #10
 80114ca:	9342      	str	r3, [sp, #264]	@ 0x108
 80114cc:	e088      	b.n	80115e0 <__ssvfiscanf_r+0x1ec>
 80114ce:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80114d0:	fb02 1103 	mla	r1, r2, r3, r1
 80114d4:	3930      	subs	r1, #48	@ 0x30
 80114d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80114d8:	4655      	mov	r5, sl
 80114da:	e7d2      	b.n	8011482 <__ssvfiscanf_r+0x8e>
 80114dc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80114e0:	2a20      	cmp	r2, #32
 80114e2:	d8ef      	bhi.n	80114c4 <__ssvfiscanf_r+0xd0>
 80114e4:	a101      	add	r1, pc, #4	@ (adr r1, 80114ec <__ssvfiscanf_r+0xf8>)
 80114e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80114ea:	bf00      	nop
 80114ec:	080115bf 	.word	0x080115bf
 80114f0:	080114c5 	.word	0x080114c5
 80114f4:	080114c5 	.word	0x080114c5
 80114f8:	08011619 	.word	0x08011619
 80114fc:	080114c5 	.word	0x080114c5
 8011500:	080114c5 	.word	0x080114c5
 8011504:	080114c5 	.word	0x080114c5
 8011508:	080114c5 	.word	0x080114c5
 801150c:	080114c5 	.word	0x080114c5
 8011510:	080114c5 	.word	0x080114c5
 8011514:	080114c5 	.word	0x080114c5
 8011518:	0801162f 	.word	0x0801162f
 801151c:	08011615 	.word	0x08011615
 8011520:	08011577 	.word	0x08011577
 8011524:	08011577 	.word	0x08011577
 8011528:	08011577 	.word	0x08011577
 801152c:	080114c5 	.word	0x080114c5
 8011530:	080115d1 	.word	0x080115d1
 8011534:	080114c5 	.word	0x080114c5
 8011538:	080114c5 	.word	0x080114c5
 801153c:	080114c5 	.word	0x080114c5
 8011540:	080114c5 	.word	0x080114c5
 8011544:	0801163f 	.word	0x0801163f
 8011548:	080115d9 	.word	0x080115d9
 801154c:	080115b7 	.word	0x080115b7
 8011550:	080114c5 	.word	0x080114c5
 8011554:	080114c5 	.word	0x080114c5
 8011558:	0801163b 	.word	0x0801163b
 801155c:	080114c5 	.word	0x080114c5
 8011560:	08011615 	.word	0x08011615
 8011564:	080114c5 	.word	0x080114c5
 8011568:	080114c5 	.word	0x080114c5
 801156c:	080115bf 	.word	0x080115bf
 8011570:	3b45      	subs	r3, #69	@ 0x45
 8011572:	2b02      	cmp	r3, #2
 8011574:	d8a6      	bhi.n	80114c4 <__ssvfiscanf_r+0xd0>
 8011576:	2305      	movs	r3, #5
 8011578:	e031      	b.n	80115de <__ssvfiscanf_r+0x1ea>
 801157a:	6863      	ldr	r3, [r4, #4]
 801157c:	2b00      	cmp	r3, #0
 801157e:	dd0d      	ble.n	801159c <__ssvfiscanf_r+0x1a8>
 8011580:	6823      	ldr	r3, [r4, #0]
 8011582:	781a      	ldrb	r2, [r3, #0]
 8011584:	454a      	cmp	r2, r9
 8011586:	f040 80a6 	bne.w	80116d6 <__ssvfiscanf_r+0x2e2>
 801158a:	3301      	adds	r3, #1
 801158c:	6862      	ldr	r2, [r4, #4]
 801158e:	6023      	str	r3, [r4, #0]
 8011590:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011592:	3a01      	subs	r2, #1
 8011594:	3301      	adds	r3, #1
 8011596:	6062      	str	r2, [r4, #4]
 8011598:	9345      	str	r3, [sp, #276]	@ 0x114
 801159a:	e753      	b.n	8011444 <__ssvfiscanf_r+0x50>
 801159c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801159e:	4621      	mov	r1, r4
 80115a0:	4630      	mov	r0, r6
 80115a2:	4798      	blx	r3
 80115a4:	2800      	cmp	r0, #0
 80115a6:	d0eb      	beq.n	8011580 <__ssvfiscanf_r+0x18c>
 80115a8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80115aa:	2800      	cmp	r0, #0
 80115ac:	f040 808b 	bne.w	80116c6 <__ssvfiscanf_r+0x2d2>
 80115b0:	f04f 30ff 	mov.w	r0, #4294967295
 80115b4:	e08b      	b.n	80116ce <__ssvfiscanf_r+0x2da>
 80115b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80115b8:	f042 0220 	orr.w	r2, r2, #32
 80115bc:	9241      	str	r2, [sp, #260]	@ 0x104
 80115be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80115c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80115c4:	9241      	str	r2, [sp, #260]	@ 0x104
 80115c6:	2210      	movs	r2, #16
 80115c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80115ca:	9242      	str	r2, [sp, #264]	@ 0x108
 80115cc:	d902      	bls.n	80115d4 <__ssvfiscanf_r+0x1e0>
 80115ce:	e005      	b.n	80115dc <__ssvfiscanf_r+0x1e8>
 80115d0:	2300      	movs	r3, #0
 80115d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80115d4:	2303      	movs	r3, #3
 80115d6:	e002      	b.n	80115de <__ssvfiscanf_r+0x1ea>
 80115d8:	2308      	movs	r3, #8
 80115da:	9342      	str	r3, [sp, #264]	@ 0x108
 80115dc:	2304      	movs	r3, #4
 80115de:	9347      	str	r3, [sp, #284]	@ 0x11c
 80115e0:	6863      	ldr	r3, [r4, #4]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	dd39      	ble.n	801165a <__ssvfiscanf_r+0x266>
 80115e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80115e8:	0659      	lsls	r1, r3, #25
 80115ea:	d404      	bmi.n	80115f6 <__ssvfiscanf_r+0x202>
 80115ec:	6823      	ldr	r3, [r4, #0]
 80115ee:	781a      	ldrb	r2, [r3, #0]
 80115f0:	5cba      	ldrb	r2, [r7, r2]
 80115f2:	0712      	lsls	r2, r2, #28
 80115f4:	d438      	bmi.n	8011668 <__ssvfiscanf_r+0x274>
 80115f6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80115f8:	2b02      	cmp	r3, #2
 80115fa:	dc47      	bgt.n	801168c <__ssvfiscanf_r+0x298>
 80115fc:	466b      	mov	r3, sp
 80115fe:	4622      	mov	r2, r4
 8011600:	a941      	add	r1, sp, #260	@ 0x104
 8011602:	4630      	mov	r0, r6
 8011604:	f000 f86c 	bl	80116e0 <_scanf_chars>
 8011608:	2801      	cmp	r0, #1
 801160a:	d064      	beq.n	80116d6 <__ssvfiscanf_r+0x2e2>
 801160c:	2802      	cmp	r0, #2
 801160e:	f47f af19 	bne.w	8011444 <__ssvfiscanf_r+0x50>
 8011612:	e7c9      	b.n	80115a8 <__ssvfiscanf_r+0x1b4>
 8011614:	220a      	movs	r2, #10
 8011616:	e7d7      	b.n	80115c8 <__ssvfiscanf_r+0x1d4>
 8011618:	4629      	mov	r1, r5
 801161a:	4640      	mov	r0, r8
 801161c:	f000 fa5a 	bl	8011ad4 <__sccl>
 8011620:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011626:	9341      	str	r3, [sp, #260]	@ 0x104
 8011628:	4605      	mov	r5, r0
 801162a:	2301      	movs	r3, #1
 801162c:	e7d7      	b.n	80115de <__ssvfiscanf_r+0x1ea>
 801162e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011634:	9341      	str	r3, [sp, #260]	@ 0x104
 8011636:	2300      	movs	r3, #0
 8011638:	e7d1      	b.n	80115de <__ssvfiscanf_r+0x1ea>
 801163a:	2302      	movs	r3, #2
 801163c:	e7cf      	b.n	80115de <__ssvfiscanf_r+0x1ea>
 801163e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011640:	06c3      	lsls	r3, r0, #27
 8011642:	f53f aeff 	bmi.w	8011444 <__ssvfiscanf_r+0x50>
 8011646:	9b00      	ldr	r3, [sp, #0]
 8011648:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801164a:	1d19      	adds	r1, r3, #4
 801164c:	9100      	str	r1, [sp, #0]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	07c0      	lsls	r0, r0, #31
 8011652:	bf4c      	ite	mi
 8011654:	801a      	strhmi	r2, [r3, #0]
 8011656:	601a      	strpl	r2, [r3, #0]
 8011658:	e6f4      	b.n	8011444 <__ssvfiscanf_r+0x50>
 801165a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801165c:	4621      	mov	r1, r4
 801165e:	4630      	mov	r0, r6
 8011660:	4798      	blx	r3
 8011662:	2800      	cmp	r0, #0
 8011664:	d0bf      	beq.n	80115e6 <__ssvfiscanf_r+0x1f2>
 8011666:	e79f      	b.n	80115a8 <__ssvfiscanf_r+0x1b4>
 8011668:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801166a:	3201      	adds	r2, #1
 801166c:	9245      	str	r2, [sp, #276]	@ 0x114
 801166e:	6862      	ldr	r2, [r4, #4]
 8011670:	3a01      	subs	r2, #1
 8011672:	2a00      	cmp	r2, #0
 8011674:	6062      	str	r2, [r4, #4]
 8011676:	dd02      	ble.n	801167e <__ssvfiscanf_r+0x28a>
 8011678:	3301      	adds	r3, #1
 801167a:	6023      	str	r3, [r4, #0]
 801167c:	e7b6      	b.n	80115ec <__ssvfiscanf_r+0x1f8>
 801167e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011680:	4621      	mov	r1, r4
 8011682:	4630      	mov	r0, r6
 8011684:	4798      	blx	r3
 8011686:	2800      	cmp	r0, #0
 8011688:	d0b0      	beq.n	80115ec <__ssvfiscanf_r+0x1f8>
 801168a:	e78d      	b.n	80115a8 <__ssvfiscanf_r+0x1b4>
 801168c:	2b04      	cmp	r3, #4
 801168e:	dc0f      	bgt.n	80116b0 <__ssvfiscanf_r+0x2bc>
 8011690:	466b      	mov	r3, sp
 8011692:	4622      	mov	r2, r4
 8011694:	a941      	add	r1, sp, #260	@ 0x104
 8011696:	4630      	mov	r0, r6
 8011698:	f000 f87c 	bl	8011794 <_scanf_i>
 801169c:	e7b4      	b.n	8011608 <__ssvfiscanf_r+0x214>
 801169e:	bf00      	nop
 80116a0:	08011341 	.word	0x08011341
 80116a4:	080113bb 	.word	0x080113bb
 80116a8:	08012e01 	.word	0x08012e01
 80116ac:	08012be9 	.word	0x08012be9
 80116b0:	4b0a      	ldr	r3, [pc, #40]	@ (80116dc <__ssvfiscanf_r+0x2e8>)
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	f43f aec6 	beq.w	8011444 <__ssvfiscanf_r+0x50>
 80116b8:	466b      	mov	r3, sp
 80116ba:	4622      	mov	r2, r4
 80116bc:	a941      	add	r1, sp, #260	@ 0x104
 80116be:	4630      	mov	r0, r6
 80116c0:	f7fc ff2c 	bl	800e51c <_scanf_float>
 80116c4:	e7a0      	b.n	8011608 <__ssvfiscanf_r+0x214>
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	065b      	lsls	r3, r3, #25
 80116ca:	f53f af71 	bmi.w	80115b0 <__ssvfiscanf_r+0x1bc>
 80116ce:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80116d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116d6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80116d8:	e7f9      	b.n	80116ce <__ssvfiscanf_r+0x2da>
 80116da:	bf00      	nop
 80116dc:	0800e51d 	.word	0x0800e51d

080116e0 <_scanf_chars>:
 80116e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116e4:	4615      	mov	r5, r2
 80116e6:	688a      	ldr	r2, [r1, #8]
 80116e8:	4680      	mov	r8, r0
 80116ea:	460c      	mov	r4, r1
 80116ec:	b932      	cbnz	r2, 80116fc <_scanf_chars+0x1c>
 80116ee:	698a      	ldr	r2, [r1, #24]
 80116f0:	2a00      	cmp	r2, #0
 80116f2:	bf14      	ite	ne
 80116f4:	f04f 32ff 	movne.w	r2, #4294967295
 80116f8:	2201      	moveq	r2, #1
 80116fa:	608a      	str	r2, [r1, #8]
 80116fc:	6822      	ldr	r2, [r4, #0]
 80116fe:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011790 <_scanf_chars+0xb0>
 8011702:	06d1      	lsls	r1, r2, #27
 8011704:	bf5f      	itttt	pl
 8011706:	681a      	ldrpl	r2, [r3, #0]
 8011708:	1d11      	addpl	r1, r2, #4
 801170a:	6019      	strpl	r1, [r3, #0]
 801170c:	6816      	ldrpl	r6, [r2, #0]
 801170e:	2700      	movs	r7, #0
 8011710:	69a0      	ldr	r0, [r4, #24]
 8011712:	b188      	cbz	r0, 8011738 <_scanf_chars+0x58>
 8011714:	2801      	cmp	r0, #1
 8011716:	d107      	bne.n	8011728 <_scanf_chars+0x48>
 8011718:	682b      	ldr	r3, [r5, #0]
 801171a:	781a      	ldrb	r2, [r3, #0]
 801171c:	6963      	ldr	r3, [r4, #20]
 801171e:	5c9b      	ldrb	r3, [r3, r2]
 8011720:	b953      	cbnz	r3, 8011738 <_scanf_chars+0x58>
 8011722:	2f00      	cmp	r7, #0
 8011724:	d031      	beq.n	801178a <_scanf_chars+0xaa>
 8011726:	e022      	b.n	801176e <_scanf_chars+0x8e>
 8011728:	2802      	cmp	r0, #2
 801172a:	d120      	bne.n	801176e <_scanf_chars+0x8e>
 801172c:	682b      	ldr	r3, [r5, #0]
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011734:	071b      	lsls	r3, r3, #28
 8011736:	d41a      	bmi.n	801176e <_scanf_chars+0x8e>
 8011738:	6823      	ldr	r3, [r4, #0]
 801173a:	06da      	lsls	r2, r3, #27
 801173c:	bf5e      	ittt	pl
 801173e:	682b      	ldrpl	r3, [r5, #0]
 8011740:	781b      	ldrbpl	r3, [r3, #0]
 8011742:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011746:	682a      	ldr	r2, [r5, #0]
 8011748:	686b      	ldr	r3, [r5, #4]
 801174a:	3201      	adds	r2, #1
 801174c:	602a      	str	r2, [r5, #0]
 801174e:	68a2      	ldr	r2, [r4, #8]
 8011750:	3b01      	subs	r3, #1
 8011752:	3a01      	subs	r2, #1
 8011754:	606b      	str	r3, [r5, #4]
 8011756:	3701      	adds	r7, #1
 8011758:	60a2      	str	r2, [r4, #8]
 801175a:	b142      	cbz	r2, 801176e <_scanf_chars+0x8e>
 801175c:	2b00      	cmp	r3, #0
 801175e:	dcd7      	bgt.n	8011710 <_scanf_chars+0x30>
 8011760:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011764:	4629      	mov	r1, r5
 8011766:	4640      	mov	r0, r8
 8011768:	4798      	blx	r3
 801176a:	2800      	cmp	r0, #0
 801176c:	d0d0      	beq.n	8011710 <_scanf_chars+0x30>
 801176e:	6823      	ldr	r3, [r4, #0]
 8011770:	f013 0310 	ands.w	r3, r3, #16
 8011774:	d105      	bne.n	8011782 <_scanf_chars+0xa2>
 8011776:	68e2      	ldr	r2, [r4, #12]
 8011778:	3201      	adds	r2, #1
 801177a:	60e2      	str	r2, [r4, #12]
 801177c:	69a2      	ldr	r2, [r4, #24]
 801177e:	b102      	cbz	r2, 8011782 <_scanf_chars+0xa2>
 8011780:	7033      	strb	r3, [r6, #0]
 8011782:	6923      	ldr	r3, [r4, #16]
 8011784:	443b      	add	r3, r7
 8011786:	6123      	str	r3, [r4, #16]
 8011788:	2000      	movs	r0, #0
 801178a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801178e:	bf00      	nop
 8011790:	08012e01 	.word	0x08012e01

08011794 <_scanf_i>:
 8011794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011798:	4698      	mov	r8, r3
 801179a:	4b74      	ldr	r3, [pc, #464]	@ (801196c <_scanf_i+0x1d8>)
 801179c:	460c      	mov	r4, r1
 801179e:	4682      	mov	sl, r0
 80117a0:	4616      	mov	r6, r2
 80117a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80117a6:	b087      	sub	sp, #28
 80117a8:	ab03      	add	r3, sp, #12
 80117aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80117ae:	4b70      	ldr	r3, [pc, #448]	@ (8011970 <_scanf_i+0x1dc>)
 80117b0:	69a1      	ldr	r1, [r4, #24]
 80117b2:	4a70      	ldr	r2, [pc, #448]	@ (8011974 <_scanf_i+0x1e0>)
 80117b4:	2903      	cmp	r1, #3
 80117b6:	bf08      	it	eq
 80117b8:	461a      	moveq	r2, r3
 80117ba:	68a3      	ldr	r3, [r4, #8]
 80117bc:	9201      	str	r2, [sp, #4]
 80117be:	1e5a      	subs	r2, r3, #1
 80117c0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80117c4:	bf88      	it	hi
 80117c6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80117ca:	4627      	mov	r7, r4
 80117cc:	bf82      	ittt	hi
 80117ce:	eb03 0905 	addhi.w	r9, r3, r5
 80117d2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80117d6:	60a3      	strhi	r3, [r4, #8]
 80117d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80117dc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80117e0:	bf98      	it	ls
 80117e2:	f04f 0900 	movls.w	r9, #0
 80117e6:	6023      	str	r3, [r4, #0]
 80117e8:	463d      	mov	r5, r7
 80117ea:	f04f 0b00 	mov.w	fp, #0
 80117ee:	6831      	ldr	r1, [r6, #0]
 80117f0:	ab03      	add	r3, sp, #12
 80117f2:	7809      	ldrb	r1, [r1, #0]
 80117f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80117f8:	2202      	movs	r2, #2
 80117fa:	f7ee fd71 	bl	80002e0 <memchr>
 80117fe:	b328      	cbz	r0, 801184c <_scanf_i+0xb8>
 8011800:	f1bb 0f01 	cmp.w	fp, #1
 8011804:	d159      	bne.n	80118ba <_scanf_i+0x126>
 8011806:	6862      	ldr	r2, [r4, #4]
 8011808:	b92a      	cbnz	r2, 8011816 <_scanf_i+0x82>
 801180a:	6822      	ldr	r2, [r4, #0]
 801180c:	2108      	movs	r1, #8
 801180e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011812:	6061      	str	r1, [r4, #4]
 8011814:	6022      	str	r2, [r4, #0]
 8011816:	6822      	ldr	r2, [r4, #0]
 8011818:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801181c:	6022      	str	r2, [r4, #0]
 801181e:	68a2      	ldr	r2, [r4, #8]
 8011820:	1e51      	subs	r1, r2, #1
 8011822:	60a1      	str	r1, [r4, #8]
 8011824:	b192      	cbz	r2, 801184c <_scanf_i+0xb8>
 8011826:	6832      	ldr	r2, [r6, #0]
 8011828:	1c51      	adds	r1, r2, #1
 801182a:	6031      	str	r1, [r6, #0]
 801182c:	7812      	ldrb	r2, [r2, #0]
 801182e:	f805 2b01 	strb.w	r2, [r5], #1
 8011832:	6872      	ldr	r2, [r6, #4]
 8011834:	3a01      	subs	r2, #1
 8011836:	2a00      	cmp	r2, #0
 8011838:	6072      	str	r2, [r6, #4]
 801183a:	dc07      	bgt.n	801184c <_scanf_i+0xb8>
 801183c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011840:	4631      	mov	r1, r6
 8011842:	4650      	mov	r0, sl
 8011844:	4790      	blx	r2
 8011846:	2800      	cmp	r0, #0
 8011848:	f040 8085 	bne.w	8011956 <_scanf_i+0x1c2>
 801184c:	f10b 0b01 	add.w	fp, fp, #1
 8011850:	f1bb 0f03 	cmp.w	fp, #3
 8011854:	d1cb      	bne.n	80117ee <_scanf_i+0x5a>
 8011856:	6863      	ldr	r3, [r4, #4]
 8011858:	b90b      	cbnz	r3, 801185e <_scanf_i+0xca>
 801185a:	230a      	movs	r3, #10
 801185c:	6063      	str	r3, [r4, #4]
 801185e:	6863      	ldr	r3, [r4, #4]
 8011860:	4945      	ldr	r1, [pc, #276]	@ (8011978 <_scanf_i+0x1e4>)
 8011862:	6960      	ldr	r0, [r4, #20]
 8011864:	1ac9      	subs	r1, r1, r3
 8011866:	f000 f935 	bl	8011ad4 <__sccl>
 801186a:	f04f 0b00 	mov.w	fp, #0
 801186e:	68a3      	ldr	r3, [r4, #8]
 8011870:	6822      	ldr	r2, [r4, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d03d      	beq.n	80118f2 <_scanf_i+0x15e>
 8011876:	6831      	ldr	r1, [r6, #0]
 8011878:	6960      	ldr	r0, [r4, #20]
 801187a:	f891 c000 	ldrb.w	ip, [r1]
 801187e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011882:	2800      	cmp	r0, #0
 8011884:	d035      	beq.n	80118f2 <_scanf_i+0x15e>
 8011886:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801188a:	d124      	bne.n	80118d6 <_scanf_i+0x142>
 801188c:	0510      	lsls	r0, r2, #20
 801188e:	d522      	bpl.n	80118d6 <_scanf_i+0x142>
 8011890:	f10b 0b01 	add.w	fp, fp, #1
 8011894:	f1b9 0f00 	cmp.w	r9, #0
 8011898:	d003      	beq.n	80118a2 <_scanf_i+0x10e>
 801189a:	3301      	adds	r3, #1
 801189c:	f109 39ff 	add.w	r9, r9, #4294967295
 80118a0:	60a3      	str	r3, [r4, #8]
 80118a2:	6873      	ldr	r3, [r6, #4]
 80118a4:	3b01      	subs	r3, #1
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	6073      	str	r3, [r6, #4]
 80118aa:	dd1b      	ble.n	80118e4 <_scanf_i+0x150>
 80118ac:	6833      	ldr	r3, [r6, #0]
 80118ae:	3301      	adds	r3, #1
 80118b0:	6033      	str	r3, [r6, #0]
 80118b2:	68a3      	ldr	r3, [r4, #8]
 80118b4:	3b01      	subs	r3, #1
 80118b6:	60a3      	str	r3, [r4, #8]
 80118b8:	e7d9      	b.n	801186e <_scanf_i+0xda>
 80118ba:	f1bb 0f02 	cmp.w	fp, #2
 80118be:	d1ae      	bne.n	801181e <_scanf_i+0x8a>
 80118c0:	6822      	ldr	r2, [r4, #0]
 80118c2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80118c6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80118ca:	d1c4      	bne.n	8011856 <_scanf_i+0xc2>
 80118cc:	2110      	movs	r1, #16
 80118ce:	6061      	str	r1, [r4, #4]
 80118d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80118d4:	e7a2      	b.n	801181c <_scanf_i+0x88>
 80118d6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80118da:	6022      	str	r2, [r4, #0]
 80118dc:	780b      	ldrb	r3, [r1, #0]
 80118de:	f805 3b01 	strb.w	r3, [r5], #1
 80118e2:	e7de      	b.n	80118a2 <_scanf_i+0x10e>
 80118e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80118e8:	4631      	mov	r1, r6
 80118ea:	4650      	mov	r0, sl
 80118ec:	4798      	blx	r3
 80118ee:	2800      	cmp	r0, #0
 80118f0:	d0df      	beq.n	80118b2 <_scanf_i+0x11e>
 80118f2:	6823      	ldr	r3, [r4, #0]
 80118f4:	05d9      	lsls	r1, r3, #23
 80118f6:	d50d      	bpl.n	8011914 <_scanf_i+0x180>
 80118f8:	42bd      	cmp	r5, r7
 80118fa:	d909      	bls.n	8011910 <_scanf_i+0x17c>
 80118fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011900:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011904:	4632      	mov	r2, r6
 8011906:	4650      	mov	r0, sl
 8011908:	4798      	blx	r3
 801190a:	f105 39ff 	add.w	r9, r5, #4294967295
 801190e:	464d      	mov	r5, r9
 8011910:	42bd      	cmp	r5, r7
 8011912:	d028      	beq.n	8011966 <_scanf_i+0x1d2>
 8011914:	6822      	ldr	r2, [r4, #0]
 8011916:	f012 0210 	ands.w	r2, r2, #16
 801191a:	d113      	bne.n	8011944 <_scanf_i+0x1b0>
 801191c:	702a      	strb	r2, [r5, #0]
 801191e:	6863      	ldr	r3, [r4, #4]
 8011920:	9e01      	ldr	r6, [sp, #4]
 8011922:	4639      	mov	r1, r7
 8011924:	4650      	mov	r0, sl
 8011926:	47b0      	blx	r6
 8011928:	f8d8 3000 	ldr.w	r3, [r8]
 801192c:	6821      	ldr	r1, [r4, #0]
 801192e:	1d1a      	adds	r2, r3, #4
 8011930:	f8c8 2000 	str.w	r2, [r8]
 8011934:	f011 0f20 	tst.w	r1, #32
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	d00f      	beq.n	801195c <_scanf_i+0x1c8>
 801193c:	6018      	str	r0, [r3, #0]
 801193e:	68e3      	ldr	r3, [r4, #12]
 8011940:	3301      	adds	r3, #1
 8011942:	60e3      	str	r3, [r4, #12]
 8011944:	6923      	ldr	r3, [r4, #16]
 8011946:	1bed      	subs	r5, r5, r7
 8011948:	445d      	add	r5, fp
 801194a:	442b      	add	r3, r5
 801194c:	6123      	str	r3, [r4, #16]
 801194e:	2000      	movs	r0, #0
 8011950:	b007      	add	sp, #28
 8011952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011956:	f04f 0b00 	mov.w	fp, #0
 801195a:	e7ca      	b.n	80118f2 <_scanf_i+0x15e>
 801195c:	07ca      	lsls	r2, r1, #31
 801195e:	bf4c      	ite	mi
 8011960:	8018      	strhmi	r0, [r3, #0]
 8011962:	6018      	strpl	r0, [r3, #0]
 8011964:	e7eb      	b.n	801193e <_scanf_i+0x1aa>
 8011966:	2001      	movs	r0, #1
 8011968:	e7f2      	b.n	8011950 <_scanf_i+0x1bc>
 801196a:	bf00      	nop
 801196c:	08012a80 	.word	0x08012a80
 8011970:	0801108d 	.word	0x0801108d
 8011974:	08012475 	.word	0x08012475
 8011978:	08012c04 	.word	0x08012c04

0801197c <__sflush_r>:
 801197c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011984:	0716      	lsls	r6, r2, #28
 8011986:	4605      	mov	r5, r0
 8011988:	460c      	mov	r4, r1
 801198a:	d454      	bmi.n	8011a36 <__sflush_r+0xba>
 801198c:	684b      	ldr	r3, [r1, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	dc02      	bgt.n	8011998 <__sflush_r+0x1c>
 8011992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011994:	2b00      	cmp	r3, #0
 8011996:	dd48      	ble.n	8011a2a <__sflush_r+0xae>
 8011998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801199a:	2e00      	cmp	r6, #0
 801199c:	d045      	beq.n	8011a2a <__sflush_r+0xae>
 801199e:	2300      	movs	r3, #0
 80119a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80119a4:	682f      	ldr	r7, [r5, #0]
 80119a6:	6a21      	ldr	r1, [r4, #32]
 80119a8:	602b      	str	r3, [r5, #0]
 80119aa:	d030      	beq.n	8011a0e <__sflush_r+0x92>
 80119ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80119ae:	89a3      	ldrh	r3, [r4, #12]
 80119b0:	0759      	lsls	r1, r3, #29
 80119b2:	d505      	bpl.n	80119c0 <__sflush_r+0x44>
 80119b4:	6863      	ldr	r3, [r4, #4]
 80119b6:	1ad2      	subs	r2, r2, r3
 80119b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80119ba:	b10b      	cbz	r3, 80119c0 <__sflush_r+0x44>
 80119bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80119be:	1ad2      	subs	r2, r2, r3
 80119c0:	2300      	movs	r3, #0
 80119c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80119c4:	6a21      	ldr	r1, [r4, #32]
 80119c6:	4628      	mov	r0, r5
 80119c8:	47b0      	blx	r6
 80119ca:	1c43      	adds	r3, r0, #1
 80119cc:	89a3      	ldrh	r3, [r4, #12]
 80119ce:	d106      	bne.n	80119de <__sflush_r+0x62>
 80119d0:	6829      	ldr	r1, [r5, #0]
 80119d2:	291d      	cmp	r1, #29
 80119d4:	d82b      	bhi.n	8011a2e <__sflush_r+0xb2>
 80119d6:	4a2a      	ldr	r2, [pc, #168]	@ (8011a80 <__sflush_r+0x104>)
 80119d8:	40ca      	lsrs	r2, r1
 80119da:	07d6      	lsls	r6, r2, #31
 80119dc:	d527      	bpl.n	8011a2e <__sflush_r+0xb2>
 80119de:	2200      	movs	r2, #0
 80119e0:	6062      	str	r2, [r4, #4]
 80119e2:	04d9      	lsls	r1, r3, #19
 80119e4:	6922      	ldr	r2, [r4, #16]
 80119e6:	6022      	str	r2, [r4, #0]
 80119e8:	d504      	bpl.n	80119f4 <__sflush_r+0x78>
 80119ea:	1c42      	adds	r2, r0, #1
 80119ec:	d101      	bne.n	80119f2 <__sflush_r+0x76>
 80119ee:	682b      	ldr	r3, [r5, #0]
 80119f0:	b903      	cbnz	r3, 80119f4 <__sflush_r+0x78>
 80119f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80119f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119f6:	602f      	str	r7, [r5, #0]
 80119f8:	b1b9      	cbz	r1, 8011a2a <__sflush_r+0xae>
 80119fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119fe:	4299      	cmp	r1, r3
 8011a00:	d002      	beq.n	8011a08 <__sflush_r+0x8c>
 8011a02:	4628      	mov	r0, r5
 8011a04:	f7fd ff66 	bl	800f8d4 <_free_r>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a0c:	e00d      	b.n	8011a2a <__sflush_r+0xae>
 8011a0e:	2301      	movs	r3, #1
 8011a10:	4628      	mov	r0, r5
 8011a12:	47b0      	blx	r6
 8011a14:	4602      	mov	r2, r0
 8011a16:	1c50      	adds	r0, r2, #1
 8011a18:	d1c9      	bne.n	80119ae <__sflush_r+0x32>
 8011a1a:	682b      	ldr	r3, [r5, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d0c6      	beq.n	80119ae <__sflush_r+0x32>
 8011a20:	2b1d      	cmp	r3, #29
 8011a22:	d001      	beq.n	8011a28 <__sflush_r+0xac>
 8011a24:	2b16      	cmp	r3, #22
 8011a26:	d11e      	bne.n	8011a66 <__sflush_r+0xea>
 8011a28:	602f      	str	r7, [r5, #0]
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	e022      	b.n	8011a74 <__sflush_r+0xf8>
 8011a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a32:	b21b      	sxth	r3, r3
 8011a34:	e01b      	b.n	8011a6e <__sflush_r+0xf2>
 8011a36:	690f      	ldr	r7, [r1, #16]
 8011a38:	2f00      	cmp	r7, #0
 8011a3a:	d0f6      	beq.n	8011a2a <__sflush_r+0xae>
 8011a3c:	0793      	lsls	r3, r2, #30
 8011a3e:	680e      	ldr	r6, [r1, #0]
 8011a40:	bf08      	it	eq
 8011a42:	694b      	ldreq	r3, [r1, #20]
 8011a44:	600f      	str	r7, [r1, #0]
 8011a46:	bf18      	it	ne
 8011a48:	2300      	movne	r3, #0
 8011a4a:	eba6 0807 	sub.w	r8, r6, r7
 8011a4e:	608b      	str	r3, [r1, #8]
 8011a50:	f1b8 0f00 	cmp.w	r8, #0
 8011a54:	dde9      	ble.n	8011a2a <__sflush_r+0xae>
 8011a56:	6a21      	ldr	r1, [r4, #32]
 8011a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011a5a:	4643      	mov	r3, r8
 8011a5c:	463a      	mov	r2, r7
 8011a5e:	4628      	mov	r0, r5
 8011a60:	47b0      	blx	r6
 8011a62:	2800      	cmp	r0, #0
 8011a64:	dc08      	bgt.n	8011a78 <__sflush_r+0xfc>
 8011a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a6e:	81a3      	strh	r3, [r4, #12]
 8011a70:	f04f 30ff 	mov.w	r0, #4294967295
 8011a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a78:	4407      	add	r7, r0
 8011a7a:	eba8 0800 	sub.w	r8, r8, r0
 8011a7e:	e7e7      	b.n	8011a50 <__sflush_r+0xd4>
 8011a80:	20400001 	.word	0x20400001

08011a84 <_fflush_r>:
 8011a84:	b538      	push	{r3, r4, r5, lr}
 8011a86:	690b      	ldr	r3, [r1, #16]
 8011a88:	4605      	mov	r5, r0
 8011a8a:	460c      	mov	r4, r1
 8011a8c:	b913      	cbnz	r3, 8011a94 <_fflush_r+0x10>
 8011a8e:	2500      	movs	r5, #0
 8011a90:	4628      	mov	r0, r5
 8011a92:	bd38      	pop	{r3, r4, r5, pc}
 8011a94:	b118      	cbz	r0, 8011a9e <_fflush_r+0x1a>
 8011a96:	6a03      	ldr	r3, [r0, #32]
 8011a98:	b90b      	cbnz	r3, 8011a9e <_fflush_r+0x1a>
 8011a9a:	f7fc ffd1 	bl	800ea40 <__sinit>
 8011a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d0f3      	beq.n	8011a8e <_fflush_r+0xa>
 8011aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011aa8:	07d0      	lsls	r0, r2, #31
 8011aaa:	d404      	bmi.n	8011ab6 <_fflush_r+0x32>
 8011aac:	0599      	lsls	r1, r3, #22
 8011aae:	d402      	bmi.n	8011ab6 <_fflush_r+0x32>
 8011ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ab2:	f7fd f91e 	bl	800ecf2 <__retarget_lock_acquire_recursive>
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	4621      	mov	r1, r4
 8011aba:	f7ff ff5f 	bl	801197c <__sflush_r>
 8011abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ac0:	07da      	lsls	r2, r3, #31
 8011ac2:	4605      	mov	r5, r0
 8011ac4:	d4e4      	bmi.n	8011a90 <_fflush_r+0xc>
 8011ac6:	89a3      	ldrh	r3, [r4, #12]
 8011ac8:	059b      	lsls	r3, r3, #22
 8011aca:	d4e1      	bmi.n	8011a90 <_fflush_r+0xc>
 8011acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ace:	f7fd f911 	bl	800ecf4 <__retarget_lock_release_recursive>
 8011ad2:	e7dd      	b.n	8011a90 <_fflush_r+0xc>

08011ad4 <__sccl>:
 8011ad4:	b570      	push	{r4, r5, r6, lr}
 8011ad6:	780b      	ldrb	r3, [r1, #0]
 8011ad8:	4604      	mov	r4, r0
 8011ada:	2b5e      	cmp	r3, #94	@ 0x5e
 8011adc:	bf0b      	itete	eq
 8011ade:	784b      	ldrbeq	r3, [r1, #1]
 8011ae0:	1c4a      	addne	r2, r1, #1
 8011ae2:	1c8a      	addeq	r2, r1, #2
 8011ae4:	2100      	movne	r1, #0
 8011ae6:	bf08      	it	eq
 8011ae8:	2101      	moveq	r1, #1
 8011aea:	3801      	subs	r0, #1
 8011aec:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011af0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011af4:	42a8      	cmp	r0, r5
 8011af6:	d1fb      	bne.n	8011af0 <__sccl+0x1c>
 8011af8:	b90b      	cbnz	r3, 8011afe <__sccl+0x2a>
 8011afa:	1e50      	subs	r0, r2, #1
 8011afc:	bd70      	pop	{r4, r5, r6, pc}
 8011afe:	f081 0101 	eor.w	r1, r1, #1
 8011b02:	54e1      	strb	r1, [r4, r3]
 8011b04:	4610      	mov	r0, r2
 8011b06:	4602      	mov	r2, r0
 8011b08:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011b0c:	2d2d      	cmp	r5, #45	@ 0x2d
 8011b0e:	d005      	beq.n	8011b1c <__sccl+0x48>
 8011b10:	2d5d      	cmp	r5, #93	@ 0x5d
 8011b12:	d016      	beq.n	8011b42 <__sccl+0x6e>
 8011b14:	2d00      	cmp	r5, #0
 8011b16:	d0f1      	beq.n	8011afc <__sccl+0x28>
 8011b18:	462b      	mov	r3, r5
 8011b1a:	e7f2      	b.n	8011b02 <__sccl+0x2e>
 8011b1c:	7846      	ldrb	r6, [r0, #1]
 8011b1e:	2e5d      	cmp	r6, #93	@ 0x5d
 8011b20:	d0fa      	beq.n	8011b18 <__sccl+0x44>
 8011b22:	42b3      	cmp	r3, r6
 8011b24:	dcf8      	bgt.n	8011b18 <__sccl+0x44>
 8011b26:	3002      	adds	r0, #2
 8011b28:	461a      	mov	r2, r3
 8011b2a:	3201      	adds	r2, #1
 8011b2c:	4296      	cmp	r6, r2
 8011b2e:	54a1      	strb	r1, [r4, r2]
 8011b30:	dcfb      	bgt.n	8011b2a <__sccl+0x56>
 8011b32:	1af2      	subs	r2, r6, r3
 8011b34:	3a01      	subs	r2, #1
 8011b36:	1c5d      	adds	r5, r3, #1
 8011b38:	42b3      	cmp	r3, r6
 8011b3a:	bfa8      	it	ge
 8011b3c:	2200      	movge	r2, #0
 8011b3e:	18ab      	adds	r3, r5, r2
 8011b40:	e7e1      	b.n	8011b06 <__sccl+0x32>
 8011b42:	4610      	mov	r0, r2
 8011b44:	e7da      	b.n	8011afc <__sccl+0x28>

08011b46 <__submore>:
 8011b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b4a:	460c      	mov	r4, r1
 8011b4c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011b4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b52:	4299      	cmp	r1, r3
 8011b54:	d11d      	bne.n	8011b92 <__submore+0x4c>
 8011b56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011b5a:	f7fd ff2f 	bl	800f9bc <_malloc_r>
 8011b5e:	b918      	cbnz	r0, 8011b68 <__submore+0x22>
 8011b60:	f04f 30ff 	mov.w	r0, #4294967295
 8011b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b6c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011b6e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011b72:	6360      	str	r0, [r4, #52]	@ 0x34
 8011b74:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011b78:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011b7c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011b80:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011b84:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011b88:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011b8c:	6020      	str	r0, [r4, #0]
 8011b8e:	2000      	movs	r0, #0
 8011b90:	e7e8      	b.n	8011b64 <__submore+0x1e>
 8011b92:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011b94:	0077      	lsls	r7, r6, #1
 8011b96:	463a      	mov	r2, r7
 8011b98:	f000 fbcf 	bl	801233a <_realloc_r>
 8011b9c:	4605      	mov	r5, r0
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d0de      	beq.n	8011b60 <__submore+0x1a>
 8011ba2:	eb00 0806 	add.w	r8, r0, r6
 8011ba6:	4601      	mov	r1, r0
 8011ba8:	4632      	mov	r2, r6
 8011baa:	4640      	mov	r0, r8
 8011bac:	f000 f830 	bl	8011c10 <memcpy>
 8011bb0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011bb4:	f8c4 8000 	str.w	r8, [r4]
 8011bb8:	e7e9      	b.n	8011b8e <__submore+0x48>

08011bba <memmove>:
 8011bba:	4288      	cmp	r0, r1
 8011bbc:	b510      	push	{r4, lr}
 8011bbe:	eb01 0402 	add.w	r4, r1, r2
 8011bc2:	d902      	bls.n	8011bca <memmove+0x10>
 8011bc4:	4284      	cmp	r4, r0
 8011bc6:	4623      	mov	r3, r4
 8011bc8:	d807      	bhi.n	8011bda <memmove+0x20>
 8011bca:	1e43      	subs	r3, r0, #1
 8011bcc:	42a1      	cmp	r1, r4
 8011bce:	d008      	beq.n	8011be2 <memmove+0x28>
 8011bd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bd8:	e7f8      	b.n	8011bcc <memmove+0x12>
 8011bda:	4402      	add	r2, r0
 8011bdc:	4601      	mov	r1, r0
 8011bde:	428a      	cmp	r2, r1
 8011be0:	d100      	bne.n	8011be4 <memmove+0x2a>
 8011be2:	bd10      	pop	{r4, pc}
 8011be4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011be8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bec:	e7f7      	b.n	8011bde <memmove+0x24>
	...

08011bf0 <_sbrk_r>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	4d06      	ldr	r5, [pc, #24]	@ (8011c0c <_sbrk_r+0x1c>)
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	4608      	mov	r0, r1
 8011bfa:	602b      	str	r3, [r5, #0]
 8011bfc:	f7f0 f9b2 	bl	8001f64 <_sbrk>
 8011c00:	1c43      	adds	r3, r0, #1
 8011c02:	d102      	bne.n	8011c0a <_sbrk_r+0x1a>
 8011c04:	682b      	ldr	r3, [r5, #0]
 8011c06:	b103      	cbz	r3, 8011c0a <_sbrk_r+0x1a>
 8011c08:	6023      	str	r3, [r4, #0]
 8011c0a:	bd38      	pop	{r3, r4, r5, pc}
 8011c0c:	24000a5c 	.word	0x24000a5c

08011c10 <memcpy>:
 8011c10:	440a      	add	r2, r1
 8011c12:	4291      	cmp	r1, r2
 8011c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c18:	d100      	bne.n	8011c1c <memcpy+0xc>
 8011c1a:	4770      	bx	lr
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c26:	4291      	cmp	r1, r2
 8011c28:	d1f9      	bne.n	8011c1e <memcpy+0xe>
 8011c2a:	bd10      	pop	{r4, pc}
 8011c2c:	0000      	movs	r0, r0
	...

08011c30 <nan>:
 8011c30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011c38 <nan+0x8>
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	00000000 	.word	0x00000000
 8011c3c:	7ff80000 	.word	0x7ff80000

08011c40 <__assert_func>:
 8011c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c42:	4614      	mov	r4, r2
 8011c44:	461a      	mov	r2, r3
 8011c46:	4b09      	ldr	r3, [pc, #36]	@ (8011c6c <__assert_func+0x2c>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	68d8      	ldr	r0, [r3, #12]
 8011c4e:	b14c      	cbz	r4, 8011c64 <__assert_func+0x24>
 8011c50:	4b07      	ldr	r3, [pc, #28]	@ (8011c70 <__assert_func+0x30>)
 8011c52:	9100      	str	r1, [sp, #0]
 8011c54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c58:	4906      	ldr	r1, [pc, #24]	@ (8011c74 <__assert_func+0x34>)
 8011c5a:	462b      	mov	r3, r5
 8011c5c:	f000 fc1a 	bl	8012494 <fiprintf>
 8011c60:	f000 fc2a 	bl	80124b8 <abort>
 8011c64:	4b04      	ldr	r3, [pc, #16]	@ (8011c78 <__assert_func+0x38>)
 8011c66:	461c      	mov	r4, r3
 8011c68:	e7f3      	b.n	8011c52 <__assert_func+0x12>
 8011c6a:	bf00      	nop
 8011c6c:	24000030 	.word	0x24000030
 8011c70:	08012c17 	.word	0x08012c17
 8011c74:	08012c24 	.word	0x08012c24
 8011c78:	08012c52 	.word	0x08012c52

08011c7c <_calloc_r>:
 8011c7c:	b570      	push	{r4, r5, r6, lr}
 8011c7e:	fba1 5402 	umull	r5, r4, r1, r2
 8011c82:	b934      	cbnz	r4, 8011c92 <_calloc_r+0x16>
 8011c84:	4629      	mov	r1, r5
 8011c86:	f7fd fe99 	bl	800f9bc <_malloc_r>
 8011c8a:	4606      	mov	r6, r0
 8011c8c:	b928      	cbnz	r0, 8011c9a <_calloc_r+0x1e>
 8011c8e:	4630      	mov	r0, r6
 8011c90:	bd70      	pop	{r4, r5, r6, pc}
 8011c92:	220c      	movs	r2, #12
 8011c94:	6002      	str	r2, [r0, #0]
 8011c96:	2600      	movs	r6, #0
 8011c98:	e7f9      	b.n	8011c8e <_calloc_r+0x12>
 8011c9a:	462a      	mov	r2, r5
 8011c9c:	4621      	mov	r1, r4
 8011c9e:	f7fc ff98 	bl	800ebd2 <memset>
 8011ca2:	e7f4      	b.n	8011c8e <_calloc_r+0x12>

08011ca4 <rshift>:
 8011ca4:	6903      	ldr	r3, [r0, #16]
 8011ca6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011caa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011cb2:	f100 0414 	add.w	r4, r0, #20
 8011cb6:	dd45      	ble.n	8011d44 <rshift+0xa0>
 8011cb8:	f011 011f 	ands.w	r1, r1, #31
 8011cbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011cc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011cc4:	d10c      	bne.n	8011ce0 <rshift+0x3c>
 8011cc6:	f100 0710 	add.w	r7, r0, #16
 8011cca:	4629      	mov	r1, r5
 8011ccc:	42b1      	cmp	r1, r6
 8011cce:	d334      	bcc.n	8011d3a <rshift+0x96>
 8011cd0:	1a9b      	subs	r3, r3, r2
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	1eea      	subs	r2, r5, #3
 8011cd6:	4296      	cmp	r6, r2
 8011cd8:	bf38      	it	cc
 8011cda:	2300      	movcc	r3, #0
 8011cdc:	4423      	add	r3, r4
 8011cde:	e015      	b.n	8011d0c <rshift+0x68>
 8011ce0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011ce4:	f1c1 0820 	rsb	r8, r1, #32
 8011ce8:	40cf      	lsrs	r7, r1
 8011cea:	f105 0e04 	add.w	lr, r5, #4
 8011cee:	46a1      	mov	r9, r4
 8011cf0:	4576      	cmp	r6, lr
 8011cf2:	46f4      	mov	ip, lr
 8011cf4:	d815      	bhi.n	8011d22 <rshift+0x7e>
 8011cf6:	1a9a      	subs	r2, r3, r2
 8011cf8:	0092      	lsls	r2, r2, #2
 8011cfa:	3a04      	subs	r2, #4
 8011cfc:	3501      	adds	r5, #1
 8011cfe:	42ae      	cmp	r6, r5
 8011d00:	bf38      	it	cc
 8011d02:	2200      	movcc	r2, #0
 8011d04:	18a3      	adds	r3, r4, r2
 8011d06:	50a7      	str	r7, [r4, r2]
 8011d08:	b107      	cbz	r7, 8011d0c <rshift+0x68>
 8011d0a:	3304      	adds	r3, #4
 8011d0c:	1b1a      	subs	r2, r3, r4
 8011d0e:	42a3      	cmp	r3, r4
 8011d10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011d14:	bf08      	it	eq
 8011d16:	2300      	moveq	r3, #0
 8011d18:	6102      	str	r2, [r0, #16]
 8011d1a:	bf08      	it	eq
 8011d1c:	6143      	streq	r3, [r0, #20]
 8011d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d22:	f8dc c000 	ldr.w	ip, [ip]
 8011d26:	fa0c fc08 	lsl.w	ip, ip, r8
 8011d2a:	ea4c 0707 	orr.w	r7, ip, r7
 8011d2e:	f849 7b04 	str.w	r7, [r9], #4
 8011d32:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011d36:	40cf      	lsrs	r7, r1
 8011d38:	e7da      	b.n	8011cf0 <rshift+0x4c>
 8011d3a:	f851 cb04 	ldr.w	ip, [r1], #4
 8011d3e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011d42:	e7c3      	b.n	8011ccc <rshift+0x28>
 8011d44:	4623      	mov	r3, r4
 8011d46:	e7e1      	b.n	8011d0c <rshift+0x68>

08011d48 <__hexdig_fun>:
 8011d48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011d4c:	2b09      	cmp	r3, #9
 8011d4e:	d802      	bhi.n	8011d56 <__hexdig_fun+0xe>
 8011d50:	3820      	subs	r0, #32
 8011d52:	b2c0      	uxtb	r0, r0
 8011d54:	4770      	bx	lr
 8011d56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011d5a:	2b05      	cmp	r3, #5
 8011d5c:	d801      	bhi.n	8011d62 <__hexdig_fun+0x1a>
 8011d5e:	3847      	subs	r0, #71	@ 0x47
 8011d60:	e7f7      	b.n	8011d52 <__hexdig_fun+0xa>
 8011d62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011d66:	2b05      	cmp	r3, #5
 8011d68:	d801      	bhi.n	8011d6e <__hexdig_fun+0x26>
 8011d6a:	3827      	subs	r0, #39	@ 0x27
 8011d6c:	e7f1      	b.n	8011d52 <__hexdig_fun+0xa>
 8011d6e:	2000      	movs	r0, #0
 8011d70:	4770      	bx	lr
	...

08011d74 <__gethex>:
 8011d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d78:	b085      	sub	sp, #20
 8011d7a:	468a      	mov	sl, r1
 8011d7c:	9302      	str	r3, [sp, #8]
 8011d7e:	680b      	ldr	r3, [r1, #0]
 8011d80:	9001      	str	r0, [sp, #4]
 8011d82:	4690      	mov	r8, r2
 8011d84:	1c9c      	adds	r4, r3, #2
 8011d86:	46a1      	mov	r9, r4
 8011d88:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011d8c:	2830      	cmp	r0, #48	@ 0x30
 8011d8e:	d0fa      	beq.n	8011d86 <__gethex+0x12>
 8011d90:	eba9 0303 	sub.w	r3, r9, r3
 8011d94:	f1a3 0b02 	sub.w	fp, r3, #2
 8011d98:	f7ff ffd6 	bl	8011d48 <__hexdig_fun>
 8011d9c:	4605      	mov	r5, r0
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d168      	bne.n	8011e74 <__gethex+0x100>
 8011da2:	49a0      	ldr	r1, [pc, #640]	@ (8012024 <__gethex+0x2b0>)
 8011da4:	2201      	movs	r2, #1
 8011da6:	4648      	mov	r0, r9
 8011da8:	f7fc ff1b 	bl	800ebe2 <strncmp>
 8011dac:	4607      	mov	r7, r0
 8011dae:	2800      	cmp	r0, #0
 8011db0:	d167      	bne.n	8011e82 <__gethex+0x10e>
 8011db2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011db6:	4626      	mov	r6, r4
 8011db8:	f7ff ffc6 	bl	8011d48 <__hexdig_fun>
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	d062      	beq.n	8011e86 <__gethex+0x112>
 8011dc0:	4623      	mov	r3, r4
 8011dc2:	7818      	ldrb	r0, [r3, #0]
 8011dc4:	2830      	cmp	r0, #48	@ 0x30
 8011dc6:	4699      	mov	r9, r3
 8011dc8:	f103 0301 	add.w	r3, r3, #1
 8011dcc:	d0f9      	beq.n	8011dc2 <__gethex+0x4e>
 8011dce:	f7ff ffbb 	bl	8011d48 <__hexdig_fun>
 8011dd2:	fab0 f580 	clz	r5, r0
 8011dd6:	096d      	lsrs	r5, r5, #5
 8011dd8:	f04f 0b01 	mov.w	fp, #1
 8011ddc:	464a      	mov	r2, r9
 8011dde:	4616      	mov	r6, r2
 8011de0:	3201      	adds	r2, #1
 8011de2:	7830      	ldrb	r0, [r6, #0]
 8011de4:	f7ff ffb0 	bl	8011d48 <__hexdig_fun>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d1f8      	bne.n	8011dde <__gethex+0x6a>
 8011dec:	498d      	ldr	r1, [pc, #564]	@ (8012024 <__gethex+0x2b0>)
 8011dee:	2201      	movs	r2, #1
 8011df0:	4630      	mov	r0, r6
 8011df2:	f7fc fef6 	bl	800ebe2 <strncmp>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d13f      	bne.n	8011e7a <__gethex+0x106>
 8011dfa:	b944      	cbnz	r4, 8011e0e <__gethex+0x9a>
 8011dfc:	1c74      	adds	r4, r6, #1
 8011dfe:	4622      	mov	r2, r4
 8011e00:	4616      	mov	r6, r2
 8011e02:	3201      	adds	r2, #1
 8011e04:	7830      	ldrb	r0, [r6, #0]
 8011e06:	f7ff ff9f 	bl	8011d48 <__hexdig_fun>
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	d1f8      	bne.n	8011e00 <__gethex+0x8c>
 8011e0e:	1ba4      	subs	r4, r4, r6
 8011e10:	00a7      	lsls	r7, r4, #2
 8011e12:	7833      	ldrb	r3, [r6, #0]
 8011e14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011e18:	2b50      	cmp	r3, #80	@ 0x50
 8011e1a:	d13e      	bne.n	8011e9a <__gethex+0x126>
 8011e1c:	7873      	ldrb	r3, [r6, #1]
 8011e1e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011e20:	d033      	beq.n	8011e8a <__gethex+0x116>
 8011e22:	2b2d      	cmp	r3, #45	@ 0x2d
 8011e24:	d034      	beq.n	8011e90 <__gethex+0x11c>
 8011e26:	1c71      	adds	r1, r6, #1
 8011e28:	2400      	movs	r4, #0
 8011e2a:	7808      	ldrb	r0, [r1, #0]
 8011e2c:	f7ff ff8c 	bl	8011d48 <__hexdig_fun>
 8011e30:	1e43      	subs	r3, r0, #1
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	2b18      	cmp	r3, #24
 8011e36:	d830      	bhi.n	8011e9a <__gethex+0x126>
 8011e38:	f1a0 0210 	sub.w	r2, r0, #16
 8011e3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011e40:	f7ff ff82 	bl	8011d48 <__hexdig_fun>
 8011e44:	f100 3cff 	add.w	ip, r0, #4294967295
 8011e48:	fa5f fc8c 	uxtb.w	ip, ip
 8011e4c:	f1bc 0f18 	cmp.w	ip, #24
 8011e50:	f04f 030a 	mov.w	r3, #10
 8011e54:	d91e      	bls.n	8011e94 <__gethex+0x120>
 8011e56:	b104      	cbz	r4, 8011e5a <__gethex+0xe6>
 8011e58:	4252      	negs	r2, r2
 8011e5a:	4417      	add	r7, r2
 8011e5c:	f8ca 1000 	str.w	r1, [sl]
 8011e60:	b1ed      	cbz	r5, 8011e9e <__gethex+0x12a>
 8011e62:	f1bb 0f00 	cmp.w	fp, #0
 8011e66:	bf0c      	ite	eq
 8011e68:	2506      	moveq	r5, #6
 8011e6a:	2500      	movne	r5, #0
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	b005      	add	sp, #20
 8011e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e74:	2500      	movs	r5, #0
 8011e76:	462c      	mov	r4, r5
 8011e78:	e7b0      	b.n	8011ddc <__gethex+0x68>
 8011e7a:	2c00      	cmp	r4, #0
 8011e7c:	d1c7      	bne.n	8011e0e <__gethex+0x9a>
 8011e7e:	4627      	mov	r7, r4
 8011e80:	e7c7      	b.n	8011e12 <__gethex+0x9e>
 8011e82:	464e      	mov	r6, r9
 8011e84:	462f      	mov	r7, r5
 8011e86:	2501      	movs	r5, #1
 8011e88:	e7c3      	b.n	8011e12 <__gethex+0x9e>
 8011e8a:	2400      	movs	r4, #0
 8011e8c:	1cb1      	adds	r1, r6, #2
 8011e8e:	e7cc      	b.n	8011e2a <__gethex+0xb6>
 8011e90:	2401      	movs	r4, #1
 8011e92:	e7fb      	b.n	8011e8c <__gethex+0x118>
 8011e94:	fb03 0002 	mla	r0, r3, r2, r0
 8011e98:	e7ce      	b.n	8011e38 <__gethex+0xc4>
 8011e9a:	4631      	mov	r1, r6
 8011e9c:	e7de      	b.n	8011e5c <__gethex+0xe8>
 8011e9e:	eba6 0309 	sub.w	r3, r6, r9
 8011ea2:	3b01      	subs	r3, #1
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	2b07      	cmp	r3, #7
 8011ea8:	dc0a      	bgt.n	8011ec0 <__gethex+0x14c>
 8011eaa:	9801      	ldr	r0, [sp, #4]
 8011eac:	f7fd fe12 	bl	800fad4 <_Balloc>
 8011eb0:	4604      	mov	r4, r0
 8011eb2:	b940      	cbnz	r0, 8011ec6 <__gethex+0x152>
 8011eb4:	4b5c      	ldr	r3, [pc, #368]	@ (8012028 <__gethex+0x2b4>)
 8011eb6:	4602      	mov	r2, r0
 8011eb8:	21e4      	movs	r1, #228	@ 0xe4
 8011eba:	485c      	ldr	r0, [pc, #368]	@ (801202c <__gethex+0x2b8>)
 8011ebc:	f7ff fec0 	bl	8011c40 <__assert_func>
 8011ec0:	3101      	adds	r1, #1
 8011ec2:	105b      	asrs	r3, r3, #1
 8011ec4:	e7ef      	b.n	8011ea6 <__gethex+0x132>
 8011ec6:	f100 0a14 	add.w	sl, r0, #20
 8011eca:	2300      	movs	r3, #0
 8011ecc:	4655      	mov	r5, sl
 8011ece:	469b      	mov	fp, r3
 8011ed0:	45b1      	cmp	r9, r6
 8011ed2:	d337      	bcc.n	8011f44 <__gethex+0x1d0>
 8011ed4:	f845 bb04 	str.w	fp, [r5], #4
 8011ed8:	eba5 050a 	sub.w	r5, r5, sl
 8011edc:	10ad      	asrs	r5, r5, #2
 8011ede:	6125      	str	r5, [r4, #16]
 8011ee0:	4658      	mov	r0, fp
 8011ee2:	f7fd fee9 	bl	800fcb8 <__hi0bits>
 8011ee6:	016d      	lsls	r5, r5, #5
 8011ee8:	f8d8 6000 	ldr.w	r6, [r8]
 8011eec:	1a2d      	subs	r5, r5, r0
 8011eee:	42b5      	cmp	r5, r6
 8011ef0:	dd54      	ble.n	8011f9c <__gethex+0x228>
 8011ef2:	1bad      	subs	r5, r5, r6
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f7fe fa72 	bl	80103e0 <__any_on>
 8011efc:	4681      	mov	r9, r0
 8011efe:	b178      	cbz	r0, 8011f20 <__gethex+0x1ac>
 8011f00:	1e6b      	subs	r3, r5, #1
 8011f02:	1159      	asrs	r1, r3, #5
 8011f04:	f003 021f 	and.w	r2, r3, #31
 8011f08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011f0c:	f04f 0901 	mov.w	r9, #1
 8011f10:	fa09 f202 	lsl.w	r2, r9, r2
 8011f14:	420a      	tst	r2, r1
 8011f16:	d003      	beq.n	8011f20 <__gethex+0x1ac>
 8011f18:	454b      	cmp	r3, r9
 8011f1a:	dc36      	bgt.n	8011f8a <__gethex+0x216>
 8011f1c:	f04f 0902 	mov.w	r9, #2
 8011f20:	4629      	mov	r1, r5
 8011f22:	4620      	mov	r0, r4
 8011f24:	f7ff febe 	bl	8011ca4 <rshift>
 8011f28:	442f      	add	r7, r5
 8011f2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f2e:	42bb      	cmp	r3, r7
 8011f30:	da42      	bge.n	8011fb8 <__gethex+0x244>
 8011f32:	9801      	ldr	r0, [sp, #4]
 8011f34:	4621      	mov	r1, r4
 8011f36:	f7fd fe0d 	bl	800fb54 <_Bfree>
 8011f3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	6013      	str	r3, [r2, #0]
 8011f40:	25a3      	movs	r5, #163	@ 0xa3
 8011f42:	e793      	b.n	8011e6c <__gethex+0xf8>
 8011f44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011f48:	2a2e      	cmp	r2, #46	@ 0x2e
 8011f4a:	d012      	beq.n	8011f72 <__gethex+0x1fe>
 8011f4c:	2b20      	cmp	r3, #32
 8011f4e:	d104      	bne.n	8011f5a <__gethex+0x1e6>
 8011f50:	f845 bb04 	str.w	fp, [r5], #4
 8011f54:	f04f 0b00 	mov.w	fp, #0
 8011f58:	465b      	mov	r3, fp
 8011f5a:	7830      	ldrb	r0, [r6, #0]
 8011f5c:	9303      	str	r3, [sp, #12]
 8011f5e:	f7ff fef3 	bl	8011d48 <__hexdig_fun>
 8011f62:	9b03      	ldr	r3, [sp, #12]
 8011f64:	f000 000f 	and.w	r0, r0, #15
 8011f68:	4098      	lsls	r0, r3
 8011f6a:	ea4b 0b00 	orr.w	fp, fp, r0
 8011f6e:	3304      	adds	r3, #4
 8011f70:	e7ae      	b.n	8011ed0 <__gethex+0x15c>
 8011f72:	45b1      	cmp	r9, r6
 8011f74:	d8ea      	bhi.n	8011f4c <__gethex+0x1d8>
 8011f76:	492b      	ldr	r1, [pc, #172]	@ (8012024 <__gethex+0x2b0>)
 8011f78:	9303      	str	r3, [sp, #12]
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	f7fc fe30 	bl	800ebe2 <strncmp>
 8011f82:	9b03      	ldr	r3, [sp, #12]
 8011f84:	2800      	cmp	r0, #0
 8011f86:	d1e1      	bne.n	8011f4c <__gethex+0x1d8>
 8011f88:	e7a2      	b.n	8011ed0 <__gethex+0x15c>
 8011f8a:	1ea9      	subs	r1, r5, #2
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	f7fe fa27 	bl	80103e0 <__any_on>
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d0c2      	beq.n	8011f1c <__gethex+0x1a8>
 8011f96:	f04f 0903 	mov.w	r9, #3
 8011f9a:	e7c1      	b.n	8011f20 <__gethex+0x1ac>
 8011f9c:	da09      	bge.n	8011fb2 <__gethex+0x23e>
 8011f9e:	1b75      	subs	r5, r6, r5
 8011fa0:	4621      	mov	r1, r4
 8011fa2:	9801      	ldr	r0, [sp, #4]
 8011fa4:	462a      	mov	r2, r5
 8011fa6:	f7fd ffe5 	bl	800ff74 <__lshift>
 8011faa:	1b7f      	subs	r7, r7, r5
 8011fac:	4604      	mov	r4, r0
 8011fae:	f100 0a14 	add.w	sl, r0, #20
 8011fb2:	f04f 0900 	mov.w	r9, #0
 8011fb6:	e7b8      	b.n	8011f2a <__gethex+0x1b6>
 8011fb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011fbc:	42bd      	cmp	r5, r7
 8011fbe:	dd6f      	ble.n	80120a0 <__gethex+0x32c>
 8011fc0:	1bed      	subs	r5, r5, r7
 8011fc2:	42ae      	cmp	r6, r5
 8011fc4:	dc34      	bgt.n	8012030 <__gethex+0x2bc>
 8011fc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011fca:	2b02      	cmp	r3, #2
 8011fcc:	d022      	beq.n	8012014 <__gethex+0x2a0>
 8011fce:	2b03      	cmp	r3, #3
 8011fd0:	d024      	beq.n	801201c <__gethex+0x2a8>
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d115      	bne.n	8012002 <__gethex+0x28e>
 8011fd6:	42ae      	cmp	r6, r5
 8011fd8:	d113      	bne.n	8012002 <__gethex+0x28e>
 8011fda:	2e01      	cmp	r6, #1
 8011fdc:	d10b      	bne.n	8011ff6 <__gethex+0x282>
 8011fde:	9a02      	ldr	r2, [sp, #8]
 8011fe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011fe4:	6013      	str	r3, [r2, #0]
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	6123      	str	r3, [r4, #16]
 8011fea:	f8ca 3000 	str.w	r3, [sl]
 8011fee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ff0:	2562      	movs	r5, #98	@ 0x62
 8011ff2:	601c      	str	r4, [r3, #0]
 8011ff4:	e73a      	b.n	8011e6c <__gethex+0xf8>
 8011ff6:	1e71      	subs	r1, r6, #1
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f7fe f9f1 	bl	80103e0 <__any_on>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d1ed      	bne.n	8011fde <__gethex+0x26a>
 8012002:	9801      	ldr	r0, [sp, #4]
 8012004:	4621      	mov	r1, r4
 8012006:	f7fd fda5 	bl	800fb54 <_Bfree>
 801200a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801200c:	2300      	movs	r3, #0
 801200e:	6013      	str	r3, [r2, #0]
 8012010:	2550      	movs	r5, #80	@ 0x50
 8012012:	e72b      	b.n	8011e6c <__gethex+0xf8>
 8012014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012016:	2b00      	cmp	r3, #0
 8012018:	d1f3      	bne.n	8012002 <__gethex+0x28e>
 801201a:	e7e0      	b.n	8011fde <__gethex+0x26a>
 801201c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801201e:	2b00      	cmp	r3, #0
 8012020:	d1dd      	bne.n	8011fde <__gethex+0x26a>
 8012022:	e7ee      	b.n	8012002 <__gethex+0x28e>
 8012024:	08012be1 	.word	0x08012be1
 8012028:	08012b77 	.word	0x08012b77
 801202c:	08012c53 	.word	0x08012c53
 8012030:	1e6f      	subs	r7, r5, #1
 8012032:	f1b9 0f00 	cmp.w	r9, #0
 8012036:	d130      	bne.n	801209a <__gethex+0x326>
 8012038:	b127      	cbz	r7, 8012044 <__gethex+0x2d0>
 801203a:	4639      	mov	r1, r7
 801203c:	4620      	mov	r0, r4
 801203e:	f7fe f9cf 	bl	80103e0 <__any_on>
 8012042:	4681      	mov	r9, r0
 8012044:	117a      	asrs	r2, r7, #5
 8012046:	2301      	movs	r3, #1
 8012048:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801204c:	f007 071f 	and.w	r7, r7, #31
 8012050:	40bb      	lsls	r3, r7
 8012052:	4213      	tst	r3, r2
 8012054:	4629      	mov	r1, r5
 8012056:	4620      	mov	r0, r4
 8012058:	bf18      	it	ne
 801205a:	f049 0902 	orrne.w	r9, r9, #2
 801205e:	f7ff fe21 	bl	8011ca4 <rshift>
 8012062:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012066:	1b76      	subs	r6, r6, r5
 8012068:	2502      	movs	r5, #2
 801206a:	f1b9 0f00 	cmp.w	r9, #0
 801206e:	d047      	beq.n	8012100 <__gethex+0x38c>
 8012070:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012074:	2b02      	cmp	r3, #2
 8012076:	d015      	beq.n	80120a4 <__gethex+0x330>
 8012078:	2b03      	cmp	r3, #3
 801207a:	d017      	beq.n	80120ac <__gethex+0x338>
 801207c:	2b01      	cmp	r3, #1
 801207e:	d109      	bne.n	8012094 <__gethex+0x320>
 8012080:	f019 0f02 	tst.w	r9, #2
 8012084:	d006      	beq.n	8012094 <__gethex+0x320>
 8012086:	f8da 3000 	ldr.w	r3, [sl]
 801208a:	ea49 0903 	orr.w	r9, r9, r3
 801208e:	f019 0f01 	tst.w	r9, #1
 8012092:	d10e      	bne.n	80120b2 <__gethex+0x33e>
 8012094:	f045 0510 	orr.w	r5, r5, #16
 8012098:	e032      	b.n	8012100 <__gethex+0x38c>
 801209a:	f04f 0901 	mov.w	r9, #1
 801209e:	e7d1      	b.n	8012044 <__gethex+0x2d0>
 80120a0:	2501      	movs	r5, #1
 80120a2:	e7e2      	b.n	801206a <__gethex+0x2f6>
 80120a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120a6:	f1c3 0301 	rsb	r3, r3, #1
 80120aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80120ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d0f0      	beq.n	8012094 <__gethex+0x320>
 80120b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80120b6:	f104 0314 	add.w	r3, r4, #20
 80120ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80120be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80120c2:	f04f 0c00 	mov.w	ip, #0
 80120c6:	4618      	mov	r0, r3
 80120c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80120cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80120d0:	d01b      	beq.n	801210a <__gethex+0x396>
 80120d2:	3201      	adds	r2, #1
 80120d4:	6002      	str	r2, [r0, #0]
 80120d6:	2d02      	cmp	r5, #2
 80120d8:	f104 0314 	add.w	r3, r4, #20
 80120dc:	d13c      	bne.n	8012158 <__gethex+0x3e4>
 80120de:	f8d8 2000 	ldr.w	r2, [r8]
 80120e2:	3a01      	subs	r2, #1
 80120e4:	42b2      	cmp	r2, r6
 80120e6:	d109      	bne.n	80120fc <__gethex+0x388>
 80120e8:	1171      	asrs	r1, r6, #5
 80120ea:	2201      	movs	r2, #1
 80120ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80120f0:	f006 061f 	and.w	r6, r6, #31
 80120f4:	fa02 f606 	lsl.w	r6, r2, r6
 80120f8:	421e      	tst	r6, r3
 80120fa:	d13a      	bne.n	8012172 <__gethex+0x3fe>
 80120fc:	f045 0520 	orr.w	r5, r5, #32
 8012100:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012102:	601c      	str	r4, [r3, #0]
 8012104:	9b02      	ldr	r3, [sp, #8]
 8012106:	601f      	str	r7, [r3, #0]
 8012108:	e6b0      	b.n	8011e6c <__gethex+0xf8>
 801210a:	4299      	cmp	r1, r3
 801210c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012110:	d8d9      	bhi.n	80120c6 <__gethex+0x352>
 8012112:	68a3      	ldr	r3, [r4, #8]
 8012114:	459b      	cmp	fp, r3
 8012116:	db17      	blt.n	8012148 <__gethex+0x3d4>
 8012118:	6861      	ldr	r1, [r4, #4]
 801211a:	9801      	ldr	r0, [sp, #4]
 801211c:	3101      	adds	r1, #1
 801211e:	f7fd fcd9 	bl	800fad4 <_Balloc>
 8012122:	4681      	mov	r9, r0
 8012124:	b918      	cbnz	r0, 801212e <__gethex+0x3ba>
 8012126:	4b1a      	ldr	r3, [pc, #104]	@ (8012190 <__gethex+0x41c>)
 8012128:	4602      	mov	r2, r0
 801212a:	2184      	movs	r1, #132	@ 0x84
 801212c:	e6c5      	b.n	8011eba <__gethex+0x146>
 801212e:	6922      	ldr	r2, [r4, #16]
 8012130:	3202      	adds	r2, #2
 8012132:	f104 010c 	add.w	r1, r4, #12
 8012136:	0092      	lsls	r2, r2, #2
 8012138:	300c      	adds	r0, #12
 801213a:	f7ff fd69 	bl	8011c10 <memcpy>
 801213e:	4621      	mov	r1, r4
 8012140:	9801      	ldr	r0, [sp, #4]
 8012142:	f7fd fd07 	bl	800fb54 <_Bfree>
 8012146:	464c      	mov	r4, r9
 8012148:	6923      	ldr	r3, [r4, #16]
 801214a:	1c5a      	adds	r2, r3, #1
 801214c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012150:	6122      	str	r2, [r4, #16]
 8012152:	2201      	movs	r2, #1
 8012154:	615a      	str	r2, [r3, #20]
 8012156:	e7be      	b.n	80120d6 <__gethex+0x362>
 8012158:	6922      	ldr	r2, [r4, #16]
 801215a:	455a      	cmp	r2, fp
 801215c:	dd0b      	ble.n	8012176 <__gethex+0x402>
 801215e:	2101      	movs	r1, #1
 8012160:	4620      	mov	r0, r4
 8012162:	f7ff fd9f 	bl	8011ca4 <rshift>
 8012166:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801216a:	3701      	adds	r7, #1
 801216c:	42bb      	cmp	r3, r7
 801216e:	f6ff aee0 	blt.w	8011f32 <__gethex+0x1be>
 8012172:	2501      	movs	r5, #1
 8012174:	e7c2      	b.n	80120fc <__gethex+0x388>
 8012176:	f016 061f 	ands.w	r6, r6, #31
 801217a:	d0fa      	beq.n	8012172 <__gethex+0x3fe>
 801217c:	4453      	add	r3, sl
 801217e:	f1c6 0620 	rsb	r6, r6, #32
 8012182:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012186:	f7fd fd97 	bl	800fcb8 <__hi0bits>
 801218a:	42b0      	cmp	r0, r6
 801218c:	dbe7      	blt.n	801215e <__gethex+0x3ea>
 801218e:	e7f0      	b.n	8012172 <__gethex+0x3fe>
 8012190:	08012b77 	.word	0x08012b77

08012194 <L_shift>:
 8012194:	f1c2 0208 	rsb	r2, r2, #8
 8012198:	0092      	lsls	r2, r2, #2
 801219a:	b570      	push	{r4, r5, r6, lr}
 801219c:	f1c2 0620 	rsb	r6, r2, #32
 80121a0:	6843      	ldr	r3, [r0, #4]
 80121a2:	6804      	ldr	r4, [r0, #0]
 80121a4:	fa03 f506 	lsl.w	r5, r3, r6
 80121a8:	432c      	orrs	r4, r5
 80121aa:	40d3      	lsrs	r3, r2
 80121ac:	6004      	str	r4, [r0, #0]
 80121ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80121b2:	4288      	cmp	r0, r1
 80121b4:	d3f4      	bcc.n	80121a0 <L_shift+0xc>
 80121b6:	bd70      	pop	{r4, r5, r6, pc}

080121b8 <__match>:
 80121b8:	b530      	push	{r4, r5, lr}
 80121ba:	6803      	ldr	r3, [r0, #0]
 80121bc:	3301      	adds	r3, #1
 80121be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121c2:	b914      	cbnz	r4, 80121ca <__match+0x12>
 80121c4:	6003      	str	r3, [r0, #0]
 80121c6:	2001      	movs	r0, #1
 80121c8:	bd30      	pop	{r4, r5, pc}
 80121ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80121d2:	2d19      	cmp	r5, #25
 80121d4:	bf98      	it	ls
 80121d6:	3220      	addls	r2, #32
 80121d8:	42a2      	cmp	r2, r4
 80121da:	d0f0      	beq.n	80121be <__match+0x6>
 80121dc:	2000      	movs	r0, #0
 80121de:	e7f3      	b.n	80121c8 <__match+0x10>

080121e0 <__hexnan>:
 80121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	680b      	ldr	r3, [r1, #0]
 80121e6:	6801      	ldr	r1, [r0, #0]
 80121e8:	115e      	asrs	r6, r3, #5
 80121ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80121ee:	f013 031f 	ands.w	r3, r3, #31
 80121f2:	b087      	sub	sp, #28
 80121f4:	bf18      	it	ne
 80121f6:	3604      	addne	r6, #4
 80121f8:	2500      	movs	r5, #0
 80121fa:	1f37      	subs	r7, r6, #4
 80121fc:	4682      	mov	sl, r0
 80121fe:	4690      	mov	r8, r2
 8012200:	9301      	str	r3, [sp, #4]
 8012202:	f846 5c04 	str.w	r5, [r6, #-4]
 8012206:	46b9      	mov	r9, r7
 8012208:	463c      	mov	r4, r7
 801220a:	9502      	str	r5, [sp, #8]
 801220c:	46ab      	mov	fp, r5
 801220e:	784a      	ldrb	r2, [r1, #1]
 8012210:	1c4b      	adds	r3, r1, #1
 8012212:	9303      	str	r3, [sp, #12]
 8012214:	b342      	cbz	r2, 8012268 <__hexnan+0x88>
 8012216:	4610      	mov	r0, r2
 8012218:	9105      	str	r1, [sp, #20]
 801221a:	9204      	str	r2, [sp, #16]
 801221c:	f7ff fd94 	bl	8011d48 <__hexdig_fun>
 8012220:	2800      	cmp	r0, #0
 8012222:	d151      	bne.n	80122c8 <__hexnan+0xe8>
 8012224:	9a04      	ldr	r2, [sp, #16]
 8012226:	9905      	ldr	r1, [sp, #20]
 8012228:	2a20      	cmp	r2, #32
 801222a:	d818      	bhi.n	801225e <__hexnan+0x7e>
 801222c:	9b02      	ldr	r3, [sp, #8]
 801222e:	459b      	cmp	fp, r3
 8012230:	dd13      	ble.n	801225a <__hexnan+0x7a>
 8012232:	454c      	cmp	r4, r9
 8012234:	d206      	bcs.n	8012244 <__hexnan+0x64>
 8012236:	2d07      	cmp	r5, #7
 8012238:	dc04      	bgt.n	8012244 <__hexnan+0x64>
 801223a:	462a      	mov	r2, r5
 801223c:	4649      	mov	r1, r9
 801223e:	4620      	mov	r0, r4
 8012240:	f7ff ffa8 	bl	8012194 <L_shift>
 8012244:	4544      	cmp	r4, r8
 8012246:	d952      	bls.n	80122ee <__hexnan+0x10e>
 8012248:	2300      	movs	r3, #0
 801224a:	f1a4 0904 	sub.w	r9, r4, #4
 801224e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012252:	f8cd b008 	str.w	fp, [sp, #8]
 8012256:	464c      	mov	r4, r9
 8012258:	461d      	mov	r5, r3
 801225a:	9903      	ldr	r1, [sp, #12]
 801225c:	e7d7      	b.n	801220e <__hexnan+0x2e>
 801225e:	2a29      	cmp	r2, #41	@ 0x29
 8012260:	d157      	bne.n	8012312 <__hexnan+0x132>
 8012262:	3102      	adds	r1, #2
 8012264:	f8ca 1000 	str.w	r1, [sl]
 8012268:	f1bb 0f00 	cmp.w	fp, #0
 801226c:	d051      	beq.n	8012312 <__hexnan+0x132>
 801226e:	454c      	cmp	r4, r9
 8012270:	d206      	bcs.n	8012280 <__hexnan+0xa0>
 8012272:	2d07      	cmp	r5, #7
 8012274:	dc04      	bgt.n	8012280 <__hexnan+0xa0>
 8012276:	462a      	mov	r2, r5
 8012278:	4649      	mov	r1, r9
 801227a:	4620      	mov	r0, r4
 801227c:	f7ff ff8a 	bl	8012194 <L_shift>
 8012280:	4544      	cmp	r4, r8
 8012282:	d936      	bls.n	80122f2 <__hexnan+0x112>
 8012284:	f1a8 0204 	sub.w	r2, r8, #4
 8012288:	4623      	mov	r3, r4
 801228a:	f853 1b04 	ldr.w	r1, [r3], #4
 801228e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012292:	429f      	cmp	r7, r3
 8012294:	d2f9      	bcs.n	801228a <__hexnan+0xaa>
 8012296:	1b3b      	subs	r3, r7, r4
 8012298:	f023 0303 	bic.w	r3, r3, #3
 801229c:	3304      	adds	r3, #4
 801229e:	3401      	adds	r4, #1
 80122a0:	3e03      	subs	r6, #3
 80122a2:	42b4      	cmp	r4, r6
 80122a4:	bf88      	it	hi
 80122a6:	2304      	movhi	r3, #4
 80122a8:	4443      	add	r3, r8
 80122aa:	2200      	movs	r2, #0
 80122ac:	f843 2b04 	str.w	r2, [r3], #4
 80122b0:	429f      	cmp	r7, r3
 80122b2:	d2fb      	bcs.n	80122ac <__hexnan+0xcc>
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	b91b      	cbnz	r3, 80122c0 <__hexnan+0xe0>
 80122b8:	4547      	cmp	r7, r8
 80122ba:	d128      	bne.n	801230e <__hexnan+0x12e>
 80122bc:	2301      	movs	r3, #1
 80122be:	603b      	str	r3, [r7, #0]
 80122c0:	2005      	movs	r0, #5
 80122c2:	b007      	add	sp, #28
 80122c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c8:	3501      	adds	r5, #1
 80122ca:	2d08      	cmp	r5, #8
 80122cc:	f10b 0b01 	add.w	fp, fp, #1
 80122d0:	dd06      	ble.n	80122e0 <__hexnan+0x100>
 80122d2:	4544      	cmp	r4, r8
 80122d4:	d9c1      	bls.n	801225a <__hexnan+0x7a>
 80122d6:	2300      	movs	r3, #0
 80122d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80122dc:	2501      	movs	r5, #1
 80122de:	3c04      	subs	r4, #4
 80122e0:	6822      	ldr	r2, [r4, #0]
 80122e2:	f000 000f 	and.w	r0, r0, #15
 80122e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80122ea:	6020      	str	r0, [r4, #0]
 80122ec:	e7b5      	b.n	801225a <__hexnan+0x7a>
 80122ee:	2508      	movs	r5, #8
 80122f0:	e7b3      	b.n	801225a <__hexnan+0x7a>
 80122f2:	9b01      	ldr	r3, [sp, #4]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d0dd      	beq.n	80122b4 <__hexnan+0xd4>
 80122f8:	f1c3 0320 	rsb	r3, r3, #32
 80122fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012300:	40da      	lsrs	r2, r3
 8012302:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012306:	4013      	ands	r3, r2
 8012308:	f846 3c04 	str.w	r3, [r6, #-4]
 801230c:	e7d2      	b.n	80122b4 <__hexnan+0xd4>
 801230e:	3f04      	subs	r7, #4
 8012310:	e7d0      	b.n	80122b4 <__hexnan+0xd4>
 8012312:	2004      	movs	r0, #4
 8012314:	e7d5      	b.n	80122c2 <__hexnan+0xe2>

08012316 <__ascii_mbtowc>:
 8012316:	b082      	sub	sp, #8
 8012318:	b901      	cbnz	r1, 801231c <__ascii_mbtowc+0x6>
 801231a:	a901      	add	r1, sp, #4
 801231c:	b142      	cbz	r2, 8012330 <__ascii_mbtowc+0x1a>
 801231e:	b14b      	cbz	r3, 8012334 <__ascii_mbtowc+0x1e>
 8012320:	7813      	ldrb	r3, [r2, #0]
 8012322:	600b      	str	r3, [r1, #0]
 8012324:	7812      	ldrb	r2, [r2, #0]
 8012326:	1e10      	subs	r0, r2, #0
 8012328:	bf18      	it	ne
 801232a:	2001      	movne	r0, #1
 801232c:	b002      	add	sp, #8
 801232e:	4770      	bx	lr
 8012330:	4610      	mov	r0, r2
 8012332:	e7fb      	b.n	801232c <__ascii_mbtowc+0x16>
 8012334:	f06f 0001 	mvn.w	r0, #1
 8012338:	e7f8      	b.n	801232c <__ascii_mbtowc+0x16>

0801233a <_realloc_r>:
 801233a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801233e:	4607      	mov	r7, r0
 8012340:	4614      	mov	r4, r2
 8012342:	460d      	mov	r5, r1
 8012344:	b921      	cbnz	r1, 8012350 <_realloc_r+0x16>
 8012346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801234a:	4611      	mov	r1, r2
 801234c:	f7fd bb36 	b.w	800f9bc <_malloc_r>
 8012350:	b92a      	cbnz	r2, 801235e <_realloc_r+0x24>
 8012352:	f7fd fabf 	bl	800f8d4 <_free_r>
 8012356:	4625      	mov	r5, r4
 8012358:	4628      	mov	r0, r5
 801235a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801235e:	f000 f8b2 	bl	80124c6 <_malloc_usable_size_r>
 8012362:	4284      	cmp	r4, r0
 8012364:	4606      	mov	r6, r0
 8012366:	d802      	bhi.n	801236e <_realloc_r+0x34>
 8012368:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801236c:	d8f4      	bhi.n	8012358 <_realloc_r+0x1e>
 801236e:	4621      	mov	r1, r4
 8012370:	4638      	mov	r0, r7
 8012372:	f7fd fb23 	bl	800f9bc <_malloc_r>
 8012376:	4680      	mov	r8, r0
 8012378:	b908      	cbnz	r0, 801237e <_realloc_r+0x44>
 801237a:	4645      	mov	r5, r8
 801237c:	e7ec      	b.n	8012358 <_realloc_r+0x1e>
 801237e:	42b4      	cmp	r4, r6
 8012380:	4622      	mov	r2, r4
 8012382:	4629      	mov	r1, r5
 8012384:	bf28      	it	cs
 8012386:	4632      	movcs	r2, r6
 8012388:	f7ff fc42 	bl	8011c10 <memcpy>
 801238c:	4629      	mov	r1, r5
 801238e:	4638      	mov	r0, r7
 8012390:	f7fd faa0 	bl	800f8d4 <_free_r>
 8012394:	e7f1      	b.n	801237a <_realloc_r+0x40>
	...

08012398 <_strtoul_l.isra.0>:
 8012398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801239c:	4e34      	ldr	r6, [pc, #208]	@ (8012470 <_strtoul_l.isra.0+0xd8>)
 801239e:	4686      	mov	lr, r0
 80123a0:	460d      	mov	r5, r1
 80123a2:	4628      	mov	r0, r5
 80123a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123a8:	5d37      	ldrb	r7, [r6, r4]
 80123aa:	f017 0708 	ands.w	r7, r7, #8
 80123ae:	d1f8      	bne.n	80123a2 <_strtoul_l.isra.0+0xa>
 80123b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80123b2:	d110      	bne.n	80123d6 <_strtoul_l.isra.0+0x3e>
 80123b4:	782c      	ldrb	r4, [r5, #0]
 80123b6:	2701      	movs	r7, #1
 80123b8:	1c85      	adds	r5, r0, #2
 80123ba:	f033 0010 	bics.w	r0, r3, #16
 80123be:	d115      	bne.n	80123ec <_strtoul_l.isra.0+0x54>
 80123c0:	2c30      	cmp	r4, #48	@ 0x30
 80123c2:	d10d      	bne.n	80123e0 <_strtoul_l.isra.0+0x48>
 80123c4:	7828      	ldrb	r0, [r5, #0]
 80123c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80123ca:	2858      	cmp	r0, #88	@ 0x58
 80123cc:	d108      	bne.n	80123e0 <_strtoul_l.isra.0+0x48>
 80123ce:	786c      	ldrb	r4, [r5, #1]
 80123d0:	3502      	adds	r5, #2
 80123d2:	2310      	movs	r3, #16
 80123d4:	e00a      	b.n	80123ec <_strtoul_l.isra.0+0x54>
 80123d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80123d8:	bf04      	itt	eq
 80123da:	782c      	ldrbeq	r4, [r5, #0]
 80123dc:	1c85      	addeq	r5, r0, #2
 80123de:	e7ec      	b.n	80123ba <_strtoul_l.isra.0+0x22>
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d1f6      	bne.n	80123d2 <_strtoul_l.isra.0+0x3a>
 80123e4:	2c30      	cmp	r4, #48	@ 0x30
 80123e6:	bf14      	ite	ne
 80123e8:	230a      	movne	r3, #10
 80123ea:	2308      	moveq	r3, #8
 80123ec:	f04f 38ff 	mov.w	r8, #4294967295
 80123f0:	2600      	movs	r6, #0
 80123f2:	fbb8 f8f3 	udiv	r8, r8, r3
 80123f6:	fb03 f908 	mul.w	r9, r3, r8
 80123fa:	ea6f 0909 	mvn.w	r9, r9
 80123fe:	4630      	mov	r0, r6
 8012400:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012404:	f1bc 0f09 	cmp.w	ip, #9
 8012408:	d810      	bhi.n	801242c <_strtoul_l.isra.0+0x94>
 801240a:	4664      	mov	r4, ip
 801240c:	42a3      	cmp	r3, r4
 801240e:	dd1e      	ble.n	801244e <_strtoul_l.isra.0+0xb6>
 8012410:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012414:	d007      	beq.n	8012426 <_strtoul_l.isra.0+0x8e>
 8012416:	4580      	cmp	r8, r0
 8012418:	d316      	bcc.n	8012448 <_strtoul_l.isra.0+0xb0>
 801241a:	d101      	bne.n	8012420 <_strtoul_l.isra.0+0x88>
 801241c:	45a1      	cmp	r9, r4
 801241e:	db13      	blt.n	8012448 <_strtoul_l.isra.0+0xb0>
 8012420:	fb00 4003 	mla	r0, r0, r3, r4
 8012424:	2601      	movs	r6, #1
 8012426:	f815 4b01 	ldrb.w	r4, [r5], #1
 801242a:	e7e9      	b.n	8012400 <_strtoul_l.isra.0+0x68>
 801242c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012430:	f1bc 0f19 	cmp.w	ip, #25
 8012434:	d801      	bhi.n	801243a <_strtoul_l.isra.0+0xa2>
 8012436:	3c37      	subs	r4, #55	@ 0x37
 8012438:	e7e8      	b.n	801240c <_strtoul_l.isra.0+0x74>
 801243a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801243e:	f1bc 0f19 	cmp.w	ip, #25
 8012442:	d804      	bhi.n	801244e <_strtoul_l.isra.0+0xb6>
 8012444:	3c57      	subs	r4, #87	@ 0x57
 8012446:	e7e1      	b.n	801240c <_strtoul_l.isra.0+0x74>
 8012448:	f04f 36ff 	mov.w	r6, #4294967295
 801244c:	e7eb      	b.n	8012426 <_strtoul_l.isra.0+0x8e>
 801244e:	1c73      	adds	r3, r6, #1
 8012450:	d106      	bne.n	8012460 <_strtoul_l.isra.0+0xc8>
 8012452:	2322      	movs	r3, #34	@ 0x22
 8012454:	f8ce 3000 	str.w	r3, [lr]
 8012458:	4630      	mov	r0, r6
 801245a:	b932      	cbnz	r2, 801246a <_strtoul_l.isra.0+0xd2>
 801245c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012460:	b107      	cbz	r7, 8012464 <_strtoul_l.isra.0+0xcc>
 8012462:	4240      	negs	r0, r0
 8012464:	2a00      	cmp	r2, #0
 8012466:	d0f9      	beq.n	801245c <_strtoul_l.isra.0+0xc4>
 8012468:	b106      	cbz	r6, 801246c <_strtoul_l.isra.0+0xd4>
 801246a:	1e69      	subs	r1, r5, #1
 801246c:	6011      	str	r1, [r2, #0]
 801246e:	e7f5      	b.n	801245c <_strtoul_l.isra.0+0xc4>
 8012470:	08012e01 	.word	0x08012e01

08012474 <_strtoul_r>:
 8012474:	f7ff bf90 	b.w	8012398 <_strtoul_l.isra.0>

08012478 <__ascii_wctomb>:
 8012478:	4603      	mov	r3, r0
 801247a:	4608      	mov	r0, r1
 801247c:	b141      	cbz	r1, 8012490 <__ascii_wctomb+0x18>
 801247e:	2aff      	cmp	r2, #255	@ 0xff
 8012480:	d904      	bls.n	801248c <__ascii_wctomb+0x14>
 8012482:	228a      	movs	r2, #138	@ 0x8a
 8012484:	601a      	str	r2, [r3, #0]
 8012486:	f04f 30ff 	mov.w	r0, #4294967295
 801248a:	4770      	bx	lr
 801248c:	700a      	strb	r2, [r1, #0]
 801248e:	2001      	movs	r0, #1
 8012490:	4770      	bx	lr
	...

08012494 <fiprintf>:
 8012494:	b40e      	push	{r1, r2, r3}
 8012496:	b503      	push	{r0, r1, lr}
 8012498:	4601      	mov	r1, r0
 801249a:	ab03      	add	r3, sp, #12
 801249c:	4805      	ldr	r0, [pc, #20]	@ (80124b4 <fiprintf+0x20>)
 801249e:	f853 2b04 	ldr.w	r2, [r3], #4
 80124a2:	6800      	ldr	r0, [r0, #0]
 80124a4:	9301      	str	r3, [sp, #4]
 80124a6:	f000 f83f 	bl	8012528 <_vfiprintf_r>
 80124aa:	b002      	add	sp, #8
 80124ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80124b0:	b003      	add	sp, #12
 80124b2:	4770      	bx	lr
 80124b4:	24000030 	.word	0x24000030

080124b8 <abort>:
 80124b8:	b508      	push	{r3, lr}
 80124ba:	2006      	movs	r0, #6
 80124bc:	f000 fa08 	bl	80128d0 <raise>
 80124c0:	2001      	movs	r0, #1
 80124c2:	f7ef fcd7 	bl	8001e74 <_exit>

080124c6 <_malloc_usable_size_r>:
 80124c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124ca:	1f18      	subs	r0, r3, #4
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	bfbc      	itt	lt
 80124d0:	580b      	ldrlt	r3, [r1, r0]
 80124d2:	18c0      	addlt	r0, r0, r3
 80124d4:	4770      	bx	lr

080124d6 <__sfputc_r>:
 80124d6:	6893      	ldr	r3, [r2, #8]
 80124d8:	3b01      	subs	r3, #1
 80124da:	2b00      	cmp	r3, #0
 80124dc:	b410      	push	{r4}
 80124de:	6093      	str	r3, [r2, #8]
 80124e0:	da08      	bge.n	80124f4 <__sfputc_r+0x1e>
 80124e2:	6994      	ldr	r4, [r2, #24]
 80124e4:	42a3      	cmp	r3, r4
 80124e6:	db01      	blt.n	80124ec <__sfputc_r+0x16>
 80124e8:	290a      	cmp	r1, #10
 80124ea:	d103      	bne.n	80124f4 <__sfputc_r+0x1e>
 80124ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124f0:	f000 b932 	b.w	8012758 <__swbuf_r>
 80124f4:	6813      	ldr	r3, [r2, #0]
 80124f6:	1c58      	adds	r0, r3, #1
 80124f8:	6010      	str	r0, [r2, #0]
 80124fa:	7019      	strb	r1, [r3, #0]
 80124fc:	4608      	mov	r0, r1
 80124fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012502:	4770      	bx	lr

08012504 <__sfputs_r>:
 8012504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012506:	4606      	mov	r6, r0
 8012508:	460f      	mov	r7, r1
 801250a:	4614      	mov	r4, r2
 801250c:	18d5      	adds	r5, r2, r3
 801250e:	42ac      	cmp	r4, r5
 8012510:	d101      	bne.n	8012516 <__sfputs_r+0x12>
 8012512:	2000      	movs	r0, #0
 8012514:	e007      	b.n	8012526 <__sfputs_r+0x22>
 8012516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801251a:	463a      	mov	r2, r7
 801251c:	4630      	mov	r0, r6
 801251e:	f7ff ffda 	bl	80124d6 <__sfputc_r>
 8012522:	1c43      	adds	r3, r0, #1
 8012524:	d1f3      	bne.n	801250e <__sfputs_r+0xa>
 8012526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012528 <_vfiprintf_r>:
 8012528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801252c:	460d      	mov	r5, r1
 801252e:	b09d      	sub	sp, #116	@ 0x74
 8012530:	4614      	mov	r4, r2
 8012532:	4698      	mov	r8, r3
 8012534:	4606      	mov	r6, r0
 8012536:	b118      	cbz	r0, 8012540 <_vfiprintf_r+0x18>
 8012538:	6a03      	ldr	r3, [r0, #32]
 801253a:	b90b      	cbnz	r3, 8012540 <_vfiprintf_r+0x18>
 801253c:	f7fc fa80 	bl	800ea40 <__sinit>
 8012540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012542:	07d9      	lsls	r1, r3, #31
 8012544:	d405      	bmi.n	8012552 <_vfiprintf_r+0x2a>
 8012546:	89ab      	ldrh	r3, [r5, #12]
 8012548:	059a      	lsls	r2, r3, #22
 801254a:	d402      	bmi.n	8012552 <_vfiprintf_r+0x2a>
 801254c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801254e:	f7fc fbd0 	bl	800ecf2 <__retarget_lock_acquire_recursive>
 8012552:	89ab      	ldrh	r3, [r5, #12]
 8012554:	071b      	lsls	r3, r3, #28
 8012556:	d501      	bpl.n	801255c <_vfiprintf_r+0x34>
 8012558:	692b      	ldr	r3, [r5, #16]
 801255a:	b99b      	cbnz	r3, 8012584 <_vfiprintf_r+0x5c>
 801255c:	4629      	mov	r1, r5
 801255e:	4630      	mov	r0, r6
 8012560:	f000 f938 	bl	80127d4 <__swsetup_r>
 8012564:	b170      	cbz	r0, 8012584 <_vfiprintf_r+0x5c>
 8012566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012568:	07dc      	lsls	r4, r3, #31
 801256a:	d504      	bpl.n	8012576 <_vfiprintf_r+0x4e>
 801256c:	f04f 30ff 	mov.w	r0, #4294967295
 8012570:	b01d      	add	sp, #116	@ 0x74
 8012572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012576:	89ab      	ldrh	r3, [r5, #12]
 8012578:	0598      	lsls	r0, r3, #22
 801257a:	d4f7      	bmi.n	801256c <_vfiprintf_r+0x44>
 801257c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801257e:	f7fc fbb9 	bl	800ecf4 <__retarget_lock_release_recursive>
 8012582:	e7f3      	b.n	801256c <_vfiprintf_r+0x44>
 8012584:	2300      	movs	r3, #0
 8012586:	9309      	str	r3, [sp, #36]	@ 0x24
 8012588:	2320      	movs	r3, #32
 801258a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801258e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012592:	2330      	movs	r3, #48	@ 0x30
 8012594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012744 <_vfiprintf_r+0x21c>
 8012598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801259c:	f04f 0901 	mov.w	r9, #1
 80125a0:	4623      	mov	r3, r4
 80125a2:	469a      	mov	sl, r3
 80125a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125a8:	b10a      	cbz	r2, 80125ae <_vfiprintf_r+0x86>
 80125aa:	2a25      	cmp	r2, #37	@ 0x25
 80125ac:	d1f9      	bne.n	80125a2 <_vfiprintf_r+0x7a>
 80125ae:	ebba 0b04 	subs.w	fp, sl, r4
 80125b2:	d00b      	beq.n	80125cc <_vfiprintf_r+0xa4>
 80125b4:	465b      	mov	r3, fp
 80125b6:	4622      	mov	r2, r4
 80125b8:	4629      	mov	r1, r5
 80125ba:	4630      	mov	r0, r6
 80125bc:	f7ff ffa2 	bl	8012504 <__sfputs_r>
 80125c0:	3001      	adds	r0, #1
 80125c2:	f000 80a7 	beq.w	8012714 <_vfiprintf_r+0x1ec>
 80125c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80125c8:	445a      	add	r2, fp
 80125ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80125cc:	f89a 3000 	ldrb.w	r3, [sl]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	f000 809f 	beq.w	8012714 <_vfiprintf_r+0x1ec>
 80125d6:	2300      	movs	r3, #0
 80125d8:	f04f 32ff 	mov.w	r2, #4294967295
 80125dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125e0:	f10a 0a01 	add.w	sl, sl, #1
 80125e4:	9304      	str	r3, [sp, #16]
 80125e6:	9307      	str	r3, [sp, #28]
 80125e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80125ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80125ee:	4654      	mov	r4, sl
 80125f0:	2205      	movs	r2, #5
 80125f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125f6:	4853      	ldr	r0, [pc, #332]	@ (8012744 <_vfiprintf_r+0x21c>)
 80125f8:	f7ed fe72 	bl	80002e0 <memchr>
 80125fc:	9a04      	ldr	r2, [sp, #16]
 80125fe:	b9d8      	cbnz	r0, 8012638 <_vfiprintf_r+0x110>
 8012600:	06d1      	lsls	r1, r2, #27
 8012602:	bf44      	itt	mi
 8012604:	2320      	movmi	r3, #32
 8012606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801260a:	0713      	lsls	r3, r2, #28
 801260c:	bf44      	itt	mi
 801260e:	232b      	movmi	r3, #43	@ 0x2b
 8012610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012614:	f89a 3000 	ldrb.w	r3, [sl]
 8012618:	2b2a      	cmp	r3, #42	@ 0x2a
 801261a:	d015      	beq.n	8012648 <_vfiprintf_r+0x120>
 801261c:	9a07      	ldr	r2, [sp, #28]
 801261e:	4654      	mov	r4, sl
 8012620:	2000      	movs	r0, #0
 8012622:	f04f 0c0a 	mov.w	ip, #10
 8012626:	4621      	mov	r1, r4
 8012628:	f811 3b01 	ldrb.w	r3, [r1], #1
 801262c:	3b30      	subs	r3, #48	@ 0x30
 801262e:	2b09      	cmp	r3, #9
 8012630:	d94b      	bls.n	80126ca <_vfiprintf_r+0x1a2>
 8012632:	b1b0      	cbz	r0, 8012662 <_vfiprintf_r+0x13a>
 8012634:	9207      	str	r2, [sp, #28]
 8012636:	e014      	b.n	8012662 <_vfiprintf_r+0x13a>
 8012638:	eba0 0308 	sub.w	r3, r0, r8
 801263c:	fa09 f303 	lsl.w	r3, r9, r3
 8012640:	4313      	orrs	r3, r2
 8012642:	9304      	str	r3, [sp, #16]
 8012644:	46a2      	mov	sl, r4
 8012646:	e7d2      	b.n	80125ee <_vfiprintf_r+0xc6>
 8012648:	9b03      	ldr	r3, [sp, #12]
 801264a:	1d19      	adds	r1, r3, #4
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	9103      	str	r1, [sp, #12]
 8012650:	2b00      	cmp	r3, #0
 8012652:	bfbb      	ittet	lt
 8012654:	425b      	neglt	r3, r3
 8012656:	f042 0202 	orrlt.w	r2, r2, #2
 801265a:	9307      	strge	r3, [sp, #28]
 801265c:	9307      	strlt	r3, [sp, #28]
 801265e:	bfb8      	it	lt
 8012660:	9204      	strlt	r2, [sp, #16]
 8012662:	7823      	ldrb	r3, [r4, #0]
 8012664:	2b2e      	cmp	r3, #46	@ 0x2e
 8012666:	d10a      	bne.n	801267e <_vfiprintf_r+0x156>
 8012668:	7863      	ldrb	r3, [r4, #1]
 801266a:	2b2a      	cmp	r3, #42	@ 0x2a
 801266c:	d132      	bne.n	80126d4 <_vfiprintf_r+0x1ac>
 801266e:	9b03      	ldr	r3, [sp, #12]
 8012670:	1d1a      	adds	r2, r3, #4
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	9203      	str	r2, [sp, #12]
 8012676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801267a:	3402      	adds	r4, #2
 801267c:	9305      	str	r3, [sp, #20]
 801267e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012754 <_vfiprintf_r+0x22c>
 8012682:	7821      	ldrb	r1, [r4, #0]
 8012684:	2203      	movs	r2, #3
 8012686:	4650      	mov	r0, sl
 8012688:	f7ed fe2a 	bl	80002e0 <memchr>
 801268c:	b138      	cbz	r0, 801269e <_vfiprintf_r+0x176>
 801268e:	9b04      	ldr	r3, [sp, #16]
 8012690:	eba0 000a 	sub.w	r0, r0, sl
 8012694:	2240      	movs	r2, #64	@ 0x40
 8012696:	4082      	lsls	r2, r0
 8012698:	4313      	orrs	r3, r2
 801269a:	3401      	adds	r4, #1
 801269c:	9304      	str	r3, [sp, #16]
 801269e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126a2:	4829      	ldr	r0, [pc, #164]	@ (8012748 <_vfiprintf_r+0x220>)
 80126a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80126a8:	2206      	movs	r2, #6
 80126aa:	f7ed fe19 	bl	80002e0 <memchr>
 80126ae:	2800      	cmp	r0, #0
 80126b0:	d03f      	beq.n	8012732 <_vfiprintf_r+0x20a>
 80126b2:	4b26      	ldr	r3, [pc, #152]	@ (801274c <_vfiprintf_r+0x224>)
 80126b4:	bb1b      	cbnz	r3, 80126fe <_vfiprintf_r+0x1d6>
 80126b6:	9b03      	ldr	r3, [sp, #12]
 80126b8:	3307      	adds	r3, #7
 80126ba:	f023 0307 	bic.w	r3, r3, #7
 80126be:	3308      	adds	r3, #8
 80126c0:	9303      	str	r3, [sp, #12]
 80126c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126c4:	443b      	add	r3, r7
 80126c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80126c8:	e76a      	b.n	80125a0 <_vfiprintf_r+0x78>
 80126ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80126ce:	460c      	mov	r4, r1
 80126d0:	2001      	movs	r0, #1
 80126d2:	e7a8      	b.n	8012626 <_vfiprintf_r+0xfe>
 80126d4:	2300      	movs	r3, #0
 80126d6:	3401      	adds	r4, #1
 80126d8:	9305      	str	r3, [sp, #20]
 80126da:	4619      	mov	r1, r3
 80126dc:	f04f 0c0a 	mov.w	ip, #10
 80126e0:	4620      	mov	r0, r4
 80126e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126e6:	3a30      	subs	r2, #48	@ 0x30
 80126e8:	2a09      	cmp	r2, #9
 80126ea:	d903      	bls.n	80126f4 <_vfiprintf_r+0x1cc>
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d0c6      	beq.n	801267e <_vfiprintf_r+0x156>
 80126f0:	9105      	str	r1, [sp, #20]
 80126f2:	e7c4      	b.n	801267e <_vfiprintf_r+0x156>
 80126f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80126f8:	4604      	mov	r4, r0
 80126fa:	2301      	movs	r3, #1
 80126fc:	e7f0      	b.n	80126e0 <_vfiprintf_r+0x1b8>
 80126fe:	ab03      	add	r3, sp, #12
 8012700:	9300      	str	r3, [sp, #0]
 8012702:	462a      	mov	r2, r5
 8012704:	4b12      	ldr	r3, [pc, #72]	@ (8012750 <_vfiprintf_r+0x228>)
 8012706:	a904      	add	r1, sp, #16
 8012708:	4630      	mov	r0, r6
 801270a:	f7fb fb61 	bl	800ddd0 <_printf_float>
 801270e:	4607      	mov	r7, r0
 8012710:	1c78      	adds	r0, r7, #1
 8012712:	d1d6      	bne.n	80126c2 <_vfiprintf_r+0x19a>
 8012714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012716:	07d9      	lsls	r1, r3, #31
 8012718:	d405      	bmi.n	8012726 <_vfiprintf_r+0x1fe>
 801271a:	89ab      	ldrh	r3, [r5, #12]
 801271c:	059a      	lsls	r2, r3, #22
 801271e:	d402      	bmi.n	8012726 <_vfiprintf_r+0x1fe>
 8012720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012722:	f7fc fae7 	bl	800ecf4 <__retarget_lock_release_recursive>
 8012726:	89ab      	ldrh	r3, [r5, #12]
 8012728:	065b      	lsls	r3, r3, #25
 801272a:	f53f af1f 	bmi.w	801256c <_vfiprintf_r+0x44>
 801272e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012730:	e71e      	b.n	8012570 <_vfiprintf_r+0x48>
 8012732:	ab03      	add	r3, sp, #12
 8012734:	9300      	str	r3, [sp, #0]
 8012736:	462a      	mov	r2, r5
 8012738:	4b05      	ldr	r3, [pc, #20]	@ (8012750 <_vfiprintf_r+0x228>)
 801273a:	a904      	add	r1, sp, #16
 801273c:	4630      	mov	r0, r6
 801273e:	f7fb fdcf 	bl	800e2e0 <_printf_i>
 8012742:	e7e4      	b.n	801270e <_vfiprintf_r+0x1e6>
 8012744:	08012be3 	.word	0x08012be3
 8012748:	08012bed 	.word	0x08012bed
 801274c:	0800ddd1 	.word	0x0800ddd1
 8012750:	08012505 	.word	0x08012505
 8012754:	08012be9 	.word	0x08012be9

08012758 <__swbuf_r>:
 8012758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801275a:	460e      	mov	r6, r1
 801275c:	4614      	mov	r4, r2
 801275e:	4605      	mov	r5, r0
 8012760:	b118      	cbz	r0, 801276a <__swbuf_r+0x12>
 8012762:	6a03      	ldr	r3, [r0, #32]
 8012764:	b90b      	cbnz	r3, 801276a <__swbuf_r+0x12>
 8012766:	f7fc f96b 	bl	800ea40 <__sinit>
 801276a:	69a3      	ldr	r3, [r4, #24]
 801276c:	60a3      	str	r3, [r4, #8]
 801276e:	89a3      	ldrh	r3, [r4, #12]
 8012770:	071a      	lsls	r2, r3, #28
 8012772:	d501      	bpl.n	8012778 <__swbuf_r+0x20>
 8012774:	6923      	ldr	r3, [r4, #16]
 8012776:	b943      	cbnz	r3, 801278a <__swbuf_r+0x32>
 8012778:	4621      	mov	r1, r4
 801277a:	4628      	mov	r0, r5
 801277c:	f000 f82a 	bl	80127d4 <__swsetup_r>
 8012780:	b118      	cbz	r0, 801278a <__swbuf_r+0x32>
 8012782:	f04f 37ff 	mov.w	r7, #4294967295
 8012786:	4638      	mov	r0, r7
 8012788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801278a:	6823      	ldr	r3, [r4, #0]
 801278c:	6922      	ldr	r2, [r4, #16]
 801278e:	1a98      	subs	r0, r3, r2
 8012790:	6963      	ldr	r3, [r4, #20]
 8012792:	b2f6      	uxtb	r6, r6
 8012794:	4283      	cmp	r3, r0
 8012796:	4637      	mov	r7, r6
 8012798:	dc05      	bgt.n	80127a6 <__swbuf_r+0x4e>
 801279a:	4621      	mov	r1, r4
 801279c:	4628      	mov	r0, r5
 801279e:	f7ff f971 	bl	8011a84 <_fflush_r>
 80127a2:	2800      	cmp	r0, #0
 80127a4:	d1ed      	bne.n	8012782 <__swbuf_r+0x2a>
 80127a6:	68a3      	ldr	r3, [r4, #8]
 80127a8:	3b01      	subs	r3, #1
 80127aa:	60a3      	str	r3, [r4, #8]
 80127ac:	6823      	ldr	r3, [r4, #0]
 80127ae:	1c5a      	adds	r2, r3, #1
 80127b0:	6022      	str	r2, [r4, #0]
 80127b2:	701e      	strb	r6, [r3, #0]
 80127b4:	6962      	ldr	r2, [r4, #20]
 80127b6:	1c43      	adds	r3, r0, #1
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d004      	beq.n	80127c6 <__swbuf_r+0x6e>
 80127bc:	89a3      	ldrh	r3, [r4, #12]
 80127be:	07db      	lsls	r3, r3, #31
 80127c0:	d5e1      	bpl.n	8012786 <__swbuf_r+0x2e>
 80127c2:	2e0a      	cmp	r6, #10
 80127c4:	d1df      	bne.n	8012786 <__swbuf_r+0x2e>
 80127c6:	4621      	mov	r1, r4
 80127c8:	4628      	mov	r0, r5
 80127ca:	f7ff f95b 	bl	8011a84 <_fflush_r>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d0d9      	beq.n	8012786 <__swbuf_r+0x2e>
 80127d2:	e7d6      	b.n	8012782 <__swbuf_r+0x2a>

080127d4 <__swsetup_r>:
 80127d4:	b538      	push	{r3, r4, r5, lr}
 80127d6:	4b29      	ldr	r3, [pc, #164]	@ (801287c <__swsetup_r+0xa8>)
 80127d8:	4605      	mov	r5, r0
 80127da:	6818      	ldr	r0, [r3, #0]
 80127dc:	460c      	mov	r4, r1
 80127de:	b118      	cbz	r0, 80127e8 <__swsetup_r+0x14>
 80127e0:	6a03      	ldr	r3, [r0, #32]
 80127e2:	b90b      	cbnz	r3, 80127e8 <__swsetup_r+0x14>
 80127e4:	f7fc f92c 	bl	800ea40 <__sinit>
 80127e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127ec:	0719      	lsls	r1, r3, #28
 80127ee:	d422      	bmi.n	8012836 <__swsetup_r+0x62>
 80127f0:	06da      	lsls	r2, r3, #27
 80127f2:	d407      	bmi.n	8012804 <__swsetup_r+0x30>
 80127f4:	2209      	movs	r2, #9
 80127f6:	602a      	str	r2, [r5, #0]
 80127f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127fc:	81a3      	strh	r3, [r4, #12]
 80127fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012802:	e033      	b.n	801286c <__swsetup_r+0x98>
 8012804:	0758      	lsls	r0, r3, #29
 8012806:	d512      	bpl.n	801282e <__swsetup_r+0x5a>
 8012808:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801280a:	b141      	cbz	r1, 801281e <__swsetup_r+0x4a>
 801280c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012810:	4299      	cmp	r1, r3
 8012812:	d002      	beq.n	801281a <__swsetup_r+0x46>
 8012814:	4628      	mov	r0, r5
 8012816:	f7fd f85d 	bl	800f8d4 <_free_r>
 801281a:	2300      	movs	r3, #0
 801281c:	6363      	str	r3, [r4, #52]	@ 0x34
 801281e:	89a3      	ldrh	r3, [r4, #12]
 8012820:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012824:	81a3      	strh	r3, [r4, #12]
 8012826:	2300      	movs	r3, #0
 8012828:	6063      	str	r3, [r4, #4]
 801282a:	6923      	ldr	r3, [r4, #16]
 801282c:	6023      	str	r3, [r4, #0]
 801282e:	89a3      	ldrh	r3, [r4, #12]
 8012830:	f043 0308 	orr.w	r3, r3, #8
 8012834:	81a3      	strh	r3, [r4, #12]
 8012836:	6923      	ldr	r3, [r4, #16]
 8012838:	b94b      	cbnz	r3, 801284e <__swsetup_r+0x7a>
 801283a:	89a3      	ldrh	r3, [r4, #12]
 801283c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012844:	d003      	beq.n	801284e <__swsetup_r+0x7a>
 8012846:	4621      	mov	r1, r4
 8012848:	4628      	mov	r0, r5
 801284a:	f000 f883 	bl	8012954 <__smakebuf_r>
 801284e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012852:	f013 0201 	ands.w	r2, r3, #1
 8012856:	d00a      	beq.n	801286e <__swsetup_r+0x9a>
 8012858:	2200      	movs	r2, #0
 801285a:	60a2      	str	r2, [r4, #8]
 801285c:	6962      	ldr	r2, [r4, #20]
 801285e:	4252      	negs	r2, r2
 8012860:	61a2      	str	r2, [r4, #24]
 8012862:	6922      	ldr	r2, [r4, #16]
 8012864:	b942      	cbnz	r2, 8012878 <__swsetup_r+0xa4>
 8012866:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801286a:	d1c5      	bne.n	80127f8 <__swsetup_r+0x24>
 801286c:	bd38      	pop	{r3, r4, r5, pc}
 801286e:	0799      	lsls	r1, r3, #30
 8012870:	bf58      	it	pl
 8012872:	6962      	ldrpl	r2, [r4, #20]
 8012874:	60a2      	str	r2, [r4, #8]
 8012876:	e7f4      	b.n	8012862 <__swsetup_r+0x8e>
 8012878:	2000      	movs	r0, #0
 801287a:	e7f7      	b.n	801286c <__swsetup_r+0x98>
 801287c:	24000030 	.word	0x24000030

08012880 <_raise_r>:
 8012880:	291f      	cmp	r1, #31
 8012882:	b538      	push	{r3, r4, r5, lr}
 8012884:	4605      	mov	r5, r0
 8012886:	460c      	mov	r4, r1
 8012888:	d904      	bls.n	8012894 <_raise_r+0x14>
 801288a:	2316      	movs	r3, #22
 801288c:	6003      	str	r3, [r0, #0]
 801288e:	f04f 30ff 	mov.w	r0, #4294967295
 8012892:	bd38      	pop	{r3, r4, r5, pc}
 8012894:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012896:	b112      	cbz	r2, 801289e <_raise_r+0x1e>
 8012898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801289c:	b94b      	cbnz	r3, 80128b2 <_raise_r+0x32>
 801289e:	4628      	mov	r0, r5
 80128a0:	f000 f830 	bl	8012904 <_getpid_r>
 80128a4:	4622      	mov	r2, r4
 80128a6:	4601      	mov	r1, r0
 80128a8:	4628      	mov	r0, r5
 80128aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128ae:	f000 b817 	b.w	80128e0 <_kill_r>
 80128b2:	2b01      	cmp	r3, #1
 80128b4:	d00a      	beq.n	80128cc <_raise_r+0x4c>
 80128b6:	1c59      	adds	r1, r3, #1
 80128b8:	d103      	bne.n	80128c2 <_raise_r+0x42>
 80128ba:	2316      	movs	r3, #22
 80128bc:	6003      	str	r3, [r0, #0]
 80128be:	2001      	movs	r0, #1
 80128c0:	e7e7      	b.n	8012892 <_raise_r+0x12>
 80128c2:	2100      	movs	r1, #0
 80128c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80128c8:	4620      	mov	r0, r4
 80128ca:	4798      	blx	r3
 80128cc:	2000      	movs	r0, #0
 80128ce:	e7e0      	b.n	8012892 <_raise_r+0x12>

080128d0 <raise>:
 80128d0:	4b02      	ldr	r3, [pc, #8]	@ (80128dc <raise+0xc>)
 80128d2:	4601      	mov	r1, r0
 80128d4:	6818      	ldr	r0, [r3, #0]
 80128d6:	f7ff bfd3 	b.w	8012880 <_raise_r>
 80128da:	bf00      	nop
 80128dc:	24000030 	.word	0x24000030

080128e0 <_kill_r>:
 80128e0:	b538      	push	{r3, r4, r5, lr}
 80128e2:	4d07      	ldr	r5, [pc, #28]	@ (8012900 <_kill_r+0x20>)
 80128e4:	2300      	movs	r3, #0
 80128e6:	4604      	mov	r4, r0
 80128e8:	4608      	mov	r0, r1
 80128ea:	4611      	mov	r1, r2
 80128ec:	602b      	str	r3, [r5, #0]
 80128ee:	f7ef fab1 	bl	8001e54 <_kill>
 80128f2:	1c43      	adds	r3, r0, #1
 80128f4:	d102      	bne.n	80128fc <_kill_r+0x1c>
 80128f6:	682b      	ldr	r3, [r5, #0]
 80128f8:	b103      	cbz	r3, 80128fc <_kill_r+0x1c>
 80128fa:	6023      	str	r3, [r4, #0]
 80128fc:	bd38      	pop	{r3, r4, r5, pc}
 80128fe:	bf00      	nop
 8012900:	24000a5c 	.word	0x24000a5c

08012904 <_getpid_r>:
 8012904:	f7ef ba9e 	b.w	8001e44 <_getpid>

08012908 <__swhatbuf_r>:
 8012908:	b570      	push	{r4, r5, r6, lr}
 801290a:	460c      	mov	r4, r1
 801290c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012910:	2900      	cmp	r1, #0
 8012912:	b096      	sub	sp, #88	@ 0x58
 8012914:	4615      	mov	r5, r2
 8012916:	461e      	mov	r6, r3
 8012918:	da0d      	bge.n	8012936 <__swhatbuf_r+0x2e>
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012920:	f04f 0100 	mov.w	r1, #0
 8012924:	bf14      	ite	ne
 8012926:	2340      	movne	r3, #64	@ 0x40
 8012928:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801292c:	2000      	movs	r0, #0
 801292e:	6031      	str	r1, [r6, #0]
 8012930:	602b      	str	r3, [r5, #0]
 8012932:	b016      	add	sp, #88	@ 0x58
 8012934:	bd70      	pop	{r4, r5, r6, pc}
 8012936:	466a      	mov	r2, sp
 8012938:	f000 f848 	bl	80129cc <_fstat_r>
 801293c:	2800      	cmp	r0, #0
 801293e:	dbec      	blt.n	801291a <__swhatbuf_r+0x12>
 8012940:	9901      	ldr	r1, [sp, #4]
 8012942:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012946:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801294a:	4259      	negs	r1, r3
 801294c:	4159      	adcs	r1, r3
 801294e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012952:	e7eb      	b.n	801292c <__swhatbuf_r+0x24>

08012954 <__smakebuf_r>:
 8012954:	898b      	ldrh	r3, [r1, #12]
 8012956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012958:	079d      	lsls	r5, r3, #30
 801295a:	4606      	mov	r6, r0
 801295c:	460c      	mov	r4, r1
 801295e:	d507      	bpl.n	8012970 <__smakebuf_r+0x1c>
 8012960:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012964:	6023      	str	r3, [r4, #0]
 8012966:	6123      	str	r3, [r4, #16]
 8012968:	2301      	movs	r3, #1
 801296a:	6163      	str	r3, [r4, #20]
 801296c:	b003      	add	sp, #12
 801296e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012970:	ab01      	add	r3, sp, #4
 8012972:	466a      	mov	r2, sp
 8012974:	f7ff ffc8 	bl	8012908 <__swhatbuf_r>
 8012978:	9f00      	ldr	r7, [sp, #0]
 801297a:	4605      	mov	r5, r0
 801297c:	4639      	mov	r1, r7
 801297e:	4630      	mov	r0, r6
 8012980:	f7fd f81c 	bl	800f9bc <_malloc_r>
 8012984:	b948      	cbnz	r0, 801299a <__smakebuf_r+0x46>
 8012986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801298a:	059a      	lsls	r2, r3, #22
 801298c:	d4ee      	bmi.n	801296c <__smakebuf_r+0x18>
 801298e:	f023 0303 	bic.w	r3, r3, #3
 8012992:	f043 0302 	orr.w	r3, r3, #2
 8012996:	81a3      	strh	r3, [r4, #12]
 8012998:	e7e2      	b.n	8012960 <__smakebuf_r+0xc>
 801299a:	89a3      	ldrh	r3, [r4, #12]
 801299c:	6020      	str	r0, [r4, #0]
 801299e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80129a2:	81a3      	strh	r3, [r4, #12]
 80129a4:	9b01      	ldr	r3, [sp, #4]
 80129a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80129aa:	b15b      	cbz	r3, 80129c4 <__smakebuf_r+0x70>
 80129ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129b0:	4630      	mov	r0, r6
 80129b2:	f000 f81d 	bl	80129f0 <_isatty_r>
 80129b6:	b128      	cbz	r0, 80129c4 <__smakebuf_r+0x70>
 80129b8:	89a3      	ldrh	r3, [r4, #12]
 80129ba:	f023 0303 	bic.w	r3, r3, #3
 80129be:	f043 0301 	orr.w	r3, r3, #1
 80129c2:	81a3      	strh	r3, [r4, #12]
 80129c4:	89a3      	ldrh	r3, [r4, #12]
 80129c6:	431d      	orrs	r5, r3
 80129c8:	81a5      	strh	r5, [r4, #12]
 80129ca:	e7cf      	b.n	801296c <__smakebuf_r+0x18>

080129cc <_fstat_r>:
 80129cc:	b538      	push	{r3, r4, r5, lr}
 80129ce:	4d07      	ldr	r5, [pc, #28]	@ (80129ec <_fstat_r+0x20>)
 80129d0:	2300      	movs	r3, #0
 80129d2:	4604      	mov	r4, r0
 80129d4:	4608      	mov	r0, r1
 80129d6:	4611      	mov	r1, r2
 80129d8:	602b      	str	r3, [r5, #0]
 80129da:	f7ef fa9b 	bl	8001f14 <_fstat>
 80129de:	1c43      	adds	r3, r0, #1
 80129e0:	d102      	bne.n	80129e8 <_fstat_r+0x1c>
 80129e2:	682b      	ldr	r3, [r5, #0]
 80129e4:	b103      	cbz	r3, 80129e8 <_fstat_r+0x1c>
 80129e6:	6023      	str	r3, [r4, #0]
 80129e8:	bd38      	pop	{r3, r4, r5, pc}
 80129ea:	bf00      	nop
 80129ec:	24000a5c 	.word	0x24000a5c

080129f0 <_isatty_r>:
 80129f0:	b538      	push	{r3, r4, r5, lr}
 80129f2:	4d06      	ldr	r5, [pc, #24]	@ (8012a0c <_isatty_r+0x1c>)
 80129f4:	2300      	movs	r3, #0
 80129f6:	4604      	mov	r4, r0
 80129f8:	4608      	mov	r0, r1
 80129fa:	602b      	str	r3, [r5, #0]
 80129fc:	f7ef fa9a 	bl	8001f34 <_isatty>
 8012a00:	1c43      	adds	r3, r0, #1
 8012a02:	d102      	bne.n	8012a0a <_isatty_r+0x1a>
 8012a04:	682b      	ldr	r3, [r5, #0]
 8012a06:	b103      	cbz	r3, 8012a0a <_isatty_r+0x1a>
 8012a08:	6023      	str	r3, [r4, #0]
 8012a0a:	bd38      	pop	{r3, r4, r5, pc}
 8012a0c:	24000a5c 	.word	0x24000a5c

08012a10 <_init>:
 8012a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a12:	bf00      	nop
 8012a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a16:	bc08      	pop	{r3}
 8012a18:	469e      	mov	lr, r3
 8012a1a:	4770      	bx	lr

08012a1c <_fini>:
 8012a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a1e:	bf00      	nop
 8012a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a22:	bc08      	pop	{r3}
 8012a24:	469e      	mov	lr, r3
 8012a26:	4770      	bx	lr
